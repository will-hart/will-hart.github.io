<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>William Hart | willhart.io</title>
    <subtitle>My little internet home page, full of uninteresting musings and thinking out louds.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://willhart.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://willhart.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-07-21T00:00:00+00:00</updated>
    <id>https://willhart.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Morse Kodeboard - a Morse Code Keyboard</title>
        <published>2025-07-21T00:00:00+00:00</published>
        <updated>2025-07-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/morse-kodeboard/"/>
        <id>https://willhart.io/post/morse-kodeboard/</id>
        
        <content type="html" xml:base="https://willhart.io/post/morse-kodeboard/">&lt;p&gt;Here is another project in a long line of “I don’t know why I’m doing this”
projects! A while back my family and I spent a week in coastal Victoria as I was
running the Great Ocean Road Marathon. While we were there we visited the
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.lightstation.com&quot;&gt;Cape Otway Lightstation&lt;&#x2F;a&gt;, which was an important
lighthouse that helped guide ships through the “Shipwreck Coast”.&lt;&#x2F;p&gt;
&lt;p&gt;The Lightstation was also a key part of a 400km long telegraph cable that connected
Tasmania to the Australian mainland in the 1850s. In one of the buildings we
spotted a morse code table. My kids spent half the long drive back decoding a
message written in &lt;code&gt;dits&lt;&#x2F;code&gt; and &lt;code&gt;dahs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A few weeks later, I was chatting to a friend about my weakness for clicky,
tactile interfaces and input devices. In my excitement I got a bit careless in
my typing and was forced to defend my accuracy. “I’m typing on my Morse Code
keyboard” and then realised I’d found my next project.&lt;&#x2F;p&gt;
&lt;p&gt;The idea was simple - a single button that you tap on long and short pulses. The
keyboard reads the pulses as morse code and outputs the correct codes through a
USB interface.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to call this a:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;—— ——— ·—· ··· · | —·— ——— —·· · —··· ——— ·— ·—· —··&lt;&#x2F;strong&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can find the source code + hardware files at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;morse-kodeboard&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;morse-kodeboard&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-build&quot;&gt;Initial build&lt;&#x2F;h2&gt;
&lt;p&gt;As this project was a bit of a meme, I didn’t really want to over-engineer it.
I’ve already made quite a few USB-HID interfaces using rust firmware, and I have
a few RaspberryPi Pico’s sitting around. So the logical choice was to throw together
some &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;embassy.dev&#x2F;&quot;&gt;embassy&lt;&#x2F;a&gt; firmware and use a third-party morse code
library to decode. By building a simple breadboard circuit I had something up
and running in a couple of evenings.&lt;&#x2F;p&gt;
&lt;p&gt;As usual I had some issues with getting USB descriptors sorted, which
in this case turned out to be because I had a few loops without any “idle” mechanism,
which presumably meant they were hogging 100% of the microcontrollers clock cycles.
This was a fairly easy fix with embassy as I was able to throttle the loops using
a &lt;code&gt;Ticker&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;morse-code-decoding&quot;&gt;Morse Code Decoding&lt;&#x2F;h2&gt;
&lt;p&gt;The next challenge was decoding the button presses into characters. I initially
found a few libraries on crates.io and ran with those, and a couple of these
even supported &lt;code&gt;no-std&lt;&#x2F;code&gt;. Unfortunately I found that these libraries didn’t quite
work in my use case, as they matched “greedily”, meaning that I couldn’t continuously
poll.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if I wanted to type &lt;code&gt;s&lt;&#x2F;code&gt; (···), then when I polled the decoder in a
loop, I’d get &lt;code&gt;e e e&lt;&#x2F;code&gt; (· · ·). So instead I decided to implement my own decoder,
which can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;morse-kodeboard&#x2F;blob&#x2F;main&#x2F;src&#x2F;decoder.rs&quot;&gt;on the GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Its a fairly basic bit of code that has a “dit time” specified, is fed high and
low edges of a button and converts that into pulse durations and gaps. It then
stores these as dits, dahs and breaks in a ring buffer. The buffer is compared
to a set of acceptable characters using a &lt;code&gt;match&lt;&#x2F;code&gt;, for example here is the pattern
for the first few characters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(c) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.value_buffer {
&lt;&#x2F;span&gt;&lt;span&gt;            [Dit, Dah, Break, Empty, Empty, Empty] =&amp;gt; Some(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;            [Dah, Dit, Dit, Dit, Break, Empty] =&amp;gt; Some(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;            [Dah, Dit, Dah, Dit, Break, Empty] =&amp;gt; Some(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;} {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; handle a character
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reset the ring buffer
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this approach made decoding a lot simpler. A task could be set up to watch
the morse code button, feed the inputs to the decoder and when a character match
was found, use a channel to feed that character to the task that managed the USB
HID interface.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-keys&quot;&gt;More keys?&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I realised a few fundamental issues with the one button approach.
For starters, without a space bar it is very hard to write more than one very long
word. So a space key was a must. Secondly, without a shift key, it was very hard
to add punctuation, proper sentence structure or beyond basic text. This might
have been OK in the days when morse code was in regular use, but in this modern
era I’d love to be able to type &lt;em&gt;most&lt;&#x2F;em&gt; things without being shouted at for poor
punctuation.&lt;&#x2F;p&gt;
&lt;p&gt;So one key turned into three keys&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; - a “morse” key, a shift key and a space key.
This in turn meant the firmware now had a lot of different tasks spawned:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;usb_loop&lt;&#x2F;code&gt; that manages the underlying USB interface&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;usb_hid_loop&lt;&#x2F;code&gt; that manages writing to the USB HID interface&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;usb_request_handler&lt;&#x2F;code&gt; that manages incoming requests on the USB HID interface&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;monitor_space_key&lt;&#x2F;code&gt; task that watches the space button and generates ’ ’ characters
for the USB HID loop to send&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;generate_morse_code_characters&lt;&#x2F;code&gt; task, that watches the &lt;code&gt;shift&lt;&#x2F;code&gt; and &lt;code&gt;morse&lt;&#x2F;code&gt;
keys and generates the appropriate morse code characters for the &lt;code&gt;usb_hid_loop&lt;&#x2F;code&gt;
to send.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The whole thing is tied together with a series of bounded embassy &lt;code&gt;Channel&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a video of the firmware running on a breadboard device with a debugger
attached:&lt;&#x2F;p&gt;
&lt;video controls muted loop preload=&quot;metadata&quot; width=&quot;640&quot; height=&quot;480&quot; style=&quot;margin: -2rem auto 3rem auto;&quot;&gt;
  &lt;source src=&quot;morse_code_example.webm&quot; type=&quot;video&#x2F;webm&quot;&gt;
  Your browser does not support the video tag.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;building-the-hardware&quot;&gt;Building the hardware&lt;&#x2F;h2&gt;
&lt;p&gt;As much as this was a meme project, I felt like adding some hardware would be nice.
I figured as this was a keyboard (and I have some hardware lying around) that
using hot-swappable mechanical switches would be a good first start&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;From here making a PCB in Kicad was pretty straightforward, its a connector,
three mechanical switches (using hot-swappable sockets) and a few 0603 pull-up
resistors. It took may an hour or two, then I sent of the gerbers to a Chinese
fab, and a week later for less than a tenner I had a few PCBs to play with.
Soldering was very straightforward by hand and took maybe 20 minutes, although
I have to admit to doing a pretty poor job of the connectors&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and they’re
straight not right-angled as I’d originally planned.&lt;&#x2F;p&gt;
&lt;p&gt;The resulting Frankenstein looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;morse-kodeboard&#x2F;morse_kodeboard_pcb.jpg&quot; alt=&quot;The Morse Kodeboard PCB&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;typing-performance&quot;&gt;Typing performance&lt;&#x2F;h2&gt;
&lt;p&gt;OK, I know what you’re really here to see is how fast you can type on a Morse
Kodeboard. To keep this comparison fair, I think some benchmarking is in
order. There are lots of random typing speed tests on the internet, so let’s try
to see how fast I can type on the Kodeboard vs a regular keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;First the control, typing on my Keychron K8:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;morse-kodeboard&#x2F;keyboard_typing_test.png&quot; alt=&quot;Typing test results from a normal keyboard - 107 words per minute, 97% accuracy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I do find sometimes I can type faster but then get in loops where the delete key
gets a real work out. Actually, that makes me think - I don’t actually have a
delete key on the Kodeboard! We’re in too deep now to go back, so I’ll just have
to be perfect.&lt;&#x2F;p&gt;
&lt;p&gt;And the Kodeboard results are in:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;morse-kodeboard&#x2F;kodeboard_typing_test.png&quot; alt=&quot;Typing test results from Morse Kodeboard - 5 words per minute, 93% accuracy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Kodeboard is about 20x slower, but around the same accuracy if you squint.
So I guess we call that tie (or should I say a &lt;code&gt;— ·· ·&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;&#x2F;h2&gt;
&lt;p&gt;I’m not sure if there is anything next to be honest! It could do with an enclosure.
I have a few options here&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Butcher an electronics project box (maybe a laser cut top),&lt;&#x2F;li&gt;
&lt;li&gt;Print or laser cut a fully custom enclosure,&lt;&#x2F;li&gt;
&lt;li&gt;Look at a more traditional morse code key, of which it seems there are a wide
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hamuniverse.com&#x2F;n2eycodekeys.html&quot;&gt;variety of types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I could see some other features being added like:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A rotary encoder to set the duration of a &lt;code&gt;dit&lt;&#x2F;code&gt; (i.e. how fast you have to tap)&lt;&#x2F;li&gt;
&lt;li&gt;A delete button&lt;&#x2F;li&gt;
&lt;li&gt;Some LEDs indicating i.e. when “shift” is down (actually its more like Capslock)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;A this point though I think I’ve made my point, whatever that is and I may just
throw it in a project box and call it a day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;Morse Kodeboard, as you may have guessed. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;Spoiler, its probably going to need more than three keys. &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;Eventually it would be nice perhaps to build a more old-fashioned morse-code style interface, but for now this is still a “keyboard” in the modern sense. &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;The offending soldering work is blurred for your safety. &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;section&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building a basketball video analysis software tool</title>
        <published>2024-05-30T00:00:00+00:00</published>
        <updated>2024-05-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/basketball-analysis-software/"/>
        <id>https://willhart.io/post/basketball-analysis-software/</id>
        
        <content type="html" xml:base="https://willhart.io/post/basketball-analysis-software/">&lt;blockquote&gt;
&lt;p&gt;This is a super long article discussing a tool that has been on my mind for at
least eight years. I’m probably the only one interested in these details, but
it is satisfying for me to document this project as I’m unlikely to release
the source code and it seems my work on the project is coming to an end.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In fiction writing, there is a saying - “show don’t tell”. I think this is also
a great phrase to apply as a youth sports coach. I’ve been coaching junior
basketball for about 25 years now at various levels. Over that time I’ve
noticed a big increase in the level of professionalism and the technical
expertise of coaches.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, twenty years ago video analysis was very rare, but these days
analysing game film with the team can be done routinely, even at the youngest
levels of representative basketball. All our games are now filmed and available
on Youtube or other services. Video analysis is a fantastic tool as a coach to
both highlight areas for improvement and show where players are doing things
well. Often a message only really sinks in for players when they see the
examples (both positive and negative) in game film.&lt;&#x2F;p&gt;
&lt;p&gt;I previously posted about my &lt;a href=&quot;&#x2F;post&#x2F;first-impressions-converting-a-firebase-project-to-graphql&quot;&gt;basketball diagram
software&lt;&#x2F;a&gt;
which I used to write training plans, do scouting reports and diagram plays. In
addition to this tool, I’ve also spent over eight years slowly building a tool
for video analysis, similar to tools from hudl or Catapult. I’m going to
describe a little bit about this tool and how I built it in this post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defining-the-product&quot;&gt;Defining the “product”&lt;&#x2F;h2&gt;
&lt;p&gt;I’m a volunteer coach with my own job and family, and so in addition to having
limited training time, I also want to spend as little time as possible preparing
for video analysis (Yes, I’m aware that I probably spent hundreds of hours
building a software tool to save me minutes of effort).&lt;&#x2F;p&gt;
&lt;p&gt;So about eight years ago I began to develop a software tool that would:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;let me watch a game film (preferably at 1.5x speed),&lt;&#x2F;li&gt;
&lt;li&gt;“tag up” key plays with text, or as specific “events” in the game,&lt;&#x2F;li&gt;
&lt;li&gt;play back the video using the list of tags to jump to key sections,&lt;&#x2F;li&gt;
&lt;li&gt;filter the list of tags so that I can jump to “every time we ran offence X” or
“defence Y”&lt;&#x2F;li&gt;
&lt;li&gt;generate box scores, shot charts, and other stats from the tags.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As the tool evolved I added and removed some other features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Telestrator&quot;&gt;telestrator&lt;&#x2F;a&gt; feature to
playback,&lt;&#x2F;li&gt;
&lt;li&gt;automatically export a filtered set of tags to a “highlights video”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;&#x2F;h2&gt;
&lt;p&gt;I want to highlight up front some of the key challenges I faced while building
this tool, and then discuss later how each implementation attempted to address
them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-the-tagging-problem&quot;&gt;1. The tagging problem&lt;&#x2F;h3&gt;
&lt;p&gt;Strangely enough, one of the trickiest pieces of the project was how to create
the video tags. From the start I wanted to be able to gather more data than just
a plain text “bookmark”. This requires being able to provide a UI that can
select from different basketball actions, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;typical basketball stats like pass, shot, turnover, rebound, etc,&lt;&#x2F;li&gt;
&lt;li&gt;plain text tags at a specific time (“x happened at this time”),&lt;&#x2F;li&gt;
&lt;li&gt;plain text tags across a time span (“y happened at this time, for A seconds”),&lt;&#x2F;li&gt;
&lt;li&gt;add “meta” tags like lineup changes, clock times, clock start&#x2F;stop, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It turns out that each of these potential tags requires different metadata to be
associated with it, for instance a shot may require:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the player that took the shot,&lt;&#x2F;li&gt;
&lt;li&gt;where the shot was taken from (and maybe whether it was a free throw, 2pt or
3pt shot),&lt;&#x2F;li&gt;
&lt;li&gt;whether the shot missed or was made,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;while a metadata tag like a “lineup change” may require a list of players that
went on and a list of players that went off.&lt;&#x2F;p&gt;
&lt;p&gt;This is a complex data modelling problem for strongly typed languages, but it is
even more complex as a UI problem, because different controls need to be
displayed depending on both &lt;em&gt;what&lt;&#x2F;em&gt; tag is being created and &lt;em&gt;which&lt;&#x2F;em&gt; details are
being provided. For most UI frameworks this results in a lot of spaghetti code.&lt;&#x2F;p&gt;
&lt;p&gt;I also wanted to be able to annotate a full set of tags while watching the video
at 1.5x speed. I’ll revisit this challenge more as the article goes on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-the-video-hosting-problem&quot;&gt;2. The video hosting problem&lt;&#x2F;h3&gt;
&lt;p&gt;From the start I had a challenge around how the videos would be made available
to the app and when I was showing them to the players in the video analysis
session. Back when I started mobile data was poor (in Australia) and our
internet speeds didn’t really allow large videos to be uploaded and streamed
reliably. Local files initially seemed like a better option, but that made it
harder to share with other coaches.&lt;&#x2F;p&gt;
&lt;p&gt;Later, once internet speeds improved it became a question of where to host -
either my own cloud media server (expensive and with complex access controls -
these are videos of kids after all) or through an existing hosting site like
youtube. In the end most game film these days ends up on youtube so that became
the logical choice for hosting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-attempt-net-wpf&quot;&gt;First attempt - .NET WPF&lt;&#x2F;h2&gt;
&lt;p&gt;My first attempt was made about eight years ago using a WPF app in C#.
Unfortunately I seem to have lost the source code and all screenshots, but this
was a pretty good first attempt that had tagging and playback of local video
files, showed the tags on the playback progress bar and had a telestrator
functionality.&lt;&#x2F;p&gt;
&lt;p&gt;There were two issues with this implementation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;it was offline only, so it was a bit tricky to share with others,&lt;&#x2F;li&gt;
&lt;li&gt;the tagging interface was very clunky - because of the complexity of the tags
required, it was very difficult in C# to add new tags or to show a custom UI
flow for tagging particular things and adding the relevant metadata. In other
words, the tagging pattern required very stateful UI, which was a bit clumsy
to do in WPF.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To get around the tagging issues I had  brief foray with trying to write the
code in typescript &#x2F; React as a part of the play diagramming tool, but the UI
flow still didn’t sit well and I quickly abandoned the approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;second-attempt-rust-tui&quot;&gt;Second attempt - rust TUI&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;typestate-to-the-rescue&quot;&gt;Typestate to the rescue&lt;&#x2F;h3&gt;
&lt;p&gt;About this time I encountered a language called &lt;code&gt;rust&lt;&#x2F;code&gt;, which you may have heard
of. I pretty quickly fell in love with it (and now use it relatively often in my
day job!). I was playing around with rust for a bunch of tools, but it didn’t
occur to me to try building the video analysis tool in rust until I found the
article by Cliffle on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cliffle.com&#x2F;blog&#x2F;rust-typestate&#x2F;&quot;&gt;type states in
rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;TLDR: the type state approach is sort of like a state machine baked into the
types. In other words, it uses the type system at compile time to ensure only
valid state transitions are available to be called.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As I was reading the article it dawned on me that this was a great model for
tagging videos. The core of the complex user flow could be reduced to a fairly
readable rust enum:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;typestate_implementation_of_tagging.png&quot; alt=&quot;A screenshot of a rust enum showing the typestate pattern used for tagging&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here the variants of the enum are the different states our tagging UI can be in,
for instance setting whether a shot was made or missed, selecting a player, or
selecting a shot location. The &lt;code&gt;VideoTagFactory&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; could then be used to ensure
that &lt;em&gt;only&lt;&#x2F;em&gt; the relevant transitions are available from each “UI state”. It took
a bit of noodling but in short order I’d written up the tagging logic and a rust
“terminal user interface” (TUI) to provide the UI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;syncing-to-video&quot;&gt;Syncing to video&lt;&#x2F;h3&gt;
&lt;p&gt;To manage the video, I worked with local files and used &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.videolan.org&#x2F;VLC_HTTP_requests&#x2F;&quot;&gt;VLC HTTP
requests&lt;&#x2F;a&gt; to control the player.
Overall it was a pretty reliable system, although sometimes VLC would have some
issues buffering when playing youtube videos. I set it up so that I could use
&lt;code&gt;youtube-dl&lt;&#x2F;code&gt; to download videos locally, and configure my tool to accept both a
youtube and local video path, preferring local where available.&lt;&#x2F;p&gt;
&lt;p&gt;This approach &lt;em&gt;immediately&lt;&#x2F;em&gt; felt better. The code was cleaner, the UI just
naturally flowed from the state of the tag, and it was easy to add new tags. I
added a second simpler factory for “text-based” tags, and implemented all the
logic around live box scores. The result looked like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;rust_tui.png&quot; alt=&quot;The rust TUI&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tagging was via keyboard inputs, for instance to add a new shot, I would press
&lt;code&gt;&amp;lt;tab&amp;gt; 2 2 1 4553&amp;lt;enter&amp;gt; y &amp;lt;enter&amp;gt;&lt;&#x2F;code&gt;. Decoding this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;tab&amp;gt;&lt;&#x2F;code&gt; to start a tag&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&lt;&#x2F;code&gt; to select a two-point shot tag&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&lt;&#x2F;code&gt; to select player number 2 in the list as the shooter,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;1&lt;&#x2F;code&gt; to select player number 1 in the list as having assisted the shooter,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;4553&amp;lt;enter&amp;gt;&lt;&#x2F;code&gt; to use a “keypad” system to select where on the court the shot was taken,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y&lt;&#x2F;code&gt; to say the shot was made.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While this looks a bit complicated, after a few minutes of tagging I could
basically tag in real-time (i.e. at 1x playback speed). Tags were saved in a
local file. I also implemented exporting highlights from a list of filtered
plays using &lt;code&gt;ffmpeg&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;challenge-clock-management&quot;&gt;Challenge: Clock management&lt;&#x2F;h3&gt;
&lt;p&gt;An interesting problem came about with mapping video time to game time. For
instance a video may start a few minutes before the game starts, and in our
timing rules the clock stops on every whistle. This means that in order to track
how many minutes players are playing you need to have a separate concept for
“game time” vs “video time”. Tags are in “video time”, while all of the stats
are in “video time”.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is compounded in that all of our scorers are parents, and its fairly
common for them to forget to start or stop the clock at key moments. Depending
on the angle, there isn’t always a scoreboard visible in the video, so its not
always obvious what the game clock is actually showing!&lt;&#x2F;p&gt;
&lt;p&gt;To solve this I introduced the concept of a “clock sync” tag. This was a tag
that was considered a “source of truth” for the current game time, for instance
&lt;code&gt;03:13 remaining in the third quarter&lt;&#x2F;code&gt;. There were also “clock start” and “clock
stop” tags, and “period start” and “period end” tags which were essentially
fancy clock sync tags.&lt;&#x2F;p&gt;
&lt;p&gt;Between these it was possible to produce a basic algorithm which used the
elapsed video time and the clock management tags to determine the game time.
When a clock sync tag was found, the game clock was updated to match, and
elapsed times for things like lineup combinations and player minutes were
reconciled using some business logic.&lt;&#x2F;p&gt;
&lt;p&gt;Overall this wasn’t a complex problem but took a bit of thinking to get right.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;challenge-sharing&quot;&gt;Challenge: Sharing&lt;&#x2F;h3&gt;
&lt;p&gt;One challenge was that this was not easy to share with non-technical people.
Around this time I wanted to step back a little from coaching so I joined
another coach as their assistant. One of my jobs was tagging the video for
analysis with the team, but I couldn’t hand over a terminal program for them to
use. Instead I ended up building a simple &lt;code&gt;tera&lt;&#x2F;code&gt; template generator to output a
standalone HTML file with an embedded youtube player and list of tags.&lt;&#x2F;p&gt;
&lt;p&gt;This was … ugly, but it worked pretty well. Up until Covid hit and we lost
basically two years to the pandemic. Overall I was fairly happy other than it
feeling a bit too “technical” to run, being a bit slapped together with separate
video and TUI windows, and still only letting me tag at about 1x game speed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;third-attempt-rust-axum-and-next-js&quot;&gt;Third attempt - rust (axum) and Next.js&lt;&#x2F;h2&gt;
&lt;p&gt;I took a couple of year hiatus from the project while Covid messed up our
basketball seasons. When things started to return to normal, I began to get more
and more frustrated by the slightly janky TUI and the awkwardness of sharing
game footage.&lt;&#x2F;p&gt;
&lt;p&gt;If I’m honest I also began to wonder at this point whether I had a “genuine
product” on my hands. If I recall at the time hudl cost hundreds of dollars a
month. There seemed to be a gap in the market for a simpler “semi-pro” service
targeted at representative &#x2F; amateur sports where budgets are typically
non-existent. The main problem at this point was around UX pain points, the TUI
worked great for me (and the four or five other people who prefer a TUI over a
GUI) but wasn’t SaaS-ready.&lt;&#x2F;p&gt;
&lt;p&gt;I began to consider turning the tool into a web app, with some of the features a
SaaS requires like user accounts, sharing, granular permissions and so on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tech-stack&quot;&gt;Tech stack&lt;&#x2F;h3&gt;
&lt;p&gt;After a bit of research I settled on a tech stack for round 3.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;postgresql database hosted on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fly.io&quot;&gt;fly.io&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;rust &#x2F; axum backend hosted on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fly.io&quot;&gt;fly.io&lt;&#x2F;a&gt;, which allowed me to
reuse a bunch of the TUI code,&lt;&#x2F;li&gt;
&lt;li&gt;auth via &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;auth0.com&quot;&gt;auth0&lt;&#x2F;a&gt;, so I could outsource user&#x2F;auth code,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then I picked a few “comfort” options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;react front end using next.js,&lt;&#x2F;li&gt;
&lt;li&gt;CI&#x2F;CD via github actions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;building-a-tagging-language&quot;&gt;Building a tagging “language”&lt;&#x2F;h3&gt;
&lt;p&gt;Initially I started reusing a lot of the typestate logic from the TUI. However
at the time I was skimming through &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;app.thestorygraph.com&#x2F;books&#x2F;10606458-5ea8-499a-9940-ed13667d511a&quot;&gt;Basketball on
Paper&lt;&#x2F;a&gt;,
a book about the use of data and statistics in basketball. I remember seeing a
lot of basic statistical errors in the book, however one really interesting
feature of the book was their way of annotating a game using a series of letters
and numbers. I decided to adapt this to my needs.&lt;&#x2F;p&gt;
&lt;p&gt;For instance the following would be used to describe a complete possession:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;01:11 a 19i 9 19 36d 19i 9 4 29x3- 4rt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be broken down as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;01:11&lt;&#x2F;code&gt; this is the “video time” when the possession started&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;a&lt;&#x2F;code&gt; indicates this is a possession for the away team&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;19i&lt;&#x2F;code&gt; indicates player &lt;code&gt;19&lt;&#x2F;code&gt; from the away team inbounded the ball&lt;&#x2F;li&gt;
&lt;li&gt;There were a series of passes between players &lt;code&gt;9 -&amp;gt; 19 -&amp;gt; 36&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When they caught the ball, player &lt;code&gt;36&lt;&#x2F;code&gt; dribbled, and at some point the ball
when out of bounds (probably deflected, but I don’t record that here).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;19i&lt;&#x2F;code&gt; player 19 inbounded the ball again, and a series of passes followed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;29x3-&lt;&#x2F;code&gt; indicates that player 29 took a shot from “region 3” of the court, and
the &lt;code&gt;-&lt;&#x2F;code&gt; indicates it missed. A &lt;code&gt;+&lt;&#x2F;code&gt; would indicate that the shot was made, and
a &lt;code&gt;++&lt;&#x2F;code&gt; would indicate the shot was made and the player who gave them the ball
should be awarded an assist.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;4r&lt;&#x2F;code&gt; player 4 rebounded the ball (we know this is an offensive rebound
because their team has possession)&lt;&#x2F;li&gt;
&lt;li&gt;the final &lt;code&gt;t&lt;&#x2F;code&gt; indicates that player 4 then turned it over.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is a lot of data packed into this single line, and it can be very compact
and detailed, for instance &lt;code&gt;12 99f36x3++.&lt;&#x2F;code&gt; indicates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;#99 took a 2pt shot from “region 3” which is in the key,&lt;&#x2F;li&gt;
&lt;li&gt;They made the shot and #12 was awarded an assist,&lt;&#x2F;li&gt;
&lt;li&gt;#99 was fouled in the act of shooting by #36 from the other team,&lt;&#x2F;li&gt;
&lt;li&gt;#99 missed the resulting free throw&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I can make text tags by typing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@01:11 Good drive and kick (Bob to Fred)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or a text range tag using&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@01:11 +5 A five second range with a text annotation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I implemented a parser using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;nom&quot;&gt;&lt;code&gt;nom&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and the
React GUI had some logic to pre-fill the video time in the tagging text input. A
typical game has 100-150 lines of this format which includes all possessions,
clock management, lineups, annotations and so on.&lt;&#x2F;p&gt;
&lt;p&gt;An excerpt from an actual game looks like this, and can be imported or exported
from the GUI:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;game_metadata.png&quot; alt=&quot;An extract from a game summary written using the custom tagging DSL&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In terms of UX I’d consider this a “pro” interface - its extremely fast to
annotate and quite natural once you learn the key codes, however has a bit of a
learning curve. For a SaaS product it would still need a more traditional “point
and click” GUI interface.&lt;&#x2F;p&gt;
&lt;p&gt;For the users at least the output was human readable, for instance the input
above would be displayed in the UI by a stream of possession logs like this,
along with a running score:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;game_runsheet.png&quot; alt=&quot;A stream of events for a single game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clicking on a timestamp takes you to that time in the video.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stats-and-analysis&quot;&gt;Stats and analysis&lt;&#x2F;h3&gt;
&lt;p&gt;The great thing about all this rich data and the parser was that it suddenly
became possible to “reduce” over these lines and produce detailed stats by
parsing the game sequence into a vector of “actions”, and then running a
“map-reduce” on those to produce a box score. It was also possible to produce a
quarter by quarter breakdown, see an example:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;box_scores.png&quot; alt=&quot;An example box score&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Short charts can also be produced from the same data:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;shot_charts.png&quot; alt=&quot;An example short chart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It was also possible to compute more interesting statistics, such as the
effectiveness of specific lineups:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;lineups.png&quot; alt=&quot;An example of lineup effectiveness stats for a single game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of lineups in a junior basketball game because for player
development and well-being its important that everybody plays a decent amount of
minutes. I also implemented some possession statistics, which in many cases
matched my “feel” of the tempo and outcome of the game pretty closely:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;possession_stats.png&quot; alt=&quot;Example possession statistics&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A neat feature of rust was how easy it was to go from a single game box score to
an average across a subset of games or even a season. By implementing the
&lt;code&gt;std::ops::Add&lt;&#x2F;code&gt; trait on the Box Score then this could be done with basically no
code changes in the API.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sharing-games&quot;&gt;Sharing games&lt;&#x2F;h3&gt;
&lt;p&gt;As this version of the analysis software was written using a SaaS model, there
was a fairly basic underlying role-based permission system. This meant it was
easy to create a “shared” link that was essentially a read-only version of the
page. These were enforced at the postgres DB level using row-level permissions
and tested with unit tests (I know, unit tests a side project!?).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;&#x2F;h2&gt;
&lt;p&gt;Developing the analysis tool has been a very rewarding long-term project. I
learned quite a lot out of doing it and got a lot of pleasure out of using it to
analyse a bunch of games. Since I started working on these tools almost a decade
ago, my life has changed a lot. I have my own little people who rely on me,
other hobbies demanding my time, and a job which seems to drain most of my
energy. I’m probably going to have to hang up my coaching boots at the end of
this season, at least until (or if) my own little kids decide to play. Its hard
to keep plugging away at something that I’ll probably no longer have a use for.&lt;&#x2F;p&gt;
&lt;p&gt;There were some features or ideas that I wanted to return to, and who knows -
maybe one day if my kids are playing and I lace up the coaching clipboard again,
I’ll return to these to “save some time”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-proper-tagging-interface&quot;&gt;A proper tagging interface&lt;&#x2F;h3&gt;
&lt;p&gt;The “text-based” tagging interface in the latest iteration of the analysis
software works for me, but if I ever want other people to use it I’d have to
create a proper GUI for tagging. I think a React interface would have the same
limitations as the original C# one in handling the branching tagging interface.
I’d be curious to try something that uses the existing rust typestate backend
for tagging (developed for the TUI) and delivers HTMX to the front end to show
the correct GUI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integration-with-diagramming-software&quot;&gt;Integration with diagramming software&lt;&#x2F;h3&gt;
&lt;p&gt;I also have some really capable play diagramming software, which at the moment
is a separate tool. I think it would be really interesting to merge the two
tools, and in particular I’d love to be able to draw up diagrams right from
within the video analysis software, either as a teaching or a scouting tool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;machine-learning&quot;&gt;Machine learning&lt;&#x2F;h3&gt;
&lt;p&gt;I think the ultimate UI for tagging videos would be… no UI at all! Could we
get machine learning algorithms to tag up the video for us? I’m not 100% on the
AI hype train, but I do think some good old fashioned machine learning tools to
analyse the video would be useful, especially if they could extract highlights
and tags automatically. It would be even cooler if the ML could process the
video and turn it into play diagrams.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.statsperform.com&#x2F;opta-tracking&#x2F;&quot;&gt;I’m&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@kalidrafts&#x2F;exploring-basketball-spacing-through-computer-vision-broadcast-data-cdff8a118c4f&quot;&gt;clearly&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;automating-basketball-highlights-with-object-tracking-b134ce9afec2&quot;&gt;not&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;datahacker.rs&#x2F;005-advanced-computer-vision-basketball-layer-tracking-with-open-cv&#x2F;&quot;&gt;the&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=yJWAtr3kvPU&quot;&gt;first&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.roboflow.com&#x2F;track-football-players&#x2F;&quot;&gt;to&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=XHT2c8jT3Bc&quot;&gt;think&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sketscripter&#x2F;Computer-vision-basketball-court-mapping-and-player-tracking&quot;&gt;of&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;neptune.ai&#x2F;blog&#x2F;dive-into-football-analytics-with-tensorflow-object-detection-api&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think this would be very challenging given the majority of game films in
amateur leagues probably use off the shelf cameras with poor low-light
performance, and the video angle is often very shallow with lots of players or
spectators obscuring the feed. Despite this it would be &lt;em&gt;very&lt;&#x2F;em&gt; cool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;video-hosting&quot;&gt;Video hosting&lt;&#x2F;h3&gt;
&lt;p&gt;Long-term it would be interesting to have a custom video pipeline using some
sort of streaming media server. I looked at a few options for doing this,
including off the shelf things like Cloudflare Stream, but at the end of the day
for a hobby project Youtube is more than enough!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Embedded rust - comparing RTIC and embassy</title>
        <published>2023-12-30T00:00:00+00:00</published>
        <updated>2023-12-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/embedded-rust-options/"/>
        <id>https://willhart.io/post/embedded-rust-options/</id>
        
        <content type="html" xml:base="https://willhart.io/post/embedded-rust-options/">&lt;h2 id=&quot;writing-custom-input-devices-in-rust&quot;&gt;Writing custom input devices in rust&lt;&#x2F;h2&gt;
&lt;p&gt;Now that the price of ICs has returned to the realms of affordability, I’ve been
playing around with a few programmable input devices powered by STM32. For
instance I made some sorta &lt;a href=&quot;&#x2F;post&#x2F;custom-gaming-foot-pedals&quot;&gt;programmable
pedals&lt;&#x2F;a&gt;
(&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;pedalrs&quot;&gt;code&lt;&#x2F;a&gt;) which were a lot of fun and more
recently I’ve been playing around with a macro-style keyboard called
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;switchy&quot;&gt;switchy&lt;&#x2F;a&gt; which has support for 24
switches, 4 rotary encoders with buttons, and two joysticks with buttons.&lt;&#x2F;p&gt;
&lt;p&gt;Before 2023 work life balance got tipped strongly in favour of work (has it
really been almost a year and a half since my last post?) I had converted the
firmware to use something called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rtic.rs&quot;&gt;&lt;code&gt;RTIC&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which, according to
their website, is a “The hardware accelerated Rust RTOS”, where RTOS is a
real-time operating system.&lt;&#x2F;p&gt;
&lt;p&gt;The summary of what the RTOS provides is that instead of writing your code in a
big loop, e.g.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; pseudo-rust code, obvs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_adcs&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; time_to_next_blink_led {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toggle_led&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      time_to_next_blink_led = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You structure the code into “tasks”, which are scheduled and executed at the
appropriate time by the RTOS. The RTOS bit means that there is a scheduler that
determines when the tasks can run. Tasks can be triggered by interrupts, a
timer, or called as a “one-shot” task. A totally made up non-compiling toy
example might be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(adc_task);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(blink_task);
&lt;&#x2F;span&gt;&lt;span&gt;  join!([task1, task2]).await;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;adc_task&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; ! {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = adc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{value}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wait_millis&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;blink_task&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; ! {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    led.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wait_millis&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This toy example requires a bit more code, but it also clearly separates our
concerns. We use &lt;code&gt;main&lt;&#x2F;code&gt; to set up the logic, then there are two separate tasks
that each do different things. Given that the microcontroller is a resource
constrained environment, there is a fair bit of magic in the &lt;code&gt;spawn&lt;&#x2F;code&gt;ing and
execution of tasks.&lt;&#x2F;p&gt;
&lt;p&gt;There are two main libraries (that I’m aware of) that provide the infrastructure
to do this: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rtic.rs&quot;&gt;&lt;code&gt;rtic-rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;embassy.dev&quot;&gt;&lt;code&gt;embassy&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
Each of these rely on hardware abstraction layers (HALs) that allow &lt;em&gt;almost&lt;&#x2F;em&gt; the
same code to be run on different MCUs. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rtic.rs&#x2F;2&#x2F;book&#x2F;en&#x2F;rtic_and_embassy.html&quot;&gt;RTIC
documentation&lt;&#x2F;a&gt; has an
interesting comparison of the aims of the RTIC project, compared to embassy:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Embassy provides both Hardware Abstraction Layers (HALs), and an
executor&#x2F;runtime, while RTIC aims to only provide an execution framework. [In
RTIC] the user is responsible for providing a PAC (peripheral access crate)
and HAL implementation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words, RTIC aims to be a lot lower level while embassy seems to be
taking a “batteries included” approach. In this post I want to go over my
experience using these two libraries to write the &lt;code&gt;switchy&lt;&#x2F;code&gt; firmware, and
outline what I love (and love slightly less) about these libraries. I decided to
write down my notes on using &lt;code&gt;embassy&lt;&#x2F;code&gt; after returning to &lt;code&gt;switchy&lt;&#x2F;code&gt; after a 10
month delay.&lt;&#x2F;p&gt;
&lt;p&gt;Both embassy and RTIC are amazing software projects, and I’m very excited to
have two solid options like these for writing rust code for embedded targets.
I’ve seen a few fairly complex bits of firmware written using the STM32 C++ HALs
and &lt;em&gt;hoo boy&lt;&#x2F;em&gt; does the rust code look nicer (to me at least).&lt;&#x2F;p&gt;
&lt;p&gt;So in short, these are my opinions and first impressions only, and probably
reflect as much on my own capacity to write embedded rust code as the libraries
themselves, so take everything I say here with a couple of hundred grains of
salt. My impressions are also relatively “high level”, I’m not writing
performance critical or safety critical code so consider this a “hobbyist”
assessment of the two frameworks, likely riddled with errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h2&gt;
&lt;p&gt;Both projects have pretty good getting started guides, although RTIC requires a
bit of digging. The first thing on their home page is a discussion of whether
RTIC is an RTOS while embassy’s home page emphasises &lt;em&gt;what&lt;&#x2F;em&gt; embassy is and shows
a minimal code example, which IMO is a better approach.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, it only takes a little bit of scrolling or one or two clicks to find
a template. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rtic-rs&#x2F;defmt-app-template&quot;&gt;RTIC template&lt;&#x2F;a&gt;
has a great README, while the embassy documentation points you to some examples
before moving on to a great walkthrough of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;embassy.dev&#x2F;book&#x2F;dev&#x2F;new_project.html&quot;&gt;starting a new
project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Both frameworks have a similar amount of mucking about getting targets, build
configurations and debugging set up. Sometimes the guides have worked for me,
and other times I’ve spend a few hours debugging random build errors and
incompatibilities. I think this will get better with time.&lt;&#x2F;p&gt;
&lt;p&gt;Both frameworks now rely on &lt;code&gt;async&lt;&#x2F;code&gt; fns, which I’m ok with but lots of people
seem to have issue with the “terrible async in lang X”. To me the code is much
simpler and expressive with async - for instance if you’re waiting for a message
this seems simpler than a polling loop:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;receiver.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configuring-the-microcontroller&quot;&gt;Configuring the microcontroller&lt;&#x2F;h2&gt;
&lt;p&gt;Configuration is really the realm of the hardware abstraction layer, or HAL. As
mentioned, RTIC relies on you to bring your own HAL, while embassy includes a
bunch of HALs. The main complexity here seems to be driven by the complexity of
the ICs themselves - no code is directly transferrable as (for instance) an
STM32F4 handles ADCs differently to how an STM32F1 or an RP2040 does. I’d say
the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stm32-rs&quot;&gt;&lt;code&gt;stm32-rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rp-rs&#x2F;rp-hal&quot;&gt;&lt;code&gt;rp-hal&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; used by RTIC are &lt;em&gt;probably&lt;&#x2F;em&gt; a bit
more mature here, but they aren’t far off each other.&lt;&#x2F;p&gt;
&lt;p&gt;The configuration function for switchy in the RTIC version lives
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;switchy&#x2F;blob&#x2F;develop&#x2F;src&#x2F;configure.rs#L52&quot;&gt;here&lt;&#x2F;a&gt;.
A typical digital IO pin configuration might look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; gpioc = device_peripherals.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;GPIOC&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pin = gpioc.pc3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_push_pull_output&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For embassy, a similar RP2040 configuration might be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p = embassy_rp::init(config);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pin = p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PIN_2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I did have some issues getting USB HID to work with embassy on an STM32F401
microcontroller. For whatever reason the device just wouldn’t be detected no
matter what I tried. Its possible the chip was faulty, but I changed to a RPi
Pico, spent about an hour converting the code base from STM32F4 to RP2040, and
it worked flawlessly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-hardware-abstraction-layer&quot;&gt;The Hardware Abstraction Layer&lt;&#x2F;h2&gt;
&lt;p&gt;Both HALs rely on &lt;code&gt;embedded_hal&lt;&#x2F;code&gt; to provide common structures for
Pins, allowing re-use of device drivers between MCUs, which is a pretty feature
thing to have for somebody like me with a drawer full of different dev boards.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been successful in running both stm32 and embassy HALs on STM32F0, STM32F1,
STM32F4 and RP2040 targets, often with minimal code changes between MCUs thanks
to &lt;code&gt;embedded_hal&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;My general impression here is that the &lt;code&gt;stm32-rs&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;rp-hal&lt;&#x2F;code&gt; HALs used with RTIC
are a bit more mature, but &lt;em&gt;feel&lt;&#x2F;em&gt; more varied in approach as they’re from lots
of different projects. Embassy HALs felt more consistent between MCU families,
but maybe a little less mature in some cases(?).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resource-sharing-between-tasks&quot;&gt;Resource sharing between tasks&lt;&#x2F;h2&gt;
&lt;p&gt;There is often a requirement in non-trivial firmware to share resources or
state, or maintain global state for tasks. This might be something like whether
an LED should be on, or in the case of the USB input devices it might be a
current map of the state of buttons. Both
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rtic.rs&#x2F;2&#x2F;book&#x2F;en&#x2F;by-example&#x2F;channel.html&quot;&gt;RTIC&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.embassy.dev&#x2F;embassy-sync&#x2F;git&#x2F;default&#x2F;index.html&quot;&gt;embassy&lt;&#x2F;a&gt; allow
sync structures with things like &lt;code&gt;queues&lt;&#x2F;code&gt; and &lt;code&gt;channels&lt;&#x2F;code&gt; for passing data
between tasks in a pretty straightforward way.&lt;&#x2F;p&gt;
&lt;p&gt;RTIC and embassy do differ though on how resources are shared globally. Embassy
takes a fairly standard approach of requiring all resources to be statically
allocated. This requires a lot of &lt;code&gt;static&lt;&#x2F;code&gt; types or the use of something like
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;static_cell&#x2F;latest&#x2F;static_cell&#x2F;&quot;&gt;&lt;code&gt;StaticCell&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Its a bit of a
mouthful to write code this way in rust, but it is fairly obvious and direct. To
quote an “industry source” that I discussed this with:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;rust is exposing a constraint that’s already there [in C++ firmware], but I’m
finding it annoying to write [in rust].&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here is an example from my keyboard firmware:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; channel: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static mut&lt;&#x2F;span&gt;&lt;span&gt; KeyboardActionChannel = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CHANNEL&lt;&#x2F;span&gt;&lt;span&gt;: StaticCell&amp;lt;KeyboardActionChannel&amp;gt; = StaticCell::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CHANNEL&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;init_with&lt;&#x2F;span&gt;&lt;span&gt;(|| KeyboardActionChannel::new())
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; spawn a task and pass in the reference to our channel
&lt;&#x2F;span&gt;&lt;span&gt;unwrap!(spawner.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_dummy_key_presses&lt;&#x2F;span&gt;&lt;span&gt;(channel)));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A limitation of embassy tasks is that they cannot accept generic function
arguments, which includes non-static lifetimes. Often I found myself stumbling
over this and fighting with the compiler.&lt;&#x2F;p&gt;
&lt;p&gt;RTIC uses a more “magical” macro-based approach to
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rtic.rs&#x2F;2&#x2F;book&#x2F;en&#x2F;by-example&#x2F;resources.html&quot;&gt;resources&lt;&#x2F;a&gt;. There are
&lt;code&gt;shared&lt;&#x2F;code&gt; resources and &lt;code&gt;local&lt;&#x2F;code&gt; resources. Shared resources are available to any
task, usually accessed through a mutex, while local resources are available only
to a single task. This model works very well when it works, but I found the
macro approach often resulted in obscure hard-to-debug errors because if I made
a mistake in my resource initialisation code the error was reported somewhere
else (i.e. in the macro), and often took a bit of digging to work out. An
example of how this works (adapted from the docs linked above) is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rtic&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;(device = stm32f401, dispatchers = [EXTI1])]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;app {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;.. use blah;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shared&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Shared {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;driver&lt;&#x2F;span&gt;&lt;span&gt;: MyDeviceDriver,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Local {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local_to_foo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(_: init::Context) -&amp;gt; (Shared, Local) {
&lt;&#x2F;span&gt;&lt;span&gt;        foo::spawn().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get GPIOs here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; driver: MyDeviceDriver::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* move in a bunch of GPIOs *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        (
&lt;&#x2F;span&gt;&lt;span&gt;            Shared { driver },
&lt;&#x2F;span&gt;&lt;span&gt;            Local {
&lt;&#x2F;span&gt;&lt;span&gt;                local_to_foo: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(local = [local_to_foo], shared = [driver], priority = 1)]
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: foo::Context) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; local_to_foo = cx.local.local_to_foo;
&lt;&#x2F;span&gt;&lt;span&gt;        *local_to_foo += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        cx.shared.driver.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;driver&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;          driver.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_something&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        });      
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another challenge I found with RTIC’s approach was that the task functions must
be &lt;code&gt;async&lt;&#x2F;code&gt; but the &lt;code&gt;init&lt;&#x2F;code&gt; function which initialises global resources was
&lt;code&gt;sync&lt;&#x2F;code&gt;. Some libraries (for instance for interfacing with &lt;code&gt;nrf24&lt;&#x2F;code&gt;) only came in
an async variant, meaning it was a real struggle to get them to work properly
with RTIC.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;availability-of-community-support-and-examples&quot;&gt;Availability of community support and examples&lt;&#x2F;h2&gt;
&lt;p&gt;Rust projects usually have very thorough API documentation and detailed
examples, and both RTIC and embassy are no exception here. There are tonnes of
examples for both. As the HAL and framework are the same for embassy, the
examples are a bit more coherent and unified, and &lt;em&gt;oh my&lt;&#x2F;em&gt; there are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;embassy-rs&#x2F;embassy&#x2F;tree&#x2F;main&#x2F;examples&quot;&gt;a lot of
examples&lt;&#x2F;a&gt; for
different MCUs.&lt;&#x2F;p&gt;
&lt;p&gt;The RTIC examples are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rtic-rs&#x2F;rtic-examples&quot;&gt;a bit more
sparse&lt;&#x2F;a&gt;, and don’t seem to have any v2
specific examples yet, however the HALs usually provide examples. Again this
means that you’re a bit at the mercy of how mature the specific HAL is. For both
frameworks this is a function of their rapid development - some of the examples
get stale relatively quickly which can make finding relevant examples tricky at
times.&lt;&#x2F;p&gt;
&lt;p&gt;One thing that is missing for both frameworks is “intermediate” complexity
examples. For instance most of the embassy examples don’t actually spawn
&lt;code&gt;tasks&lt;&#x2F;code&gt;, which is a core feature of the framework. The examples seemingly go
from “how to blink an LED” to “here is a huge repository for 3d printer
firmware”, leaving little clue for the newcomer on how to sensibly structure an
application with complexity anywhere above “trivial”. In some ways this should
be left up to the developer, but I felt like RTIC perhaps provided a bit welcome
more guidance here.&lt;&#x2F;p&gt;
&lt;p&gt;Often for the embassy examples there are HAL specific features that are
required. However as the examples for a particular MCU are all in one directory,
its a bit unclear which feature relates to which example. This isn’t a big deal,
but adds a bit of friction to implementing examples into your own code. There
were also some non-obvious dependencies (for instance &lt;code&gt;portable_atomic&lt;&#x2F;code&gt; was
required for &lt;code&gt;thumbv6&lt;&#x2F;code&gt; target to use &lt;code&gt;static_cell&lt;&#x2F;code&gt;, which wasn’t immediately
obvious when moving between targets).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I love writing embedded rust code. For me, its easier to read and write than the
typical C++ code bases, while allowing a bit more power and flexibility than
something like Arduino.&lt;&#x2F;p&gt;
&lt;p&gt;There definitely some cons. I’m not 100% sure rust embedded in general is
&lt;em&gt;quite&lt;&#x2F;em&gt; ready for mission critical applications, although seems more than stable
enough for regular old firmware. The usual rust trade offs are multiplied in a
&lt;code&gt;no-std&lt;&#x2F;code&gt; environment - finnicky compiler errors, types and lifetime management,
and many of the “nicer” rust features like dynamically sized &lt;code&gt;Vec&lt;&#x2F;code&gt;s  are not
immediately available without an external crate. I’d say that usually rust
trades up front development time for less future debugging time, and I think
that is exacerbated in embedded.&lt;&#x2F;p&gt;
&lt;p&gt;There are definite pros to rust embedded though. The ecosystem is already very
strong with lots of drivers, crates, and wide MCU support from a single language
and coding environment. Once I’ve gotten past the initial hurdle of lifetimes,
device initialisation and so on, writing application logic has been an absolute
dream, and the code usually “just works”.&lt;&#x2F;p&gt;
&lt;p&gt;I would happily reach for either embassy or RTIC. I think my own preference
would probably be to reach for embassy for simple projects, and RTIC for things
that are likely to be more complex, but really I think it would be hard to go
wrong using either for rust embedded development.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adding comments with utterances</title>
        <published>2022-09-07T00:00:00+00:00</published>
        <updated>2022-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/adding-comments-with-utterances/"/>
        <id>https://willhart.io/post/adding-comments-with-utterances/</id>
        
        <content type="html" xml:base="https://willhart.io/post/adding-comments-with-utterances/">&lt;p&gt;I don’t really know if anybody looks at this blog or finds it useful. There does
seem to be a bit of traffic, and maybe people want to talk about some of the
posts, I dunno.&lt;&#x2F;p&gt;
&lt;p&gt;Previouly I used &lt;code&gt;disqus&lt;&#x2F;code&gt; but it feels a bit heavyweight. So I’m trialling
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;&quot;&gt;https:&#x2F;&#x2F;utteranc.es&#x2F;&lt;&#x2F;a&gt;, which uses github issues for comments. I have no idea if
anybody will write anything, but I assume the people coming here will have a
github account. Let’s see what happens I guess?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Headless bevy in a tauri app</title>
        <published>2022-06-19T00:00:00+00:00</published>
        <updated>2022-06-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/headless-bevy-in-a-tauri-app/"/>
        <id>https://willhart.io/post/headless-bevy-in-a-tauri-app/</id>
        
        <content type="html" xml:base="https://willhart.io/post/headless-bevy-in-a-tauri-app/">&lt;p&gt;I want to say right from that start that I’m pretty sure what I’m about to do is
a terrible idea. But given &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&quot;&gt;tauri&lt;&#x2F;a&gt; just reached 1.0 and
it’s been a while since I’ve done anything in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;&quot;&gt;bevy&lt;&#x2F;a&gt;,
the idea occurred to me that there just &lt;em&gt;must&lt;&#x2F;em&gt; be some way to combine these two
lovely rust thingies.&lt;&#x2F;p&gt;
&lt;p&gt;So here it is, my misguided, inappropriate and entirely pointless attempt at
using bevy as a backend for a tauri app, despite the fact that bevy already
works perfectly well in web assembly or using its own cross-platform windowing
solution. Sue me.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don’t already know, tauri is a very lightweight and rusty alternative
to electron, and bevy is a data-driven ECS rust game engine that I’m very much
a fan of. I’ll skip the intros - if you want to know more follow the links
above.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;creating-a-tauri-app&quot;&gt;Creating a tauri app&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The code for this article is available &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-plus-bevy&quot;&gt;on
github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve already blogged about building a simple tauri app,  &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1 can be found
here&lt;&#x2F;a&gt;, but since then
things have improved even further and we can get up and running with basically
one command. After making sure my environment is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.app&#x2F;v1&#x2F;guides&#x2F;getting-started&#x2F;prerequisites&quot;&gt;setup for
tauri&lt;&#x2F;a&gt;, we can run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; create tauri-app
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After following the prompts, and selecting the following options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;create-vite&lt;&#x2F;code&gt; app,&lt;&#x2F;li&gt;
&lt;li&gt;Select &lt;code&gt;Y&lt;&#x2F;code&gt; to adding &lt;code&gt;@tauri-apps&#x2F;api&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Selecting &lt;code&gt;react-ts&lt;&#x2F;code&gt; as the library&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;we need to wait a bit for all the dependencies to install. Now if we run &lt;code&gt;yarn tauri dev&lt;&#x2F;code&gt; and wait a bit (it takes a while the first time while the tauri&#x2F;rust
code compiles), we can see a basic tauri app up and running. Easy!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;headless-bevy-in-a-tauri-app&#x2F;initial_setup.png&quot; alt=&quot;The initial app after running yarn create tauri-app. (size: 802x632px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-bevy&quot;&gt;Setting up bevy&lt;&#x2F;h2&gt;
&lt;p&gt;In this case we’re going to use the &lt;code&gt;react&lt;&#x2F;code&gt; front end to render the bevy app, so
we want to run bevy in &lt;code&gt;headless&lt;&#x2F;code&gt; mode. Bevy has great examples, and we’re going
to borrow heavily from the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;latest&#x2F;examples&#x2F;app&#x2F;headless.rs&quot;&gt;headless
example&lt;&#x2F;a&gt;
in the bevy repo.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly we add the bevy dependency to the tauri project, skipping default
features to remove windowing and rendering. In &lt;code&gt;src-tauri&#x2F;cargo.toml&lt;&#x2F;code&gt; add a few
dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;bevy = { version = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, default-features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;crossbeam-channel = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in &lt;code&gt;src-tarui&#x2F;main.rs&lt;&#x2F;code&gt; we want to initialise the bevy app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; required imports:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;bevy::{app::ScheduleRunnerSettings, prelude::*, utils::Duration};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; at the start of fn main():
&lt;&#x2F;span&gt;&lt;span&gt;App::new()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(ScheduleRunnerSettings::run_loop(Duration::from_secs_f64(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    )))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span&gt;(MinimalPlugins)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I find that the &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; line has an error about missing
&lt;code&gt;distDir&lt;&#x2F;code&gt; which goes away if I build the front end app using &lt;code&gt;yarn build&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You’ll note that we’ve made a few changes from the example - we’ve set it to run
at 15fps, and removed the “counter” system from the example (we’ll get back to
it though).&lt;&#x2F;p&gt;
&lt;p&gt;Now if we run &lt;code&gt;yarn tauri dev&lt;&#x2F;code&gt; there is a problem - nothing happens! This is
because the bevy &lt;code&gt;run()&lt;&#x2F;code&gt; function is “blocking”, and never exits, but as we dont
have a windowing or rendering library nothing is changed. Remove the &lt;code&gt;run()&lt;&#x2F;code&gt;
call at the end of the bevy App::new() line, tauri automatically recompiles the
app and the window appears which confirms this is the case. Ok, so we need a bit
more thinking here, we need to run the bevy app in the background in a
non-blocking way - enter threads!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-separate-threads-for-bevy-and-tauri&quot;&gt;Using separate threads for bevy and tauri&lt;&#x2F;h2&gt;
&lt;p&gt;Looks like we need to spawn the bevy app on a separate thread. There is a pretty
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;discussions&#x2F;1150&quot;&gt;good example of that here&lt;&#x2F;a&gt;
and in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;latest&#x2F;examples&#x2F;async_tasks&#x2F;external_source_external_thread.rs&quot;&gt;this official
examples&lt;&#x2F;a&gt;,
so lets adapt those.&lt;&#x2F;p&gt;
&lt;p&gt;We start by using &lt;code&gt;std::thread&lt;&#x2F;code&gt; and &lt;code&gt;spawning&lt;&#x2F;code&gt; a new thread for the bevy app. We
can also add the &lt;code&gt;run()&lt;&#x2F;code&gt; call back in. The bevy part of the code at the start of
&lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add: use std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;    App::new()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(ScheduleRunnerSettings::run_loop(Duration::from_secs_f64(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span&gt;(MinimalPlugins)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Things load, but now its not particularly useful - the app is running in a
separate thread but we don’t have any way to communicate between the bevy and
tauri apps. Rust has a whole lot of channels that can help with this. Here we
want to be able to send from lots of producers on the bevy side, but only one
receiver - the tauri app, so a “multi producer single consumer” or &lt;code&gt;mpsc&lt;&#x2F;code&gt; queue
seems like the right idea.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; we first create the channel, setting the type just as a
number for now. We use crossbeam because as the &lt;code&gt;Receiver&lt;&#x2F;code&gt; is &lt;code&gt;Sync&lt;&#x2F;code&gt; we can more
easily pass it to tauri:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add: use crossbeam_channel::{bounded, Receiver, Sender};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) = bounded::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; the use of bounded here sets a fixed size to the number of messages
that can be queued up in the channel. This means if we don’t receive the
messages in the tauri app then eventually the channel will fill up. This
causes any senders to block until there is space on the channel to send their
message - this could potentially lock up the bevy app.&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, we could use an &lt;code&gt;unbounded&lt;&#x2F;code&gt; channel, which has no capacity.
Whilst we arne’t likely to allocate enough &lt;code&gt;u32&lt;&#x2F;code&gt;s to fill up my memory in a
hurry, I’ll leave this is a bounded channel.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This line gives us a sender &#x2F; transmitter (&lt;code&gt;tx&lt;&#x2F;code&gt;) and a receiver (&lt;code&gt;rx&lt;&#x2F;code&gt;). We can
clone the sender as often as we want and its thread-safe, but we can only have
one receiver, which we will pass to the tauri app. Start by creating a new
struct to hold the &lt;code&gt;Sender&lt;&#x2F;code&gt; in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TauriBridge(Sender&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BevyBridge(Receiver&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the app build section in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;, before &lt;code&gt;run()&lt;&#x2F;code&gt; to add the
&lt;code&gt;TauriBridge&lt;&#x2F;code&gt; into the bevy app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;App::new()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(TauriBridge(tx))
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lets create a basic bevy system that increments a &lt;code&gt;u32&lt;&#x2F;code&gt; counter every frame and
sends a message via the channel with the new counter value. First we’ll create a
resource to hold the current value in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;CounterValue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We derive &lt;code&gt;Default&lt;&#x2F;code&gt; so its easier to use this as &lt;code&gt;Local&lt;&#x2F;code&gt; state for the system
that increments the counter. The system is quite straightforward and can be
mostly derived from the “headless” bevy example. We are using a global resource
rather than the &lt;code&gt;Local&lt;&#x2F;code&gt; resource in the example so we can access it from other
systems.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;CounterValue&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= (state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should also create a system that sends the counter to the mpsc channel on
each frame.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri_bridge&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;TauriBridge&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;: Res&amp;lt;CounterValue&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    tauri_bridge
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to send on channel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then need to add the &lt;code&gt;CounterValue&lt;&#x2F;code&gt; resource to the bevy app, plus the two
systems. That looks like this in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(CounterValue::default())
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span&gt;(increment_counter)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span&gt;(send_counter)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pulling-data-from-bevy-via-the-front-end&quot;&gt;Pulling data from bevy via the front-end&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I end up undoing most of the code in this section. I’ve kept it &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-plus-bevy&#x2F;tree&#x2F;feature&#x2F;frontend-pull-updates&quot;&gt;on a
branch of the
repo&lt;&#x2F;a&gt;
if you are interested.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We then want to pass the receiver to the tauri app. We can do this using
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.app&#x2F;v1&#x2F;guides&#x2F;features&#x2F;command#accessing-managed-state&quot;&gt;managed
state&lt;&#x2F;a&gt; and
the &lt;code&gt;BevyBridge&lt;&#x2F;code&gt; struct we declared above. Modify &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; where we
declare the tauri app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(BevyBridge(rx))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; if we used &lt;code&gt;std::sync::mpsc&lt;&#x2F;code&gt; here instead of
&lt;code&gt;crossbeam_channel::bounded&lt;&#x2F;code&gt;, we’d have an error here. Tauri needs its managed
state to be &lt;code&gt;Send + Sync&lt;&#x2F;code&gt; and the &lt;code&gt;Receiver&lt;&#x2F;code&gt; in &lt;code&gt;std&lt;&#x2F;code&gt; is &lt;code&gt;!Sync&lt;&#x2F;code&gt;. Using a
&lt;code&gt;Mutex&lt;&#x2F;code&gt; might help here but it seems easier to use a package where this is
handled by default.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now seems like a good time to check that bevy is properly sending messages
through to tauri. We’re left with a bit of a question - should bevy and tauri
&lt;em&gt;push&lt;&#x2F;em&gt; the updates to the front end, or should the front-end pull them by
querying for the current application state? For now lets try pulling updates
when the application is ready.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;App.tsx&lt;&#x2F;code&gt; we’ll modify the app so that we &lt;code&gt;invoke&lt;&#x2F;code&gt; a tauri command (that
we haven’t yet implemented) to get updated state (i.e. the current counter
value). After we’re done, the app should look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCount&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; import { useInterval } from &amp;#39;usehooks-ts&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInterval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCount&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div className&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header className&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App-header&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;p&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello Tauri &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bevy&lt;&#x2F;span&gt;&lt;span&gt;!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;p&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;The count is&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;}&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve added the &lt;code&gt;usehooks-ts&lt;&#x2F;code&gt; package just to make things easier (&lt;code&gt;yarn add usehooks-ts&lt;&#x2F;code&gt;). Other than that, we’ve replaced the default button that
&lt;code&gt;create-vite&lt;&#x2F;code&gt; adds and added a call to &lt;code&gt;invoke&lt;&#x2F;code&gt; the &lt;code&gt;get_state&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;We need to implement this command in the tauri code. In &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; we
need to add a &lt;code&gt;get_state&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: tauri::State&amp;lt;BevyBridge&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This just reads the messages on the &lt;code&gt;bounded&lt;&#x2F;code&gt; queue and returns the last one. We
also need to add the command to the tauri app,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![get_state])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we now run the app we should see everything working as expected - the counter
updates based on the bevy state!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;headless-bevy-in-a-tauri-app&#x2F;counter_working.png&quot; alt=&quot;The app pulling counter updates from the bevy backend. (size: 802x632px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pushing-updates-from-bevy-to-tauri-to-react&quot;&gt;Pushing updates from bevy to tauri to react&lt;&#x2F;h2&gt;
&lt;p&gt;What about we try to push updates? To do this we can use use tauri’s
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.app&#x2F;v1&#x2F;guides&#x2F;features&#x2F;events&quot;&gt;events&lt;&#x2F;a&gt; to trigger an update on
the client-side. To spawn events periodically, we can use a thread that checks
the mpsc queue periodically and raises an event with the latest value.&lt;&#x2F;p&gt;
&lt;p&gt;We can do this in the &lt;code&gt;setup&lt;&#x2F;code&gt; function in the tauri app builder in
&lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; window = app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_window&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      tauri::async_runtime::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                  Some(payload) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                      window
&lt;&#x2F;span&gt;&lt;span&gt;                          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, payload)
&lt;&#x2F;span&gt;&lt;span&gt;                          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Event should be sent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;                  _ =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;              }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do once a second
&lt;&#x2F;span&gt;&lt;span&gt;              thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite a bit of code, but its similar to the command we had before - we
spawn a thread that checks the last item on the queue, and if there is something
it emits a &lt;code&gt;send_state&lt;&#x2F;code&gt; event on the main window. We can also remove the command
definition and the &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; part of the tauri app builder.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;App.tsx&lt;&#x2F;code&gt; we need to update the function so that we no longer &lt;code&gt;invoke&lt;&#x2F;code&gt;
the command, but instead should subscribe to the &lt;code&gt;send_state&lt;&#x2F;code&gt; event sent by the
thread we just spawned. Again this is a bit of code but otherwise
straightforward - most of the code is to safely unsubcribe from events event
after the app is unmounted:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlisten&lt;&#x2F;span&gt;&lt;span&gt;: UnlistenFn | undefined = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCount&lt;&#x2F;span&gt;&lt;span&gt;(event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payload &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number);
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlisten &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlisten&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;unlisten&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  }, []);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the app now should perform the same as before, the counter … counts!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sending-commands-back-to-bevy&quot;&gt;Sending commands back to bevy&lt;&#x2F;h2&gt;
&lt;p&gt;This is all well and good, but if we want to make something interactive then
ideally we’d be able to send input back to the app. To see how this might work
we can create a “reset” command which zeroes out the counter. Unfortunately our
current channel is setup for sending the counter from bevy to tauri, so here
we’re going to need to send data the other way.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s take the opportunity to refactor our channels and the &lt;code&gt;TauriBridge&lt;&#x2F;code&gt;
struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the struct adds a Receiver&amp;lt;()&amp;gt; field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TauriBridge(Sender&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Receiver&amp;lt;()&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now we instantiate two channels, and name them appropriately.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we can also set the `u32` typed channel as unbounded and the other
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; channel as bounded with size 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx_to_tauri, rx_from_bevy) = unbounded::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx_to_bevy, rx_from_tauri) = bounded::&amp;lt;()&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in our bevy app building code we need to update the struct declaration too
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(TauriBridge(tx_to_tauri, rx_from_tauri))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we need to add the &lt;code&gt;tx_to_bevy&lt;&#x2F;code&gt; end of the channel as part of &lt;code&gt;State&lt;&#x2F;code&gt; in
the tauri app. We already did this when we tried pulling updates in the client
side, so there isn’t anything new here. We create a struct and call &lt;code&gt;manage&lt;&#x2F;code&gt; on
the tauri app builder.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct declaration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BevyBridge(Sender&amp;lt;()&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add as state in the tauri app builder
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(BevyBridge(tx_to_bevy))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can create a command that sends an empty message to bevy to reset the
counter. We will use &lt;code&gt;send&lt;&#x2F;code&gt; rather than &lt;code&gt;try_send&lt;&#x2F;code&gt; because I don’t really care
about blocking if the queue is full:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reset_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: tauri::State&amp;lt;BevyBridge&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    state
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to send reset message to bevy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should also add this command in an &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; on the tauri app builder
as we did previously.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![reset_counter])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have two more tasks - we need to add a bevy system to listen for the
messages, and add some UI in the front end to call the command.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll start with the front end. In &lt;code&gt;src&#x2F;App.tsx&lt;&#x2F;code&gt;, below the counter add a button
and the handler calls &lt;code&gt;invoke&lt;&#x2F;code&gt; to run the command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;={() =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reset_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  }}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reset
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Clicking this button once works, but maybe avoid clicking it a second time for
now because it freezes the entire app. This is a results of us using a bounded
queue with size 1, and &lt;code&gt;send&lt;&#x2F;code&gt; instead of &lt;code&gt;try_send&lt;&#x2F;code&gt; (&lt;em&gt;shrugs in
blog-post-that-is-getting-too-long-already&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Ok, before we freeze up the app again, lets add the bevy system that handles
these requests. Actually, I’m getting super lazy, lets just add it to the
&lt;code&gt;send_counter&lt;&#x2F;code&gt; system, please don’t hate me. To do this we need to change the
function signature in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri_bridge&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;TauriBridge&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;CounterValue&amp;gt;) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then just need to check the receiver queue for any reset messages. At the
bottom of the &lt;code&gt;send_counter&lt;&#x2F;code&gt; function, add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tauri_bridge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_recv&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(_) =&amp;gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    _ =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now hitting the “reset” button in the app causes the counter to go back to 0. I
guess in reality somebody could tap at like 500 clicks per second and fill up
the queue, resulting in some slightly weird jerkiness in the counter. We can
mitigate most of this by just adding a few extra items to the queue capacity:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; used  to be 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx_to_bevy, rx_from_tauri) = bounded::&amp;lt;()&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I’m not sure why I did this, really. It seemed like an intersting idea and it
kind of “worked” but wow this involves a lot of code. I’m sure there would be a
better way to do this if I stopped and thought, who knows, maybe then I’d also
be able to think of some reasons why this would be a good idea!&lt;&#x2F;p&gt;
&lt;p&gt;The code for this is available &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-plus-bevy&quot;&gt;on github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>3D printed flexure foot pedal</title>
        <published>2022-02-13T00:00:00+00:00</published>
        <updated>2022-02-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/3d-printed-flexure-foot-pedal/"/>
        <id>https://willhart.io/post/3d-printed-flexure-foot-pedal/</id>
        
        <content type="html" xml:base="https://willhart.io/post/3d-printed-flexure-foot-pedal/">&lt;p&gt;Following on from my &lt;a href=&quot;&#x2F;post&#x2F;custom-gaming-foot-pedals&quot;&gt;previous post&lt;&#x2F;a&gt;
on some custom foot pedals I designed, I decided to try simplifying the design
using 3D printed mechanical flexures in the place of the three part design with
springs. This provided to be surprisingly easy to do, although I did play around
a lot with different types of flexures to find a design I was happy with, mostly
inspired by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2021&#x2F;06&#x2F;22&#x2F;print-your-own-flexures&#x2F;&quot;&gt;several&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2021&#x2F;12&#x2F;14&#x2F;fabulous-flexure-mechanism-makes-for-resetting-cat-calendar&#x2F;&quot;&gt;posts&lt;&#x2F;a&gt;
on hackaday and one timely youtube video about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5MxH1sfJLBQ&quot;&gt;mirror actuators on the James
Webb telescope&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also had to experiment with what the printer could handle, and what sort of
thickenss and joints were required to make sure the plastic didn’t snap when
actuated. Giving the flexures to my kids to play with was a great way to stress
test them! I wanted about 10mm of movement and so designing the flexure in a way
that it stayed out of its own way was part of the challenge. The designs I tried
are below, each is about 40mm x 30mm, and some of them are missing a few pieces.
(As a side effect these proved to be great little fidget pieces for long zoom
meetings.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;3d-printed-flexure-foot-pedal&#x2F;flexures.png&quot; alt=&quot;Different flexure designs I trialled before settling on a modified version of the right most design.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The left most designs were just test runs to work out the width of cuts and
beams that my printer and the PLA material could support. The two designs below
“A” were good at deflecting but tended to permanently deform. The designs under
“B” had similar issues. In the end I want with a variation on the “C” design,
this easily deflected 10mm at the end of the beam and reliably returned to its
original shape.&lt;&#x2F;p&gt;
&lt;p&gt;The next step was to translate the flexure into a workable design. In this case
it was also relatively straightforward. From design “C” in the image above, the
outer rectangular frame would be the main body of the pedal, while the pedal
button itself would be attached where the red dot is on the image.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;3d-printed-flexure-foot-pedal&#x2F;back_view.jpg&quot; alt=&quot;The final printed pedal, with a tactile button hot glued in place.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To act as a button, I just hot glued a tactile switch with a nice red switch cap
on it to the frame of the pedal. An interesting feature about this design is
that the pedal moves very easily when I place my foot on it, but it requires
quite a positive force to depress the switch. The switch itself has a nice
tactile click when it is pressed. A side-effect of this design is that its very
digital, i.e. in its current form it probably couldn’t be used to provide an
analog signal, while the previous spring-driven design would be much more suited
to that use case. It also requires quite a lot of support material when
printing, which seems a bit wasteful and probably increases the risk of damage
to the pedal while removing it.&lt;&#x2F;p&gt;
&lt;p&gt;It seems pretty durable in “normal” operation, but I’m not sure how it would go
if loaded up with excessive force. Overall I think the feel of the pedal is
nicer and a lot simpler, but I’m not sure if this is the design I’ll “mass
produce” for my mates. I do like this clicky tactile switch more than the limit
switches I used on my previous design so I might end up somewhere in the middle
for the final “rev 3” design.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Custom gaming foot pedals</title>
        <published>2022-02-08T00:00:00+00:00</published>
        <updated>2022-02-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/custom-gaming-foot-pedals/"/>
        <id>https://willhart.io/post/custom-gaming-foot-pedals/</id>
        
        <content type="html" xml:base="https://willhart.io/post/custom-gaming-foot-pedals/">&lt;p&gt;While playing a certain online shooter with some friends, one of our party noted
that having some foot pedals to lean would make it easier than using the default
Q and E keys. We found a bunch of commercial ones online, with prices from about
$50 to $350 after shipping (electronics and shipping to Australia tend to be
pretty expensive). One of my side projects at the moment is to build my own
mechanical keyboard from scratch, and thinking about it I was almost certain I
had everything I needed on hand to make a set of my own custom pedals.&lt;&#x2F;p&gt;
&lt;p&gt;The idea was simple - grab a couple of limit switches I had for upgrading my
budget CNC, wire them up with a microcontroller with USB HID capability and make
a little custom keyboard that could only press Q or E. The only thing I needed
to buy were springs, as I didn’t have any suitable ones in my random stash of
salvaged mechanical pieces. These were about $3 from the local big box hardware
store.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;custom-gaming-foot-pedals&#x2F;pedals_disassembled.jpg&quot; alt=&quot;The foot pedals during assembly&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The design was otherwise fairly simple. The main structure was a box with an
angled top, and a hole for the foot button to poke through. A skirt on the
button prevents it from popping out the top, and two springs keep the pedal up
off the switch and provide some resistance. The limit switch is hot glued down
onto a raised base which limits the travel of the foot pedal, and M3 bolts in
heat set threaded inserts were used to fix the two halves together and lock the
“button” in place.&lt;&#x2F;p&gt;
&lt;p&gt;The electronics are equally simple, I had a stash of “blue pill” STM32F103C8
chips, which can be programmed through the Arduino environment. Its a bit of a
hassle because programming requires an external FTDI adapter and manually moving
jumpers around, but once I got the process sorted out it was easy enough. By
putting the GPIO pins into &lt;code&gt;INPUT_PULLUP&lt;&#x2F;code&gt; mode, I could also avoid any external
components and just wire the limit switches between the GPIO pins and ground.&lt;&#x2F;p&gt;
&lt;p&gt;Using the inbuilt &lt;code&gt;USBComposite&lt;&#x2F;code&gt; library for STM32 chips, the firmware was also
pretty trivial. I’ve included the gist below. (I’m fairly certain as well that
later on I could provide a two way USB Serial interface to rebind the keys).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;The results were pretty satisfactory, and I can now lean left and right with my
feet while keeping my hands on the WASD keys - its truly a fantastic age to be a
nerd with a tiny home workshop! My friends have both placed orders but I’m not
sure I want to ship them rev 1. I can think of a number of mechanical
improvements I could make, and its hard to resist making custom electronics.&lt;&#x2F;p&gt;
&lt;p&gt;I’d be curious to try other switches, for instance I’ve got some spare MX Browns
from a mechanical keyboard I’m building that might be interesting to test. I
could even make my own &lt;a
href=&quot;https:&#x2F;&#x2F;hackaday.com&#x2F;2022&#x2F;01&#x2F;17&#x2F;3d-printed-magnetic-switches-promise-truly-custom-keyboards&#x2F;&quot;
target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;magnetic mechanical switches&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;I’m also looking into removing the springs and replacing them with mechanical
flexures (assuming they last long enough to be useful). This would also allow
combining the button and lid into one part which would make manufacturing and
assembly easier.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, it was a fairly trivial and fun project - but very satisfying to
play with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;firmware&quot;&gt;Firmware&lt;&#x2F;h2&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;45090e7d43fe5d6656ce9fc78dbceb27.js&quot;&gt;&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Optimising time to interactive, or rewriting my blog... again</title>
        <published>2022-01-22T00:00:00+00:00</published>
        <updated>2022-01-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/rewriting-the-blog-again/"/>
        <id>https://willhart.io/post/rewriting-the-blog-again/</id>
        
        <content type="html" xml:base="https://willhart.io/post/rewriting-the-blog-again/">&lt;p&gt;I seem to have a habit of rewriting this blog every time I get bored, but this time I swear I didn’t do it on purpose! On the plus side, rewriting the blog is a good way to try out new things and different deployment strategies. On the negative side, it often takes over a weekend and I don’t get much else done!&lt;&#x2F;p&gt;
&lt;p&gt;Over time I’ve evolved from &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-simple-static-site-generator-in-python&#x2F;&quot;&gt;a custom static site generator&lt;&#x2F;a&gt;, to a &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;switched-to-ghost&#x2F;&quot;&gt;self-hosted ghost instance&lt;&#x2F;a&gt;, then most recently to &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;recreating-the-blog-in-nextjs&#x2F;&quot;&gt;next.js&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-started-with-lighthouse&quot;&gt;It started with lighthouse&lt;&#x2F;h2&gt;
&lt;p&gt;I posted about my &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;&quot;&gt;CMOS analog clock&lt;&#x2F;a&gt; the other day and on a whim I ran a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;tools&#x2F;lighthouse&quot;&gt;lighthouse&lt;&#x2F;a&gt; report on the site. I was surprised to see this in “mobile” mode:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;rewriting-the-blog-again&#x2F;nextjs_lighthouse.png&quot; alt=&quot;The Lighthouse report for the NextJS blog in “mobile” mode&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The “time to interactive” in particular was a bit of a surprise. On desktop its about 1s, but here its approximately a thousand years. One of the strengths of NextJS is how easy it makes it to do server side rendering (SSR) and server side generation (SSG). I’d spent quite a lot of time messing about with SSG and built it into a custom markdown to SSG pipeline in NextJS. Lighthouse seemed to suggest that bundle size was the big issue. I ran the profiler quickly and I’m definitely not an expert, but with simulating a “Fast 3G” connection and “4x CPU slowdown” the best I could tell was it spent about 3 seconds loading the bundle and another 2 seconds rendering.&lt;&#x2F;p&gt;
&lt;p&gt;I tried a few different things to reduce bundle size, including &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&#x2F;commit&#x2F;af7a0097881aaa3feea5d103c6a547088d28a61c&quot;&gt;replacing some CSS&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&#x2F;commit&#x2F;f302453b4030be5227201a8d7d6c2a521c57d4ab&quot;&gt;dynamically loading components&lt;&#x2F;a&gt; but nothing really made a dent. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&#x2F;commit&#x2F;3097e3fe11f8dc1d5aee51e714daeea8946b2151&quot;&gt;Using Next’s image optimisation&lt;&#x2F;a&gt; was more successful and seemed to make a huge difference to the bandwidth for more image heavy posts, but time to interactive was still fairly low.&lt;&#x2F;p&gt;
&lt;p&gt;These seemed to make a bit of difference in some respects, in particular I think Next’s image optimisation was making a huge difference. Overall time to interactive was still about 4-5 seconds probably due to a decent sized JS bundle and the time spent spinning up the javascript.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;rewriting-the-blog-again&#x2F;nextjs_lighthouse_after_optimisation.png&quot; alt=&quot;The Lighthouse report in “mobile” mode after trying a few different tweaks to bundle size&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;looking-at-zola&quot;&gt;Looking at Zola&lt;&#x2F;h2&gt;
&lt;p&gt;I decided to run a quick proof-of-concept to compare to a pure static site generator. I chose &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;getzola.com&quot;&gt;zola&lt;&#x2F;a&gt;, which is a rust-based static site generator that is quite straighforward to use. Like most rust things, speed seems to be a big consideration and builds are definitely very speedy (this site takes about 300-500ms to build from scratch).&lt;&#x2F;p&gt;
&lt;p&gt;To get started without setting up an entire pipeline, I copied the minified CSS from the NextJS production site and quickly converted a few markdown articles to the Zola format (mostly just changing the front matter to &lt;code&gt;TOML&lt;&#x2F;code&gt;). The lighthouse report for Zola was green across the board.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;rewriting-the-blog-again&#x2F;zola_lighthouse.png&quot; alt=&quot;The first lighthouse report for&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Zola page definitely renders a lot faster, which is a combination of smaller bundle size and not having to spin up the NextJS javascript on the client side. However looking at total downloads things get a bit more interesting. The table below shows the total download size (in MB) for two posts, one very image heavy and one text&#x2F;code heavy.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;NextJS Unoptimised&lt;&#x2F;th&gt;&lt;th&gt;NextJS Optimised&lt;&#x2F;th&gt;&lt;th&gt;Zola&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CMOS Clock&lt;&#x2F;td&gt;&lt;td&gt;4.6 MB&lt;&#x2F;td&gt;&lt;td&gt;2.1 MB&lt;&#x2F;td&gt;&lt;td&gt;4.1 MB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;NextJS rewrite&lt;&#x2F;td&gt;&lt;td&gt;1 MB&lt;&#x2F;td&gt;&lt;td&gt;1 MB&lt;&#x2F;td&gt;&lt;td&gt;0.006 MB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Zola absolutely smashes NextJS on text heavy pages, but gets beaten on image-heavy pages thanks to Next’s image optimisation. Zola does have some support for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;image-processing&#x2F;&quot;&gt;optimising images&lt;&#x2F;a&gt; which might be useful in closing the gap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;did-it-make-a-difference&quot;&gt;Did it make a difference?&lt;&#x2F;h2&gt;
&lt;p&gt;Overall I think the Zola website will load and become interactive much faster, but without some serious image optimisation it might not have much benefit for more image-heavy posts. NextJS is a fantastic framework, but in this case where I don’t really need interactivity and I just want to serve HTML blog pages, then I’ll be migrating to Zola.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CMOS analog clock</title>
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/cmos-analog-clock/"/>
        <id>https://willhart.io/post/cmos-analog-clock/</id>
        
        <content type="html" xml:base="https://willhart.io/post/cmos-analog-clock/">&lt;blockquote&gt;
&lt;p&gt;The purpose of this project was to build a large 30cm by 20cm clock using CMOS electronics driven from a 32kHz crystal. The project was a housewarming gift that arrived about four years too late and several IOUs later.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I took inspiration from a number of sources for the analog circuitry, but unfortunately most of those links are lost in the mists of time. The basic principle is to take a 32kHz signal and divide it down to the correct signals using analog ICs, mostly a combination of 74HC4040s and 74HC161s mixed with a series of logic gates (the schematics are included below) and then 74HC238s on the outputs. The circuitry was complicated enough that I breadboarded it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;breadboard.png&quot; alt=&quot;The clock circuitry built on a breadboard prior to ordering the PCBs. (size: 340x411px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This would have gone a lot better if I’d had an oscilloscope or decent logic probe for debugging, but I developed a system of LEDs logic probes and used the Arduino to inject signals at arbitrary frequencies and got there in the end.&lt;&#x2F;p&gt;
&lt;p&gt;Once the clock circuitry was set, it was time to design the layout itself. I wanted something that combined the blocky, industrial vibe of the analog circuitry with softer, more natural lines of timber. Luckily my Dad is very into furniture making, and was very keen to help out by supplying a piece of French Oak he had spare and as much of his highly specialised woodworking skills as I needed. I came up with a design (supported by my design consultant a.k.a. my Wife) with separate “clock” and “main board” sections, each contrasted by rough and clean cuts of the oak.&lt;&#x2F;p&gt;
&lt;p&gt;The digits were small circuit boards mounted on brass standoffs with the cables drilled through the oak. There were twelve, to display 1 hour and 5 minute intervals using LEDs that were mounted on the back of the digit board and shone through slots. Having only a five minute tick may be a detractor for some, but this is as much a piece of wall art as it is a Swiss timepiece and it makes actually building the circuitry somewhat feasible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;digit.png&quot; alt=&quot;A close up of the clock digit, seen mounted on the oak with brass standoffs and a drilled hole for routing cables through. (size: 1386x927px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The main board contained all the clock logic, with the ICs mounted in “industrial” rows, with as much many of the traces as possible routed on the back. At the other end to the ICs was a simple eucalpyt design I drew in inkscape and cut out of the solder mask in Kicad.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;main_board.png&quot; alt=&quot;A close up of the CMOS logic ICs mounted on the rough finished oak board. (size: 790x1036px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall I’m pleased with the design of the clock, and I like the contrast between the electronics and the timber.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;clock.png&quot; alt=&quot;An overall view of the clock. (size: 1600x800px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;&#x2F;h2&gt;
&lt;p&gt;The clock took about three years longer to complete than I’d planned. Partly this was doing the work while spending basically every waking moment working on my PhD, but partly I ran into a few snags that blocked me while I came up with a solution. Overall I feel like I learned an awful lot about analog circuitry, packaging and the challenges of creating a (hopefully) visually appealing but functional PCB design.&lt;&#x2F;p&gt;
&lt;p&gt;The main issues were around routing the cables on the back and having proper connectors that would secure the cables from the back of the main board to the digits. Each digit required a ground and two signal cables, and for some reason I struggled to find appropriate “JST” connectors when I first built the boards. I then spent an awful lot of time playing around with adapter boards, weird pin header connectors and ribbon cables to get some solid connections, before I finally found some premade 3-pin JST cables and SMD headers off ebay.&lt;&#x2F;p&gt;
&lt;p&gt;I also had some issues with assembling the main PCBs. Some of the smaller logic chips were at the limit of my hand soldering ability, and I didn’t yet have a proper heat gun. The board was a bit too large for my regular home reflow methods. This meant a few reworks before I got it right. Luckily as the most expensive components were in the DIP sockets, there wasn’t much wastage in terms of ICs.&lt;&#x2F;p&gt;
&lt;p&gt;This was a very satisfying project to finish up, and not pictured is a CNC cut and laser engraved back plate to guide and constrain the cables on the back. This project was stressful at times, and holds the dubious record of being the only thing that has ever given me an instantaneous migraine!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;schematics&quot;&gt;Schematics&lt;&#x2F;h2&gt;
&lt;p&gt;Below are images of the schematics for the clock circuitry.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Right click and save as or open in a new tab for &lt;em&gt;slightly&lt;&#x2F;em&gt; higher resolution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;schematic_1.png&quot; alt=&quot;Page 1 of the CMOS clock schematics (size: 1492x1049px)&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;schematic_2.png&quot; alt=&quot;Page 2 of the CMOS clock schematics (size: 1506x1054px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 4 - Extending commands</title>
        <published>2021-08-29T00:00:00+00:00</published>
        <updated>2021-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part4/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part4/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part4/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1&lt;&#x2F;a&gt; of this
tutorial series we set up a Tauri and create-react-app app and added a basic
non-functional counter. In &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;part
2&lt;&#x2F;a&gt; we created and invoked
a command for incrementing our counter. In &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;part
3&lt;&#x2F;a&gt; we created and invoked
a command for incrementing our counter.&lt;&#x2F;p&gt;
&lt;p&gt;In this part, we will update our command and hooks to support multiple different
counters indexed by ID.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-concept&quot;&gt;Basic concept&lt;&#x2F;h2&gt;
&lt;p&gt;If you recall from &lt;a href=&quot;&#x2F;post&#x2F;20210830_tauri_create_react_app_tutorial_part3&quot;&gt;part 3 of this
series&lt;&#x2F;a&gt;, the &lt;code&gt;useSWR&lt;&#x2F;code&gt; uses
the first argument as a &lt;code&gt;key&lt;&#x2F;code&gt; to cache queries. The key can be an array, and the
key is passed to the &lt;code&gt;fetcher&lt;&#x2F;code&gt; function as arguments. We’re going to use the key
to store a &lt;code&gt;counterId&lt;&#x2F;code&gt; variable that we can use to maintain separate counters.
We’ll also need to update our commands in the rust code to support an ID.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-our-hook-to-support-counter-ids&quot;&gt;Update our hook to support counter Ids&lt;&#x2F;h2&gt;
&lt;p&gt;We need to update our &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hook in &lt;code&gt;useInvoke.tsx&lt;&#x2F;code&gt; to support this new
requirement. We can start by updating the fetcher to take an &lt;code&gt;id&lt;&#x2F;code&gt; as an
argument:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invokeFetcher &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Record&amp;lt;string, any&amp;gt;, TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: number,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: TArgs
&lt;&#x2F;span&gt;&lt;span&gt;): Promise&amp;lt;TResult&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;, { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main change here is that we are now taking an &lt;code&gt;id&lt;&#x2F;code&gt; as a second argument, and
spreading it into the args sent to the invoke command. We then need to update
our &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hook to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: number,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;: string
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; run the invoke command to get by ID
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an update function
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData&lt;&#x2F;span&gt;&lt;span&gt;: TResult) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      ), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unchanged
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now pass the &lt;code&gt;id&lt;&#x2F;code&gt; to the hook, which is used as part of the &lt;code&gt;key&lt;&#x2F;code&gt; in
&lt;code&gt;useSWR&lt;&#x2F;code&gt;. In our &lt;code&gt;update&lt;&#x2F;code&gt; function we add the &lt;code&gt;id&lt;&#x2F;code&gt; into the data payload sent to
&lt;code&gt;invoke&lt;&#x2F;code&gt;. Other than that, not a lot has changed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-our-front-end&quot;&gt;Updating our front end&lt;&#x2F;h2&gt;
&lt;p&gt;It would be nice at this point to factor out the &lt;code&gt;Counter&lt;&#x2F;code&gt; into a new component.
This lets us pass the &lt;code&gt;counterId&lt;&#x2F;code&gt; as a prop. Create a new file, &lt;code&gt;Counter.tsx&lt;&#x2F;code&gt;
and add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;useInvoke &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs &lt;&#x2F;span&gt;&lt;span&gt;= { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;= ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId &lt;&#x2F;span&gt;&lt;span&gt;}: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId&lt;&#x2F;span&gt;&lt;span&gt;: number }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button onClick&lt;&#x2F;span&gt;&lt;span&gt;={() =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs&lt;&#x2F;span&gt;&lt;span&gt;)}&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId&lt;&#x2F;span&gt;&lt;span&gt;}: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is basically copied over from our previous implementation inside &lt;code&gt;App.tsx&lt;&#x2F;code&gt;.
Speaking of which, we can now use our &lt;code&gt;Counter&lt;&#x2F;code&gt; component inside &lt;code&gt;App.tsx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;Counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter counterId&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter counterId&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter counterId&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’re using three counters here, but two of them point to &lt;code&gt;counterId == 1&lt;&#x2F;code&gt;. If
we run the app now it kind of works, the counters with &lt;code&gt;id == 1&lt;&#x2F;code&gt; increment
together and the counter with &lt;code&gt;id == 2&lt;&#x2F;code&gt; increments separately. However you can
see that the two counters are linked, i.e. they’re modifying the same underlying
counter, but only the counters with the same &lt;code&gt;id&lt;&#x2F;code&gt; visually update when the
increment action is invoked.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-the-rust-command&quot;&gt;Updating the rust command&lt;&#x2F;h2&gt;
&lt;p&gt;To fix this, we need to extend our commands in &lt;code&gt;src-tauri&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt;. Here is
the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tauri::{async_runtime::RwLock, State};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;InnerState = RwLock&amp;lt;HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;&amp;#39;_, InnerState&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Incrementing counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, id, delta);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; hashmap = state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_value = *hashmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) + delta;
&lt;&#x2F;span&gt;&lt;span&gt;  hashmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(id, next_value);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(next_value)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;&amp;#39;_, InnerState&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Getting counter value for counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, id);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hashmap = state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(*hashmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’re doing quite a bit here. First of all we’ve removed the &lt;code&gt;AtomicI32&lt;&#x2F;code&gt; and
replaced it with a &lt;code&gt;RwLock&amp;lt;HashMap&amp;lt;i32, i32&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. The main condition here is that
our &lt;code&gt;State&lt;&#x2F;code&gt; can be managed across threads. Here we’re using a read-write lock to
make sure that there can be multiple reads but only one write at a time. We also
added a bit more logging so we can see which &lt;code&gt;counterId&lt;&#x2F;code&gt; is being get or set in
the logs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that we’ve used a &lt;code&gt;RwLock&amp;lt;HashMap&amp;gt;&lt;&#x2F;code&gt; here as our state, but in reality
could use any &lt;code&gt;Send + Sync&lt;&#x2F;code&gt; type, i.e. one that supports threading. This might
be a database, or a file store or something like that in a more complex app.
In addition, the inner state type (currently &lt;code&gt;i32&lt;&#x2F;code&gt;) could be anything that
supports &lt;code&gt;serde::Serialize&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We also need to update the way our state is created in the &lt;code&gt;main()&lt;&#x2F;code&gt; function.
Change the line with &lt;code&gt;manage&lt;&#x2F;code&gt; to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; tauri::Builder
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(RwLock::new(HashMap::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;::new()))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point we can also remove a bunch of unused imports in the &lt;code&gt;main.rs&lt;&#x2F;code&gt;
file. If we run the app we can see that the counters behave as we’d expect, each
incrementing separately and the counters using the same ID updating at the same
time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-app&quot;&gt;Building the app&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we are done developing the app, lets build it and see how large the
binary is and how much memory it uses. To build the app,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; tauri build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The build can take a while as the CRA is built and the rust parts are compiled
in release mode. Once it is built we can look in &lt;code&gt;src-tauri&#x2F;target&#x2F;release&lt;&#x2F;code&gt;. In
the &lt;code&gt;bundle&lt;&#x2F;code&gt; folder there is an &lt;code&gt;msi&lt;&#x2F;code&gt; installer we can use, but there should be
a &lt;code&gt;counter-app.exe&lt;&#x2F;code&gt; directly in the &lt;code&gt;release&lt;&#x2F;code&gt; folder. Mine is about 7MB.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;tauri-create-react-app-tutorial-part4&#x2F;tauri-step2-binary.png&quot; alt=&quot;The binary size of the built Tauri app&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If I run the application I can check the memory footprint. (After first clicking
the increment buttons a bunch of times to make sure everything is working!). Its
a fairly slim application, but with basically no CPU and about 50MB of RAM its
perfectly acceptible out of the box.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;tauri-create-react-app-tutorial-part4&#x2F;tauri-step2-resources.png&quot; alt=&quot;The resource usage of the built Tauri app&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;That’s it, our counter tutorial app is complete! In this part we extended our
command here to support counters with different IDs. The code for this
tutorial can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;0f664071e266d45c153efeabf43c09d588c5c907&quot;&gt;here on
github&lt;&#x2F;a&gt;.
Part 3 of the tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;can be found
here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 3 - Commands as hooks</title>
        <published>2021-08-28T00:00:00+00:00</published>
        <updated>2021-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part3/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part3/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part3/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1&lt;&#x2F;a&gt; of this
tutorial series we set up a Tauri and create-react-app app and added a basic
non-functional counter. In &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;part
2&lt;&#x2F;a&gt; we created and invoked
a command for incrementing our counter.&lt;&#x2F;p&gt;
&lt;p&gt;In this part, we will write a generic hook for invoking and updating hook data.
In theory this hook could be reused for both web APIs or invoked commands by
changing the underlying &lt;code&gt;fetcher&lt;&#x2F;code&gt; used by &lt;code&gt;swr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-swr&quot;&gt;What is SWR&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;swr.vercel.app&#x2F;&quot;&gt;SWR&lt;&#x2F;a&gt; stands for “stale while revalidate”, which is a
lightweight HTTP approach to managing requests to an API, caching data to
improve load times and fetching updates in the background. The benefits of the
react hook from the &lt;code&gt;swr&lt;&#x2F;code&gt; package are that it allows us to define queries by a
key, and then easily re-fetch data when we make changes. It also supports
optimistic UI, so in many ways is a simplified &lt;code&gt;@apollo&#x2F;client&lt;&#x2F;code&gt; without
requiring a GraphQL endpoint (although it supports GraphQL).&lt;&#x2F;p&gt;
&lt;p&gt;To install SWR, &lt;strong&gt;first make sure that the Tauri app isn’t running&lt;&#x2F;strong&gt;. Then we
can run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add swr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the SWR library looks something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;code&gt;my&#x2F;api&lt;&#x2F;code&gt; bit is a key that is use to refer to the specific query, while
&lt;code&gt;fetcher&lt;&#x2F;code&gt; is some sort of wrapper over a function that calls the API to fetch
the data. In the case of a web request, it might look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetcher &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: string) -&amp;gt; Promise&amp;lt;any&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;myapi.com&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arguments can be provided to the fetcher by passing an array to the &lt;code&gt;useSWR&lt;&#x2F;code&gt;
hook:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This argument will be passed to the &lt;code&gt;fetcher&lt;&#x2F;code&gt;, and forms part of the &lt;code&gt;key&lt;&#x2F;code&gt; that
uniquely identifies the query within the &lt;code&gt;swr&lt;&#x2F;code&gt; cache. We shouldn’t dynamically
create an object here (i.e. &lt;code&gt;useSWR([&#x27;my&#x2F;api&#x27;, { myId }])&lt;&#x2F;code&gt;) as this can prevent
caching.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-a-fetcher-that-invokes-commands&quot;&gt;Writing a fetcher that invokes commands&lt;&#x2F;h2&gt;
&lt;p&gt;This bit is fairly straightforward. Instead of the key being the URL, here we
can just assume the key is the name of the command we want to run. While we’re
at it, lets make the &lt;code&gt;invokeFetcher&lt;&#x2F;code&gt; generic so we can have a typed response.
Create a new file, &lt;code&gt;useInvoke.ts&lt;&#x2F;code&gt; and add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invokeFetcher &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Record&amp;lt;string, any&amp;gt;, TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: TArgs
&lt;&#x2F;span&gt;&lt;span&gt;): Promise&amp;lt;TResult&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;invokeFetcher&lt;&#x2F;code&gt; has two type parameters, the first &lt;code&gt;TArgs&lt;&#x2F;code&gt; defines the
arguments that are passed to the fetcher, here they must extend &lt;code&gt;Record&amp;lt;string, any&amp;gt;&lt;&#x2F;code&gt;. We also have a &lt;code&gt;TResult&lt;&#x2F;code&gt; type which determines what the invoked command
should return. We don’t attempt any error handling here, this is handled by
&lt;code&gt;swr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-the-fetcher-in-an-swr-hook&quot;&gt;Using the fetcher in an swr hook&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can invoke a command via SWR. In our &lt;code&gt;App.tsx&lt;&#x2F;code&gt; from &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part2&quot;&gt;part
2&lt;&#x2F;a&gt; replace the &lt;code&gt;useEffect&lt;&#x2F;code&gt;
with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useRef&lt;&#x2F;span&gt;&lt;span&gt;({ delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.current], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number)
&lt;&#x2F;span&gt;&lt;span&gt;}, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does two things - firstly we create a &lt;code&gt;ref&lt;&#x2F;code&gt; to hold our arguments to aid
with caching. Then we call &lt;code&gt;useSWR&lt;&#x2F;code&gt; with the name of the command and our
arguments. Finally we just hook up an effect that updates our counter state
whenever the data updates (we’ll remove this in a later step). We can also leave
the &lt;code&gt;invoke&lt;&#x2F;code&gt; command in the &lt;code&gt;useCallback&lt;&#x2F;code&gt; untouched for now.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the arguments for &lt;code&gt;useSWR&lt;&#x2F;code&gt; are in an object where the name of the fields corresponds to the arguments in the rust command function.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;refactor-our-commands-into-get-set-commands&quot;&gt;Refactor our commands into get&#x2F;set commands&lt;&#x2F;h2&gt;
&lt;p&gt;This works pretty well, but we’re kind of mixing our metaphors with the commands
when we get the inital value. For instance we’re passing a &lt;code&gt;delta&lt;&#x2F;code&gt; of &lt;code&gt;0&lt;&#x2F;code&gt; to get
the current value which seems a little bit weird. Lets refactor our command into
two commands - one to get the current value of the app state, and one to
increment the state by a &lt;code&gt;delta&lt;&#x2F;code&gt;. We can add the &lt;code&gt;get_counter&lt;&#x2F;code&gt; hook quite
easily:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;AtomicI32&amp;gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Getting counter value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::SeqCst))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we also have to make sure we register the new command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in the tauri::Builder in main.rs
&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![increment_counter, get_counter])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now replace all our hooks with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increment &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;useSWR&lt;&#x2F;code&gt; hook now calls &lt;code&gt;get_counter&lt;&#x2F;code&gt;, and then inside the &lt;code&gt;useCallback&lt;&#x2F;code&gt; we
invoke the &lt;code&gt;increment_counter&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Another key difference here is we are now using a “bound &lt;code&gt;mutate&lt;&#x2F;code&gt;” function that
is returned by the &lt;code&gt;useSWR&lt;&#x2F;code&gt; hook. This lets us tell &lt;code&gt;swr&lt;&#x2F;code&gt; it should refetch the
data (in this case, invoke the &lt;code&gt;get_counter&lt;&#x2F;code&gt; command). We also pass the &lt;code&gt;result&lt;&#x2F;code&gt;
to the &lt;code&gt;mutate&lt;&#x2F;code&gt; function so that the &lt;code&gt;counter&lt;&#x2F;code&gt; variable is updated
optimistically, as well as &lt;code&gt;false&lt;&#x2F;code&gt; as a second argument to mutate. Passing false
prevents the &lt;code&gt;get_counter&lt;&#x2F;code&gt; command from being invoked again when &lt;code&gt;mutate&lt;&#x2F;code&gt; is
called. We no longer need to store the &lt;code&gt;counter&lt;&#x2F;code&gt; in state, or update when &lt;code&gt;data&lt;&#x2F;code&gt;
updates so both these hooks have been removed.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this case our &lt;code&gt;increment_counter&lt;&#x2F;code&gt; variable returns the value, however in
some cases we may not want to do this, or perhaps we’ve updated one part of
our data which means another part should be re-fetched. In this case we can
omit the second argument to &lt;code&gt;mutate&lt;&#x2F;code&gt;. If you make this change and run the code
you should see that both “incrementing” and “getting” actions are logged.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;write-a-generic-hook&quot;&gt;Write a generic hook&lt;&#x2F;h2&gt;
&lt;p&gt;Lets refactor the invoke logic into a separate hook. At the bottom of
&lt;code&gt;useInvoke.ts&lt;&#x2F;code&gt;, add a new hook function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;TArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Record&amp;lt;string, any&amp;gt;, TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: TArgs,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;: string
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; run the invoke command
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an update function
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData&lt;&#x2F;span&gt;&lt;span&gt;: TResult) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;, { ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;}), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    fetching: !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a fairly standard react hook which is mostly just the code we had
previously in &lt;code&gt;App.tsx&lt;&#x2F;code&gt; moved over. We first call &lt;code&gt;useSWR&lt;&#x2F;code&gt; with our passed in
command, the arguments and the &lt;code&gt;invokeFetcher&lt;&#x2F;code&gt;. We then create a callback for
invoking the update command and cache it using &lt;code&gt;useCallback&lt;&#x2F;code&gt;. This assumes that
the invoke command also returns the updated data, if it doesn’t then we could
replace the body of the &lt;code&gt;useCallback&lt;&#x2F;code&gt; with something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData&lt;&#x2F;span&gt;&lt;span&gt;: TResult) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;, { ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would automatically refetch the data after the &lt;code&gt;setCommand&lt;&#x2F;code&gt; command is
invoked.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’re assuming here that the &lt;code&gt;args&lt;&#x2F;code&gt; provided to the hook is stable enough to
be used as a key for &lt;code&gt;useSWR&lt;&#x2F;code&gt;. If necessary this can be cached using
&lt;code&gt;useState&lt;&#x2F;code&gt; and compared when &lt;code&gt;args&lt;&#x2F;code&gt; changes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We then need to update our &lt;code&gt;App.tsx&lt;&#x2F;code&gt; to use this new hook. We can replace
everything except the return with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The button in the &lt;code&gt;App&lt;&#x2F;code&gt; component should be updated to use the &lt;code&gt;update&lt;&#x2F;code&gt; function
as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{update}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {counter}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the app reloads, the counter should work as before.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-second-counter&quot;&gt;Adding a second counter&lt;&#x2F;h2&gt;
&lt;p&gt;To check that the hook is sharing data, we can add a second counter that uses
the same data source as the first. Add a second &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hook into &lt;code&gt;App.tsx&lt;&#x2F;code&gt;
below the first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update2 &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then update our returned component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when the app reloads there should be two counters. Clicking either increment
button automatically updates both counters! As the &lt;code&gt;args&lt;&#x2F;code&gt; is the same for these
two &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hooks, they use the same data. In the next part of this series
we’ll take a look at how we can use separate counters.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve now built a generic hook that can invoke the command and manage the
update logic for us. The code for this tutorial can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;3dc42b87f00907e4245bd5c47d9d65a7eacc0316&quot;&gt;here on
github&lt;&#x2F;a&gt;.
Part 2 of the tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;can be found
here&lt;&#x2F;a&gt; and part 4 of the
tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210829_tauri_create_react_app_tutorial_part4&quot;&gt;can be found
here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 2 - Commands</title>
        <published>2021-08-27T00:00:00+00:00</published>
        <updated>2021-08-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part2/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part2/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part2/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1&lt;&#x2F;a&gt; of this
tutorial series we set up a Tauri and create-react-app app and added a basic
non-functional counter. We worked out how to run the app with one command and
use the built-in hot reloading to reload the app.&lt;&#x2F;p&gt;
&lt;p&gt;In this part, we will write a basic rust command and invoke it from the client
side to update our counter in the app.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-commands&quot;&gt;What are commands&lt;&#x2F;h2&gt;
&lt;p&gt;Commands are the way that Tauri supports exchanging data and actions between the
web and rust parts of the code base. Tauri provides a JavaScript API for
“invoking” commands in the rust code.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Commands are just rust functions that are registered when the Tauri app is
built.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;writing-a-command&quot;&gt;Writing a command&lt;&#x2F;h2&gt;
&lt;p&gt;Lets start by writing a simple rust command. Open up &lt;code&gt;src-tauri&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt;,
and above the &lt;code&gt;main()&lt;&#x2F;code&gt; function add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::atomic::{AtomicI32, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tauri::State;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;AtomicI32&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Incrementing counter by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, delta);
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span&gt;(delta, Ordering::SeqCst) + delta)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve imported a few things to store a thread-safe number, and we’ve created a
function that takes a &lt;code&gt;tauri::State&lt;&#x2F;code&gt; which contains an &lt;code&gt;AtomicI32&lt;&#x2F;code&gt; and a second
argument is a delta which we use to increment our counter. The function is a one
liner which uses &lt;code&gt;fetch_add&lt;&#x2F;code&gt; to update our atomic integer. We then return the
previous value (returned by &lt;code&gt;fetch_add&lt;&#x2F;code&gt; plus the delta).&lt;&#x2F;p&gt;
&lt;p&gt;We then need to update our tauri &lt;code&gt;main()&lt;&#x2F;code&gt; function to insert our state and
register the commands. Update the main function to look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(AtomicI32::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![increment_counter])
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_context!())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error while running tauri application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two new lines are the &lt;code&gt;manage&lt;&#x2F;code&gt; and &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; lines. The first line
tells Tauri to “manage” our state, in this case our atomic integer. The second
line &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; registers our handlers. If we want multiple handlers we
can do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::generate_handler![my_command, another_command, a_third_command]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you look back at your terminal now you should see some activity as the Tauri
app reloads in response to the changes. This is all we need to do to set up the
commands in the backend.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;invoking-the-command-on-the-front-end&quot;&gt;Invoking the command on the front end&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can return to the &lt;code&gt;App.tsx&lt;&#x2F;code&gt; to use (or invoke) our command. We want to
invoke the command when the app first loads to get the current value of the
counter. We can do this with a &lt;code&gt;useEffect&lt;&#x2F;code&gt; before the &lt;code&gt;return&lt;&#x2F;code&gt; in &lt;code&gt;App.tsx&lt;&#x2F;code&gt;. It
should look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;useState &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invoke &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@tauri-apps&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useState&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number))
&lt;&#x2F;span&gt;&lt;span&gt;  }, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;button&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the app reloads you should see a message in the terminal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Incrementing&lt;&#x2F;span&gt;&lt;span&gt; counter by 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The counter next to the button should also say &lt;code&gt;0&lt;&#x2F;code&gt;, which is the value we set in
the server. We can verify that this number does come from the rust code by
changing line 18 in &lt;code&gt;main.rs&lt;&#x2F;code&gt; from &lt;code&gt;.manage(AtomicI32::from(0))&lt;&#x2F;code&gt; to
&lt;code&gt;.manage(AtomicI32::from(5))&lt;&#x2F;code&gt;. When the app reloads the counter should start on
5.&lt;&#x2F;p&gt;
&lt;p&gt;We now want the counter to update when we hit the “increment” button. We can
create a callback for this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increment &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then update the button to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{increment}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After reloading click the button. The console should print:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Incrementing&lt;&#x2F;span&gt;&lt;span&gt; counter by 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the counter should increment by 1 for each click!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-errors&quot;&gt;Handling errors&lt;&#x2F;h2&gt;
&lt;p&gt;If the rust function returns an &lt;code&gt;Err(some_string)&lt;&#x2F;code&gt; then this is passed through
to the invoke function on the web side. As &lt;code&gt;invoke&lt;&#x2F;code&gt; is just a promise, this
means we could do something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(...).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;...).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We now have commands invoked from the web side executing rust code and
handling the result. The code for this tutorial can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;f373bf1dbe9a21101e1a2b1cd6b8d8969e94e0b4&quot;&gt;here on
github&lt;&#x2F;a&gt;.
Part 1 of the tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;can be found
here&lt;&#x2F;a&gt; and part 3 of the
tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;can be found
here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 1 - Setup</title>
        <published>2021-08-26T00:00:00+00:00</published>
        <updated>2021-08-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part1/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part1/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part1/">&lt;h2 id=&quot;why-tauri&quot;&gt;Why Tauri&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&quot;&gt;Tauri&lt;&#x2F;a&gt; is a new cross-platform toolset for creating GUI
applications using web technologies. Its a lighter weight alternative to
electron, with low memory usage (a few MB), small binary size (as small as
600kB) and built on newer web stacks than some alternative approaches (i.e.
WebView2 not MSHTML).&lt;&#x2F;p&gt;
&lt;p&gt;Another key advantage for me is that tauri is built in rust, so you can write
your “server-side” logic in rust, and use a simple “command” API to communicate
between the rust backend and the web front end.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the time of writing this, tauri is at version &lt;code&gt;1.0.0-beta&lt;&#x2F;code&gt;, rapidly
approaching its first “official” release. The documentation is still a little
sparse in some respects, so I’m writing this tutorial to share some of my
experiences in setting up a tauri and React app.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;sample-app&quot;&gt;Sample App&lt;&#x2F;h2&gt;
&lt;p&gt;This project is going to demonstrate a small sample App built on a tauri and
React stack. We’re going to build a traditional “counter” app, but this time the
logic will be run in the tauri backend and the front end will just display the
data.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The tutorial assumes a basic knowledge of rust and React.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This tutorial will be broken into a few parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;this part, getting set up with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;&quot;&gt;tauri&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;create-react-app.dev&#x2F;&quot;&gt;create-react-app&lt;&#x2F;a&gt; (CRA),&lt;&#x2F;li&gt;
&lt;li&gt;setting up a simple command that we can call from the front end
[&lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;link&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;wrapping the command in &lt;code&gt;useSWR&lt;&#x2F;code&gt; to make a generic “invoke” hook,
[&lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;link&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;extending our hook to support multiple counters,
[&lt;a href=&quot;&#x2F;post&#x2F;20210829_tauri_create_react_app_tutorial_part4&quot;&gt;link&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;getting-ready-for-tauri&quot;&gt;Getting ready for tauri&lt;&#x2F;h2&gt;
&lt;p&gt;To start with, we need to install the required dependencies. You’ll need &lt;code&gt;node&lt;&#x2F;code&gt;
and &lt;code&gt;yarn&lt;&#x2F;code&gt; or &lt;code&gt;npm&lt;&#x2F;code&gt; installed, as well as &lt;code&gt;rust&lt;&#x2F;code&gt;. If you aren’t set up already
then tauri provides &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;en&#x2F;docs&#x2F;getting-started&#x2F;setup-linux&quot;&gt;some pretty good platform specific
instructions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are on Windows, make sure you have
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;en&#x2F;docs&#x2F;getting-started&#x2F;setup-windows#4-install-webview2&quot;&gt;WebView2&lt;&#x2F;a&gt;
installed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-with-a-cra-base&quot;&gt;Starting with a CRA base&lt;&#x2F;h2&gt;
&lt;p&gt;We’re going to start by setting up a CRA app in the usual way.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; create react-app counter-app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --template&lt;&#x2F;span&gt;&lt;span&gt; typescript
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the packages are installed and the process finishes, open up the folder in
your IDE of choice.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; counter-app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I like to start with a clean slate, so feel free to delete everything
non-essential from the repo. In this case I deleted:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;App.css&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;App.test.tsx&lt;&#x2F;code&gt;, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;logo.svg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also replaced the contents of &lt;code&gt;App.tsx&lt;&#x2F;code&gt; with the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;button&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then start the app to make sure it runs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The simple app should open up in &lt;code&gt;https:&#x2F;&#x2F;localhost:3000&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-tauri&quot;&gt;Adding tauri&lt;&#x2F;h2&gt;
&lt;p&gt;The instructions for integrating tauri &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;en&#x2F;docs&#x2F;usage&#x2F;development&#x2F;integration&quot;&gt;can be found
here&lt;&#x2F;a&gt;. Firstly we
need to install the Tauri CLI locally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span&gt; @tauri-apps&#x2F;cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also want to install the Tauri APIs&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @tauri-apps&#x2F;api
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we initialise Tauri using&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; tauri init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just select all the default options for now. After a few mintues the process
should complete and there should be a separate &lt;code&gt;src-tauri&lt;&#x2F;code&gt; folder where your
Tauri app lives. If you open up &lt;code&gt;src-tauri&#x2F;tauri.conf.json&lt;&#x2F;code&gt; you can see all the
configuration for the Tauri app. One of the key parts for integrating the CRA
app is this bit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;distDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;devPath&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeDevCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeBuildCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how Tauri knows how to run your project in dev, and what to do to build
your project. Update the build config as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;distDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;devPath&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeDevCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yarn start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeBuildCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yarn build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will ensure that Tauri runs the &lt;code&gt;yarn start&lt;&#x2F;code&gt; command when you run it in
develop mode, and the &lt;code&gt;yarn build&lt;&#x2F;code&gt; command when you build and bundle the app.&lt;&#x2F;p&gt;
&lt;p&gt;I like to add one more shortcut to the root &lt;code&gt;package.json&lt;&#x2F;code&gt;,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yarn tauri dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now if I want to develop the app in a browser (outside of Tauri) I can run &lt;code&gt;yarn start&lt;&#x2F;code&gt;, and if I want to develop within the Tauri app I can run &lt;code&gt;yarn dev&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If everything has gone to plan at this point you should be able to start the
Tauri app in dev mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It should look something like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;tauri-create-react-app-tutorial-part1&#x2F;tauri-step1.png&quot; alt=&quot;The basic Tauri app window&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Both the web app and the Tauri app reload when changes are made. You can verify
this by editing our &lt;code&gt;App.tsx&lt;&#x2F;code&gt; from &lt;code&gt;&amp;lt;button&amp;gt;Increment&amp;lt;&#x2F;button&amp;gt; 0&lt;&#x2F;code&gt; to
&lt;code&gt;&amp;lt;button&amp;gt;Increment&amp;lt;&#x2F;button&amp;gt; 1&lt;&#x2F;code&gt;. After saving the Tauri app should automatically
update.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The code at this point can be accessed &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;283a4196665c9c014046206fc832c7efb7e31357&quot;&gt;on
github&lt;&#x2F;a&gt;.
Part 2 of the series &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;can be found
here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Recreating the blog in NextJS</title>
        <published>2020-12-28T00:00:00+00:00</published>
        <updated>2020-12-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/recreating-the-blog-in-nextjs/"/>
        <id>https://willhart.io/post/recreating-the-blog-in-nextjs/</id>
        
        <content type="html" xml:base="https://willhart.io/post/recreating-the-blog-in-nextjs/">&lt;p&gt;Well this &lt;a href=&quot;&#x2F;post&#x2F;switched-to-ghost&quot;&gt;isn’t the first post of this kind&lt;&#x2F;a&gt;,
(note from 2025 Will: I’m about three more rewrites in by now!) but once
again its that time of year when I look at the blog and decide its time to
migrate to a different blog host. The current Ghost blog has been fine but costs
$5&#x2F;month to host. Backups and updates are pretty annoying and the whole thing is
a very manual process.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also I’ve currently forgotten my admin password for Ghost :| As the server
didn’t have an email configuration, I can’t reset the password and so I can’t
post anything new even if I had the inclination!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve been using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;NextJS&lt;&#x2F;a&gt; a lot recently (for work and side
projects) and really like the file based routing and ability to choose between
static, server or client rendered pages. Furthermore automated deploy pipelines
like those supported by NextJS really make life easy. Deployment is just a matter of &lt;code&gt;git push&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Spurred by these advantages I decided to open source the blog and make a
statically generated site using NextJS. The main way this works is by keeping an
array of post URLs, then loading in markdown files based on these URLs to
display. Markdown files use YAML frontmatter to store configuration (author,
date, titles, summaries and so on).&lt;&#x2F;p&gt;
&lt;p&gt;Static generation is enabled in NextJS by specifying the URLs to generate (if
the URLs contain dynamic segments like slugs or IDs) and also specifying a
function that generates the props on the server. For the blog post pages this
looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get a list of post slugs to statically generate. Here 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * pageData contains all the URL slugs. Its hard coded which
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * isn&amp;#39;t ideal, but its not a big burden to keep the list 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * up to date. It&amp;#39;s also easy to filter once the corresponding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * posts are loaded in - for instance to only return posts with
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * a particular tag. As its statically generated, at build time,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * performance isn&amp;#39;t all that important.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getStaticPaths&lt;&#x2F;span&gt;&lt;span&gt;: GetStaticPaths = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    paths: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pageData&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({ params: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug &lt;&#x2F;span&gt;&lt;span&gt;} })),
&lt;&#x2F;span&gt;&lt;span&gt;    fallback: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * This loads the data for each post - it reads the post slug from the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * parameters and uses the postReader helper to load in the file from
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * disk. The gray-matter YAML parser extracts the front matter and 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * a react-markdown component renders the markdown to file.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Each blog post is statically generated and preloaded when it enters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * the viewport.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getStaticProps&lt;&#x2F;span&gt;&lt;span&gt;: GetStaticProps = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;postReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ props: { ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post &lt;&#x2F;span&gt;&lt;span&gt;} }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The home page, category&#x2F;tags pages and individual post pages are all statically
generated at build time. On the down side, I had to write my own blog template
and migrate all the posts by hand :(&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The repo is at
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&lt;&#x2F;a&gt;.
I don’t really think it will spur me to write more posts, but at least when I do
decide to write something it’s as easy as writing a Markdown document and
committing to git.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Thesis writing in Markdown - pandemic and pandoc</title>
        <published>2019-05-16T00:00:00+00:00</published>
        <updated>2019-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/thesis-writing-in-markdown-pandoc-and-pandemic/"/>
        <id>https://willhart.io/post/thesis-writing-in-markdown-pandoc-and-pandemic/</id>
        
        <content type="html" xml:base="https://willhart.io/post/thesis-writing-in-markdown-pandoc-and-pandemic/">&lt;p&gt;I’m in the closing stages of my PhD (I hope), and beginning to write up some
chapters. As my PhD is heavy on analysis, data and modelling, I’ve found writing
in Word or LaTeX to have a lot of shortcomings that I’d really like to overcome.
Word is simple to use but citations are a bit clunky and the typography isn’t
particularly nice. On the other hand, LaTeX looks nicer but is a lot more work
to get right. There are also some complications - for instance, what if I just
want to build one chapter at a time?&lt;&#x2F;p&gt;
&lt;p&gt;I guess I’ve been spoiled for choice in the Node &#x2F; Python &#x2F; C# worlds where you
can usually just type yarn build or yarn start and out pops a functional web
app. Is there a similar build system for academic documents? It turns out there
isn’t, at least not a good one, but it isn’t too hard to cobble together a
Frankenstein to do the job.&lt;&#x2F;p&gt;
&lt;p&gt;What features would a build system have? The first step was to work out what
sort of features a thesis build system would have. The core requirements are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Citations and a bibliography&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Variable substitution&lt;&#x2F;strong&gt;, so that analysis results can be exported to JSON
files and then the values automagically inserted in the correct location in
the text,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build up multi-part figures&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Automatic cross references&lt;&#x2F;strong&gt;, I don’t want to have to think about fixing
&lt;code&gt;Figure 6.15&lt;&#x2F;code&gt; when I insert a figure in between, and I want to be able to
reference between chapters even if they are in separate documents,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Single command build&lt;&#x2F;strong&gt;, being able to compile the document with one click
or CLI command&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There are some nice to have features as well:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Write in a plain text language&lt;&#x2F;strong&gt;, i.e. Markdown? as much as possible&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build the entire document or single chapters&lt;&#x2F;strong&gt;, so I can send a chapter to
a supervisor for review&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Various export formats&lt;&#x2F;strong&gt;, so that I can send Word, Markdown, LaTeX or PDF
formats as required&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;wait-doesn-t-this-already-exist&quot;&gt;Wait, doesn’t this already exist?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, yes in a word, &lt;code&gt;pandoc&lt;&#x2F;code&gt; does a lot of these things already. In the list
above there are only a few things that I don’t think pandoc can do out of the
box - building multi-part figures and building entire document or single
chapters (although this could probably be achieved with a batch file or
similar). However managing the different commands required for all the export
formats and options that I want to build would be a bit tricky.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lionel-rigoux&#x2F;pandemic&quot;&gt;&lt;code&gt;pandemic&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which
is a &lt;code&gt;pandoc&lt;&#x2F;code&gt; CLI for building documents from “recipes”. pandemic &lt;code&gt;recipes&lt;&#x2F;code&gt;
allow multiple export formats, and different filter combinations and so on per
recipe. It also has &lt;code&gt;prehooks&lt;&#x2F;code&gt; which let you define CLI commands that should run
before pandoc to either preprocess the document or run side effects.&lt;&#x2F;p&gt;
&lt;p&gt;Once a recipe is defined, pandemic can be used to build up a chapter by running
a single CLI command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pandemic&lt;&#x2F;span&gt;&lt;span&gt; publish manuscript.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or if a particular recipe is required:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pandemic&lt;&#x2F;span&gt;&lt;span&gt; publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; tex manuscript.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cobbling-it-together&quot;&gt;Cobbling it together&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I got a bit medieval and cobbled together what can only be
described as an abomination!&lt;&#x2F;p&gt;
&lt;p&gt;Using PowerShell scripts, pandoc and pandemic I set up a document build system
that converts the raw Markdown documents to LaTeX after running some filters,
copies the files to a build directory, merges all the chapters into a single
document and builds it several times with XeLaTeX. I used a &lt;code&gt;handlebars&lt;&#x2F;code&gt; prehook
for &lt;code&gt;pandemic&lt;&#x2F;code&gt; to swap variables in the form &lt;code&gt;{{{variable_name}}}&lt;&#x2F;code&gt; in the text
from files output by my Jupyter notebooks. I manually run commands for
&lt;code&gt;it-figures&lt;&#x2F;code&gt;, my node library for building multi-part figures on each chapter.&lt;&#x2F;p&gt;
&lt;p&gt;By running a separate command I can output a chapter in a standalone tex file. A
single chapter is built like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BuildChapter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Write-Output &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Building Chapter &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build figures using `it-figures`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\figures
&lt;&#x2F;span&gt;&lt;span&gt;  figures b panels.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build the manuscript
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; ..\
&lt;&#x2F;span&gt;&lt;span&gt;  pandemic publish manuscript.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\_public
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# add a few newlines to the markdown to force a latex break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Add-Content &lt;&#x2F;span&gt;&lt;span&gt;-Path manuscript.build -Value &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;`r`n`r`n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Move-Item &lt;&#x2F;span&gt;&lt;span&gt;-Path manuscript.build -Destination ..\..\.build\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap.md &lt;&#x2F;span&gt;&lt;span&gt;-Force
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-Item &lt;&#x2F;span&gt;&lt;span&gt;-ItemType Directory -Force -Path ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\images
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Copy-Item&lt;&#x2F;span&gt;&lt;span&gt; ..\images\* ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\images\ -Force -Recurse
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-Item &lt;&#x2F;span&gt;&lt;span&gt;-ItemType Directory -Force -Path ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\figures
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Copy-Item&lt;&#x2F;span&gt;&lt;span&gt; ..\figures\* ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\figures\ -Force -Recurse
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; ..\..\
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the document is built like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BuildDocument &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chaps&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\.build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  cat $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chaps &lt;&#x2F;span&gt;&lt;span&gt;| pandoc -s --top-level-division=chapter --template ..\template\thesis.tex -f markdown -t latex -F pandoc-crossref -M &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crossrefYaml=..\template\crossref_settings.yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; --natbib -o .\.tex\thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\.tex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  xelatex -quiet thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;  biber thesis.bcf
&lt;&#x2F;span&gt;&lt;span&gt;  xelatex -quiet thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;  xelatex thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Move-Item &lt;&#x2F;span&gt;&lt;span&gt;-Path thesis.pdf -Destination ..\..\thesis.pdf -Force
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Move-Item &lt;&#x2F;span&gt;&lt;span&gt;-Path thesis.tex -Destination ..\..\thesis.tex -Force
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; ..\..\
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m not sure if this overly complicated approach is a good one, but it lets me
write in Markdown, and automatically update figures and variables in my text if
the analysis changes, and then publish in LaTeX with only a single command. This
is quite satisfying, although if something goes wrong it will probably take
quite a while to sort out.&lt;&#x2F;p&gt;
&lt;p&gt;I’m guessing that before I start getting serious feedback from my supervisors
I’ll probably “eject” from the build system and go back to working in pure
LaTeX. At that point it will be handy to be able to run diffs on the text I get
back from my supervisors without having to convert to and from Markdown.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, at least I’m entertained?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Replacing Electron with C# WebView (Windows Only)</title>
        <published>2018-12-14T00:00:00+00:00</published>
        <updated>2018-12-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/replacing-electron-with-c-sharp-edge-webviews-on-windows/"/>
        <id>https://willhart.io/post/replacing-electron-with-c-sharp-edge-webviews-on-windows/</id>
        
        <content type="html" xml:base="https://willhart.io/post/replacing-electron-with-c-sharp-edge-webviews-on-windows/">&lt;p&gt;For my PhD I keep notes in Markdown documents of the key papers I’ve read. I
recently wrote a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;markdown-browser&#x2F;&quot;&gt;simple rust
application&lt;&#x2F;a&gt; for searching and
rendering these Markdown documents, which are often quite maths heavy. I find it
very useful when writing things up.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;replacing-electron-with-c-sharp-edge-webviews-on-windows&#x2F;markdownbrowser.png&quot; alt=&quot;The markdown browser application used to search MD notes from papers (size: 1302x632px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I originally thought about using electron, but was turned off by the large
number of files an installation includes. I don’t really have an issue with the
RAM or disk space electron requires, although its become a bit of a meme.
Warning, personal preference: I also much prefer the &lt;em&gt;look and feel&lt;&#x2F;em&gt; of web
based interfaces over most “native” interfaces.&lt;&#x2F;p&gt;
&lt;p&gt;To write the application I used the &lt;code&gt;WebView&lt;&#x2F;code&gt; package for Rust, which
unfortunately uses the IE version installed on the computer (IE11 I think).
Writing code for IE and debugging was… challenging? The great thing about Rust
was that it allowed me to build an application that is about 800kb and uses 50MB
of RAM when holding about 300 documents in memory. Having a single application
file was also very nice as it reduced the noise and let me just drop it into the
folder with my notes. On the flip side, I wrote the application in Rust which
was a good learning experience, but required (and requires!) a lot more effort
for me to maintain than something written in JS or C#.&lt;&#x2F;p&gt;
&lt;p&gt;I recently came across a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-au&#x2F;windows&#x2F;communitytoolkit&#x2F;controls&#x2F;wpf-winforms&#x2F;webview&quot;&gt;blog
post&lt;&#x2F;a&gt;
talking about how Microsoft had made Edge available as a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nuget.org&#x2F;packages&#x2F;Microsoft.Toolkit.Wpf.UI.Controls.WebView&quot;&gt;WebView in WPF &#x2F;
WinForms
apps&lt;&#x2F;a&gt;,
where previously it was only available through UWP. Here I’ll describe how I
went about creating, bundling and debugging the Markdown browser in a WPF app
built as a single &lt;code&gt;.exe&lt;&#x2F;code&gt; file, and using an Edge based WebView (which as we now
know will one day run on Chromium, and should be installed on every Win 10
machine!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;I started with a fresh WPF project, and from the package manager console ran:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Install-Package&lt;&#x2F;span&gt;&lt;span&gt; Microsoft.Toolkit.Wpf.UI.Controls.WebView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Version&lt;&#x2F;span&gt;&lt;span&gt; 5.0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in my &lt;code&gt;MainWindow.xaml&lt;&#x2F;code&gt; I added the namespace&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;XML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-XML &quot;&gt;&lt;code class=&quot;language-XML&quot; data-lang=&quot;XML&quot;&gt;&lt;span&gt;xmlns:WPF=&amp;quot;clr-namespace:Microsoft.Toolkit.Wpf.UI.Controls;assembly=Microsoft.Toolkit.Wpf.UI.Controls.WebView&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and added the control inside the default &lt;code&gt;Grid&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WPF:WebView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x:Name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebView&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;loading-a-local-file&quot;&gt;Loading a local file&lt;&#x2F;h2&gt;
&lt;p&gt;I added a simple &lt;code&gt;index.html&lt;&#x2F;code&gt; file to the project under &lt;code&gt;www&#x2F;index.html&lt;&#x2F;code&gt;. I set the build type to &lt;code&gt;EmbeddedResource&lt;&#x2F;code&gt;. I hooked up a &lt;code&gt;Window.Loaded&lt;&#x2F;code&gt; event which looked like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; e.g.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; using Microsoft.Toolkit.Win32.UI.Controls.Interop.WinRT;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; using System.Linq;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; using System.Reflection;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Window_Loaded&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;, RoutedEventArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assembly&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetExecutingAssembly&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceNames&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Single&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EndsWith&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceStream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileName&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sr &lt;&#x2F;span&gt;&lt;span&gt;= new StreamReader(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadToEnd&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WebView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ScriptNotify &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WebView_ScriptNotify&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WebView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NavigateToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This waits until the &lt;code&gt;window&lt;&#x2F;code&gt; loads, then reads “index.html” from the embedded
&lt;code&gt;index.html&lt;&#x2F;code&gt; file. It then uses the &lt;code&gt;WebView.NavigateToString&lt;&#x2F;code&gt; method to load
the string into the embedded &lt;code&gt;WebView&lt;&#x2F;code&gt; browser.&lt;&#x2F;p&gt;
&lt;p&gt;The line &lt;code&gt;WebView.ScriptNotify += WebView_ScriptNotify&lt;&#x2F;code&gt; adds an event handler so
that the WebView can call into C# code through JavaScript, i.e.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;window.external.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;the string to pass to the C# code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bundling-as-a-single-file&quot;&gt;Bundling as a single file&lt;&#x2F;h2&gt;
&lt;p&gt;The next task was to try to build a single executable file from the WPF
application. This required a bit of googling, but the best method I came across
was &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;4995039&#x2F;233608&quot;&gt;predictably on StackOverflow&lt;&#x2F;a&gt;.
Firstly I closed the solution in VisualStudio and opened the &lt;code&gt;.csproj&lt;&#x2F;code&gt; file in
VSCode. I added the following before the last closing tag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AfterResolveReferences&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ItemGroup&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmbeddedResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Include&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@(ReferenceCopyLocalPaths)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Condition&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;%(ReferenceCopyLocalPaths.Extension)&amp;#39; == &amp;#39;.dll&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogicalName&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogicalName&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmbeddedResource&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ItemGroup&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Target&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then added a new &lt;code&gt;Program.cs&lt;&#x2F;code&gt; file, and added the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Program
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STAThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AppDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CurrentDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AssemblyResolve &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnResolveAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Assembly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OnResolveAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, ResolveEventArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thisAssembly &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetExecutingAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assemName &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;AssemblyName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dllName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assemName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.dll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thisAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EndsWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dllName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;First&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thisAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; you might want to do some try-catch blocks around the &lt;code&gt;Assembly.Load&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After editing the project settings to use &lt;code&gt;Program.Main&lt;&#x2F;code&gt; as the entry point, the
whole application was bundled inside the &lt;code&gt;.exe&lt;&#x2F;code&gt; file built by VisualStudio!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debugging-edge&quot;&gt;Debugging Edge&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, for debugging the JavaScript I followed &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pspdfkit.com&#x2F;blog&#x2F;2018&#x2F;edge-devtools-uwp&#x2F;&quot;&gt;another blog
post&lt;&#x2F;a&gt; by James Swift. I
downloaded &lt;code&gt;Microsoft Edge DevTools Preview&lt;&#x2F;code&gt; from the Microsoft Store, then in
Internet Explorer I had to find &lt;code&gt;Internet Options &amp;gt; Advanced &amp;gt; Browser&lt;&#x2F;code&gt; and
uncheck two options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Disable script debugging (Internet Explorer)&lt;&#x2F;li&gt;
&lt;li&gt;Disable script debugging (Other)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; that this is through IE11, not Edge (thanks Microsoft).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After doing this I could start up the DevTools preview and run the application
in VS and use the DevTools to debug the embedded WebView.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating a REPL for hacking on a firestore backend</title>
        <published>2018-11-03T00:00:00+00:00</published>
        <updated>2018-11-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/creating-a-repl-for-hacking-on-a-firestore-backend/"/>
        <id>https://willhart.io/post/creating-a-repl-for-hacking-on-a-firestore-backend/</id>
        
        <content type="html" xml:base="https://willhart.io/post/creating-a-repl-for-hacking-on-a-firestore-backend/">&lt;p&gt;When developing firestore based apps (especially for the server) I often find it
a bit tricky to inspect “intermediate” query results, or just to play around
with data, test queries and so on. I found a few admin interfaces but they
generally appear to be for the realtime database and almost universally have no
commits for 1-2 years.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;creating-a-repl-for-hacking-on-a-firestore-backend&#x2F;firestore-repl.png&quot; alt=&quot;A custom firestore REPL running in a node console&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ideally I’d just be able to type commands into a terminal and try queries out.
It turns out using a node repl this is very easy to do. I found some
instructions for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;derickbailey.com&#x2F;2014&#x2F;07&#x2F;02&#x2F;build-your-own-app-specific-repl-for-your-nodejs-app&#x2F;&quot;&gt;building your own
REPL&lt;&#x2F;a&gt;,
and adapted them for firestore admin.&lt;&#x2F;p&gt;
&lt;p&gt;Here is what my REPL looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;repl.ts
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;repl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initFirestoreAdmin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;src&#x2F;initAdmin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; used by my functions to init admin with credentials etc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initFirestoreAdmin&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;firestore&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  prompt: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fb &amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; I can also save typing by doing things like:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_firestore_user_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or by adding functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withUser &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m coding in typescript, so I also &lt;code&gt;yarn add --dev ts-node&lt;&#x2F;code&gt; so I don’t have to
bother with compiling the ts file. I can then add a script to my &lt;code&gt;package.json&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;...,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;repl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;node_modules&#x2F;.bin&#x2F;ts-node repl.ts&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I can start the repl from the root directory with &lt;code&gt;yarn repl&lt;&#x2F;code&gt;. A prompt appears,
and I can start typing in firestore queries:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get the pages collection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fb &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get a user&amp;#39;s pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fb &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;.size))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this approach you could also pull in any of your application code (for
instance GraphQL resolvers), and have a ready built console application version
for your app.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-async-await&quot;&gt;A note on async&#x2F;await&lt;&#x2F;h2&gt;
&lt;p&gt;By default, the node &lt;code&gt;repl&lt;&#x2F;code&gt; doesn’t support &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt;. It’s available
under a feature flag in node 10+, but doesn’t appear to be available in ts-node
yet. You can provide async functionality by installing
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ownadi&#x2F;async-repl&quot;&gt;async-repl&lt;&#x2F;a&gt; and using it as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; inside repl.ts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stubber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;async-repl&#x2F;stubber&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;set up your repl as above...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;stubber&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now in your repl you can do the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fb &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;documents&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>First impressions: converting a React&#x2F;Firebase project to GraphQL</title>
        <published>2018-10-27T00:00:00+00:00</published>
        <updated>2018-10-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/first-impressions-converting-a-firebase-project-to-graphql/"/>
        <id>https://willhart.io/post/first-impressions-converting-a-firebase-project-to-graphql/</id>
        
        <content type="html" xml:base="https://willhart.io/post/first-impressions-converting-a-firebase-project-to-graphql/">&lt;p&gt;I’ve been working on a project on and off for about 2 years, which I’m using to
create basketball play diagrams. I wanted some real-time features and eventually
settled on firebase for the backend. I found
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prescottprue&#x2F;react-redux-firebase&quot;&gt;react-redux-firebase&lt;&#x2F;a&gt;, a
fantastic project for redux &#x2F; firebase bindings, and quickly built up a
prototype. I used the app throughout the entire 2017&#x2F;18 basketball season and
found it very useful for scouting reports, building up training plans and so on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;first-impressions-converting-a-firebase-project-to-graphql&#x2F;convert-firebase-to-graphql.png&quot; alt=&quot;GraphiQL, a handy tool for browsing and interacting with a GraphQL server&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then development stalled… the constraints of firebase, the weight of redux
boilerplate and the few idiosyncrasies of the firebase bindings made adding new
features a bit of a drag. The project was usable, but it had enough app-crashing
bugs that I wasn’t comfortable sharing it with other coaches.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;first-impressions-converting-a-firebase-project-to-graphql&#x2F;playbook_play.gif&quot; alt=&quot;The “play editor”, showing how basketball plays can be edited using the web interface.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-wasn-t-right-about-firestore&quot;&gt;What wasn’t right about firestore?&lt;&#x2F;h2&gt;
&lt;p&gt;Actually, not a whole lot, if I’m honest. Firebase has a very decent free tier,
is easy to get up and running, and has nice built-in support for features like
authentication. I did have a few small frustrations:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The security rules that are used for authorisation depend on a custom language which is a bit of a nightmare to develop and especially debug. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;firebase&#x2F;bolt&quot;&gt;firebase-bolt&lt;&#x2F;a&gt; is an improvement over the normal security rule language, but not very well maintained. (in the end with the firestore beta I gave up on security rules for the MVP).&lt;&#x2F;li&gt;
&lt;li&gt;Even some seemingly simple tasks like preventing new user sign ups were also
surprisingly hard to do.&lt;&#x2F;li&gt;
&lt;li&gt;I found
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;redux.js.org&#x2F;recipes&#x2F;structuringreducers&#x2F;normalizingstateshape&quot;&gt;normalisation&lt;&#x2F;a&gt;
of data structures well-suited to the redux architecture, but also a pain to
work with for multi-layered hierarchical documents as it felt like it
required a lot of additional queries.&lt;&#x2F;li&gt;
&lt;li&gt;The bindings were pre &lt;code&gt;1.0&lt;&#x2F;code&gt; so there were a few weird bugs &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prescottprue&#x2F;redux-firestore&#x2F;issues&#x2F;140&quot;&gt;like this
one&lt;&#x2F;a&gt; which gave
me headaches, and were tricky to debug.&lt;&#x2F;li&gt;
&lt;li&gt;redux boilerplate :(&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;discovering-graphql&quot;&gt;Discovering GraphQL&lt;&#x2F;h2&gt;
&lt;p&gt;Coming back to the project after a few months away, I felt like it was time for
a change. While (for now) this is just a hobby project, I wanted to open it up
to a few of my fellow coaches. As some of the issues in the project would
require me to restructure the database, and I felt like the GUI needed a
complete overhaul, I decided to look around for some other options to firebase.&lt;&#x2F;p&gt;
&lt;p&gt;I’d been hearing good things about GraphQL so kind of as a “what if…” I
decided to learn GraphQL while porting the firebase project over.&lt;&#x2F;p&gt;
&lt;p&gt;Initially I settled on a stack of &lt;code&gt;next.js&lt;&#x2F;code&gt; and &lt;code&gt;react-apollo&lt;&#x2F;code&gt; on the client
(neither of which I had used before), although after a couple of days wrestling
with SSR and file system routing of &lt;code&gt;next&lt;&#x2F;code&gt; (and getting annoyed that half their
tutorials are behind a login wall), I ditched &lt;code&gt;next&lt;&#x2F;code&gt; in favour of the old
faithful, &lt;code&gt;create-react-app&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the MVP server I chose &lt;code&gt;prisma&lt;&#x2F;code&gt; and &lt;code&gt;graphql-yoga&lt;&#x2F;code&gt;. So far I’ve migrated
about 80% of the functionality from the firestore website to the react-apollo
website, and I’m very happy with the approach. I’ve listed some of the “pros and
cons” I’ve encountered with GraphQL so far below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-like-about-graphql&quot;&gt;What I like about GraphQL&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;easy-ish-to-learn&quot;&gt;Easy(ish) to learn&lt;&#x2F;h3&gt;
&lt;p&gt;I knew absolutely nothing about GraphQL, and initially it looked a little
intimidating, so I did what any self-respecting developer does when they are
lost - I googled. I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.howtographql.com&#x2F;&quot;&gt;How to GraphQL&lt;&#x2F;a&gt;, which is a really well
laid out tutorial showing you how to create a GraphQL server and client. It only
took a day or so of tinkering before it clicked into place, and I could start
transitioning my firebase app over.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;writing-queries-mutations-is-very-easy&quot;&gt;Writing queries &#x2F; mutations is very easy&lt;&#x2F;h3&gt;
&lt;p&gt;In the front end writing type safe queries is as simple as this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;graphql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-graphql &quot;&gt;&lt;code class=&quot;language-graphql&quot; data-lang=&quot;graphql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;query &lt;&#x2F;span&gt;&lt;span&gt;GET_PLAYS($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  getPlays(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    id
&lt;&#x2F;span&gt;&lt;span&gt;    title
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server requires a bit more code, having the query defined a second time in a
&lt;code&gt;schema.graphql&lt;&#x2F;code&gt;, and a &lt;code&gt;resolver&lt;&#x2F;code&gt; function which converts the query into a response
to the client. A simple resolver in &lt;code&gt;prisma&lt;&#x2F;code&gt; might look something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getPlays &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prisma&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;({ id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId &lt;&#x2F;span&gt;&lt;span&gt;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plays&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Resolvers tend to only do one thing, and are only a few lines long, making them
easy to develop.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;declarative-data-reduced-prop-passing-in-the-client&quot;&gt;Declarative data &#x2F; reduced prop-passing in the client&lt;&#x2F;h3&gt;
&lt;p&gt;In the client with &lt;code&gt;react-apollo&lt;&#x2F;code&gt;, data is queried or changed by wrapping the
React elements in higher order components. A &lt;code&gt;Query&lt;&#x2F;code&gt; HOC is used to fetch data and
a &lt;code&gt;Mutation&lt;&#x2F;code&gt; HOC can be used to modify or create data. Both use render props to
handle the results of their operation. An (over simplified) example of how a
&lt;code&gt;Query&lt;&#x2F;code&gt; would be used is like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; e.g. import { GET_PLAYS } from &amp;#39;..&#x2F;client-schema&#x2F;get-plays.graphql&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query query&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET_PLAYS&lt;&#x2F;span&gt;&lt;span&gt;}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPlays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Play {...item &#x2F;&amp;gt;)}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;Query&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This runs when the component loads, and then allows mapping the returned query
data over components. &lt;code&gt;react-apollo&lt;&#x2F;code&gt; also provides cache implementations so you
can optionally display data from local-storage etc &lt;em&gt;while&lt;&#x2F;em&gt; the query is being
returned from the server.&lt;&#x2F;p&gt;
&lt;p&gt;A mutation is also quite simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mutation mutation&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UPDATE_NAME&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variables&lt;&#x2F;span&gt;&lt;span&gt;={{ name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newName &lt;&#x2F;span&gt;&lt;span&gt;}}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutation&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;button onClick={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutation&lt;&#x2F;span&gt;&lt;span&gt;}&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Update Name&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mutation&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the component passes the “mutation” function to its render props which
actually performs the update on the server. You don’t need to “marshal” the
arguments in a separate callback, this is done for you by the HOC. (If necessary
you have the option to call the mutation directly like a function)&lt;&#x2F;p&gt;
&lt;p&gt;An advantage of this declarative approach is that I find myself doing a lot less
“prop passing” through the hierarchy. Instead I just define the data
requirements at the point where they are used. This also results in less digging
through files trying to work out where the &lt;code&gt;onPlayCreated&lt;&#x2F;code&gt; prop originally came
from.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ditching-redux&quot;&gt;Ditching redux&lt;&#x2F;h3&gt;
&lt;p&gt;While I’ve built a few applications using redux and I’m a fan of the flux
approach, I do find myself frustrated by how complicated writing new actions
(especially async ones) can be using redux. I don’t think ending up with a chain
of actions like &lt;code&gt;ON_REQUEST_PLAY&lt;&#x2F;code&gt;, &lt;code&gt;ON_REQUEST_PLAY_SUCCESS&lt;&#x2F;code&gt;,
&lt;code&gt;ON_REQUEST_PLAY_ERROR&lt;&#x2F;code&gt;,
and a saga or a thunk all spread across multiple files is anybody’s idea of a
good time. I’ve found that without redux my code is a lot simpler and easier to
understand, while achieving the same level of relatively complex functionality.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loading-optimistic-rendering-and-error-states&quot;&gt;Loading, optimistic-rendering and error states&lt;&#x2F;h3&gt;
&lt;p&gt;A really neat feature of react-apollo is the way that it handles loading, error
and “optimistic” UI. Consider the slightly more complex example below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query query&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GET_PLAYS&lt;&#x2F;span&gt;&lt;span&gt;}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  {(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loading&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loading &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Spinner &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Error message={error.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;NotFound &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPlays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Play {...item} loading={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loading&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This particular implementation shows a loading spinner if the query is
&lt;em&gt;in-flight&lt;&#x2F;em&gt; and there is no cached data. If there is locally cached data, this
will be displayed while the query is running (we can still show a spinner in
this case if we want to). If the request errors, this can be displayed as well,
and all with only a few lines of code using the props passed down from the
&lt;code&gt;Query&lt;&#x2F;code&gt; HOC.&lt;&#x2F;p&gt;
&lt;p&gt;We can also control how the local cache is used by specifying a &lt;code&gt;fetchPolicy&lt;&#x2F;code&gt;,
for instance &lt;code&gt;cache-and-network&lt;&#x2F;code&gt;, &lt;code&gt;no-cache&lt;&#x2F;code&gt; and so on which tells
&lt;code&gt;react-apollo&lt;&#x2F;code&gt; where to look for data. This makes it very easy to handle real
world scenarios like displaying data quickly, and merging in new data from the
server automagically when it arrives.&lt;&#x2F;p&gt;
&lt;p&gt;Its even neater for mutations, which offer an &lt;code&gt;optimisticResponse&lt;&#x2F;code&gt; option. Here
you can pass the UI the value you think will be returned from a &lt;code&gt;Mutation&lt;&#x2F;code&gt; which
is stored temporarily in the local cache and displayed in the UI. If the request
errors out the UI is automatically rolled back to the unmodified state, but if
the request is successful it appears to the user that the change has been made
without any latency. (This feature alone solves about three hard to fix issues I
had with updating the &lt;code&gt;redux-firestore&lt;&#x2F;code&gt; backend).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-graphql-playground&quot;&gt;The GraphQL Playground&lt;&#x2F;h3&gt;
&lt;p&gt;This is a fantastic tool for developing &#x2F; testing &#x2F; getting to know how GraphQL
works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-don-t-like-about-graphql-and-or-prisma&quot;&gt;What I don’t like about GraphQL (and&#x2F;or Prisma)&lt;&#x2F;h2&gt;
&lt;p&gt;Despite all these features, GraphQL certainly isn’t perfect. Here are some of
the main issues I’ve come across:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lots-of-boilerplate-and-repetition&quot;&gt;Lots of boilerplate and repetition&lt;&#x2F;h3&gt;
&lt;p&gt;On the server, there is a lot of boilerplate code. For &lt;code&gt;prisma&lt;&#x2F;code&gt; based
applications, developers are encouraged to have a “database layer” and an “API
layer”. In the case of prisma this means you are required to maintain your
database schema in three different places:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The prisma schema file, which is used to create and migrate the database
structure&lt;&#x2F;li&gt;
&lt;li&gt;prisma client bindings, automatically generated from the schema file&lt;&#x2F;li&gt;
&lt;li&gt;a separate (but in many places identical) schema for the &lt;code&gt;graphql-yoga&lt;&#x2F;code&gt; back
end.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In addition to this, each possible query mutation requires a &lt;code&gt;resolver&lt;&#x2F;code&gt; to be
written which handles these queries. The schema for the queries is then
replicated client side (with a slightly different format).&lt;&#x2F;p&gt;
&lt;p&gt;While there are some tools to reduce the boilerplate, this is probably the worst
“feature” of GraphQL. I’ve come across to date.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;error-messages&quot;&gt;Error messages&lt;&#x2F;h3&gt;
&lt;p&gt;On the server I’ve had some issues with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;52883048&#x2F;could-not-find-argument-in-nested-prisma-graphql-query&#x2F;52885173&quot;&gt;error messages being a bit
vague&lt;&#x2F;a&gt;,
although part of that issues could just be me getting to grips with how they are
written.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hosting&quot;&gt;Hosting&lt;&#x2F;h3&gt;
&lt;p&gt;A neat thing about firebase and firestore was how easy it was to set up and
install a back end. It literally takes five seconds to do, and cost $0. I could
also host the front end using firebase hosting and deploy it from a CLI.&lt;&#x2F;p&gt;
&lt;p&gt;The picture for GraphQL is a lot less pretty. There are products like
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graph.cool&#x2F;&quot;&gt;graph.cool&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hasura.io&#x2F;&quot;&gt;hasura&lt;&#x2F;a&gt; which can be
deployed to heroku and a bunch of others that come up in searches but have since
folded. Neither solution really works for me - Prisma cloud hosting starts at
$300 USD a month; I don’t understand this value proposition. There are several
other options (i.e. some open source ones, Amazon AppSync etc), but there
appears to be a lot of churn in the smaller providers.&lt;&#x2F;p&gt;
&lt;p&gt;The other option is to “roll your own” backend using docker and a VPS, which is
basically the only option documented by Prisma. Unfortunately Docker is
incompatible with the most common version of Win 10 so this isn’t an option. To
be honest part of the reason I initially chose firebase was that I’d rather
spend time getting the front end to a state where I can share the app with
others, as opposed to working on DevOps.&lt;&#x2F;p&gt;
&lt;p&gt;In the end I opted to use a free Prisma Cloud development server as an interim
solution, however this appears to have a very long latency ~1s on requests. I
hope that by the time I’m moving towards “production”, some other viable options
have emerged.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE FROM AN OLDER AND WISER WILL&lt;&#x2F;strong&gt; I think at this stage I’m looking at
using an AppSync &#x2F; Cognito &#x2F; DynamoDB &#x2F; Lambda backend, but I may make another
post later on if I go down that route.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ANOTHER NOTE FROM AN EVEN OLDER AND WISER WILL&lt;&#x2F;strong&gt; Hey, it turns out I can
just wrap my firestore DB with a GraphQL endpoint!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;first-impressions-converting-a-firebase-project-to-graphql&#x2F;playbook_ui.png&quot; alt=&quot;A sneak preview of the new interface (size: 1300x599px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overall-verdict&quot;&gt;Overall verdict&lt;&#x2F;h2&gt;
&lt;p&gt;GraphQL has some annoyances but overall I’ve really enjoyed building a server
and application with it. There are some frustrations compared to firebase but
overall I’m happier developing with the GraphQL backend as it gives me an almost
&lt;em&gt;functional&lt;&#x2F;em&gt; approach and few surprises.&lt;&#x2F;p&gt;
&lt;p&gt;The client also seems like a lot less of a hassle to work with than mixing redux
and firestore and with the backend fleshed out I’m implementing features a lot
faster than I was with firestore. Many of the issues I had trouble working
around with firebase just aren’t issues with the new design.&lt;&#x2F;p&gt;
&lt;p&gt;I’m really excited about building some of the new features I’ve been dreaming
about for a few years and sharing the app with some other coaches!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Connecting Players with Firebase and Unity [Part 2]</title>
        <published>2017-02-23T00:00:00+00:00</published>
        <updated>2017-02-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/firebase-and-unity-part-2/"/>
        <id>https://willhart.io/post/firebase-and-unity-part-2/</id>
        
        <content type="html" xml:base="https://willhart.io/post/firebase-and-unity-part-2/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;firebase-and-unity-part-1&quot;&gt;previous part&lt;&#x2F;a&gt; we looked at getting a
firebase database set up and importing the package into Unity. In this part we
are actually going to build out the “game”. If you don’t recall, in this example
we are going to have a button and a click counter stored on the server. It isn’t
going to be a particularly exciting game, but should be enough to get us started
on the real-time database path.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A reminder again as well that Firebase only has official support for
Android&#x2F;iOS build targets. I’ve managed to be a bit hacky and get it working
in standalone, but please help me badger firebase directly for official
standalone support!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;creating-a-ui&quot;&gt;Creating a UI&lt;&#x2F;h2&gt;
&lt;p&gt;Our first step is to build up a simple UGUI interface. As I said in the first
part, I’m going to assume you know how to do this and gloss over it fairly
quickly.&lt;&#x2F;p&gt;
&lt;p&gt;I did these steps to get the UI setup:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;In the Lighting panel, remove the skybox&lt;&#x2F;li&gt;
&lt;li&gt;On the camera inspector, set the Clear Flags to Solid Colour and choose a
background colour&lt;&#x2F;li&gt;
&lt;li&gt;Create a UI &lt;code&gt;Canvas&lt;&#x2F;code&gt; in the scene&lt;&#x2F;li&gt;
&lt;li&gt;Add a &lt;code&gt;Button&lt;&#x2F;code&gt; and &lt;code&gt;Text&lt;&#x2F;code&gt; to the canvas and mess about with layout anchors
and text settings a bit so it looks like this:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;clickme.png&quot; alt=&quot;The resulting Unity Scene&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-firebase-script&quot;&gt;Creating a Firebase script&lt;&#x2F;h2&gt;
&lt;p&gt;The next step is to create a C# script for handling the firebase interaction. I
named it &lt;code&gt;FirebaseClickHandler&lt;&#x2F;code&gt;, and started off with the following empty class
definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;FirebaseTest
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Dependencies
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;Firebase;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;Firebase.Database;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;Firebase.Unity.Editor;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;UnityEngine;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;UnityEngine.UI;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endregion
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FirebaseClickHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerializeField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterText&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterText&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;N0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of this is just standard C# setup for a MonoBehaviour, apart from the two
&lt;code&gt;using&lt;&#x2F;code&gt; statements for &lt;code&gt;Firebase&lt;&#x2F;code&gt; and &lt;code&gt;Firebase.Unity.Editor&lt;&#x2F;code&gt;. We are storing a
reference to the &lt;code&gt;Text&lt;&#x2F;code&gt; UI element we created earlier, and in the &lt;code&gt;Update&lt;&#x2F;code&gt;
method we just set the value of the Text to our counter.&lt;&#x2F;p&gt;
&lt;p&gt;If we add the script to our &lt;code&gt;Canvas&lt;&#x2F;code&gt;, hook up the references to the text object
and hit play at this point, our counter should just read &lt;code&gt;0&lt;&#x2F;code&gt; as in our
screenshot above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-count-from-the-database&quot;&gt;Getting the count from the database&lt;&#x2F;h2&gt;
&lt;p&gt;The next thing we want to do is connect to the database and get the current
count. We can connect in the editor by writing the following in Awake:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Awake&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetEditorDatabaseUrl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So here we are setting an Editor URL for testing, which is just our firebase URL
that we can see in the firebase console.&lt;&#x2F;p&gt;
&lt;p&gt;To read and write data, firebase has the concept of &lt;code&gt;references&lt;&#x2F;code&gt;. These are
essentially URLs which point to specific paths or data in the database and can
be used as a notification when the linked data changes, or as a way to read or
write data on that path. Add a private field at the top of our class (below
&lt;code&gt;_count&lt;&#x2F;code&gt;) to store the database reference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;DatabaseReference &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the same time, why not change the default value of &lt;code&gt;_count&lt;&#x2F;code&gt; to -1, so that
we can see when our data is loaded from the database more easily. We can then
replace the &lt;code&gt;Awake&lt;&#x2F;code&gt; method with this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Awake&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetEditorDatabaseUrl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseDatabase&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetReference&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueChanged &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnCountUpdated&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OnCountUpdated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;, ValueChangedEventArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new System.NotImplementedException();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we run the code now, we should get a &lt;code&gt;NotImplementedException&lt;&#x2F;code&gt; thrown, so our
&lt;code&gt;OnCountUpdated&lt;&#x2F;code&gt; method is being called when we “connect” our reference to the
database!&lt;&#x2F;p&gt;
&lt;p&gt;Let’s implement the method now, so that we can display our value in the text. In
the body of the &lt;code&gt;OnCountUpdated&lt;&#x2F;code&gt; method, put the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DatabaseError &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DatabaseError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Snapshot &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Snapshot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Snapshot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We check for an error, then set the value of our &lt;code&gt;_count&lt;&#x2F;code&gt; according to what the
database value returns. The return value is in the &lt;code&gt;Snapshot&lt;&#x2F;code&gt; variable. Note
that we check for &lt;code&gt;e.Snapshot == null&lt;&#x2F;code&gt; - this is important because if there
isn’t any data at the path, &lt;code&gt;e.Snapshot&lt;&#x2F;code&gt; will be null - this lets us set a
default.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; “Empty” database URLs will return null&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you hit play in the editor, you should see the a bit of a pause, then the
text value should be set to 0 as there isn’t currently anything at the
&lt;code&gt;&#x2F;counter&lt;&#x2F;code&gt; path:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;browsefirebase.png&quot; alt=&quot;The counter path is currently empty&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While you are here, play around a bit - you can edit values in the database
through your browser. With the application running, change the count value to
some random numbers - the text field in the Unity game should update
automatically!&lt;&#x2F;p&gt;
&lt;p&gt;OK, I think we are now ready to move on to writing the counter value to the
database.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-a-value-to-the-database&quot;&gt;Writing a value to the database&lt;&#x2F;h2&gt;
&lt;p&gt;To write a value to the database, we use a similar approach to reading - i.e.
call a method on the &lt;code&gt;DatabaseReference&lt;&#x2F;code&gt; we created before. Add the following
public method to our &lt;code&gt;FirebaseClickHandler&lt;&#x2F;code&gt; class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IncrementClickCounter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetValueAsync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Link this to our &lt;code&gt;Button&lt;&#x2F;code&gt; via the click handler.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;inspector.png&quot; alt=&quot;Hook up the method in the click handler&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This bit is fun :) Tweak your windows so you can see the Unity game and the
firebase console side by side. Run the game and click the button. Now as we are
subscribing an event in &lt;code&gt;Awake&lt;&#x2F;code&gt;, we probably need to make sure that it gets
unsubscribed &lt;code&gt;OnDestroy&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OnDestroy&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueChanged &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnCountUpdated&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this stage, we have a workable system, albeit with two, fairly major issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If you build and run the game, you get a DLL Not Found exception&lt;&#x2F;li&gt;
&lt;li&gt;As our &lt;code&gt;IncrementClickCounter&lt;&#x2F;code&gt; uses our local value of count and adds 1, then if 100 people update the database at exactly the same time, then we may lose some of the increments (more below)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We’ll start by addressing point #2, by using &lt;code&gt;Transactions&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transactions&quot;&gt;Transactions&lt;&#x2F;h2&gt;
&lt;p&gt;To clarify the issue - we are using our local value of &lt;code&gt;_count&lt;&#x2F;code&gt;, for example
&lt;code&gt;_count = 6&lt;&#x2F;code&gt; to send a &lt;code&gt;SetValueAsync&lt;&#x2F;code&gt; request with the value &lt;code&gt;_count + 1&lt;&#x2F;code&gt;. If
tonnes of people do this request at the same time (say 100 people try to set it
to 7) then our database will say &lt;code&gt;counter = 7&lt;&#x2F;code&gt; when what we actually want it to
say is counter = 106 (it was originally 6 and 100 people want to increment it.
We can manage this kind of situation by using a transaction.&lt;&#x2F;p&gt;
&lt;p&gt;A transaction in firebase runs from a &lt;code&gt;Reference&lt;&#x2F;code&gt; and receives the current data
value as &lt;code&gt;MutableData&lt;&#x2F;code&gt;. It “returns” the new data that should be set in the
database. Lets replace our &lt;code&gt;IncrementClickCounter&lt;&#x2F;code&gt; method with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IncrementClickCounter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RunTransaction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span&gt;= \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TransactionResult&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContinueWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Its a tiny bit more code, but now our counter should be protected against race
conditions!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-for-desktop&quot;&gt;Building for Desktop&lt;&#x2F;h2&gt;
&lt;p&gt;Now a few paragraphs ago, I glossed over a &lt;code&gt;DLLNotFound&lt;&#x2F;code&gt; exception above when we
ran the built version of our game. This is due to no official support for Unity
Standalone. If you create a development build and look at the debug logs, this
is because and &lt;code&gt;App.dll&lt;&#x2F;code&gt; is missing. Checking this is in my plugins directory,
but only for Android, iOS and x86_64 builds. By changing the standalone
architecture to &lt;code&gt;x86_64&lt;&#x2F;code&gt; I was able to get this file included as part of the
build, and compile and run our example game.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;buildsettings.png&quot; alt=&quot;Using x86_64 architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also had to modify the connection script in &lt;code&gt;Awake&lt;&#x2F;code&gt;, to set the database path
explicitly. There may be a better way to load in config, but this worked for me
as a quick hack:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;UNITY_EDITOR
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetEditorDatabaseUrl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Options&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DatabaseUrl &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    new System.Uri(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I haven’t experimented much, but I suspect that a lot of the extra features of
firebase such as authentication may be unsupported in Standalone mode. This does
leave our firebase data open to abuse. We can mitigate this a little bit by
doing some additional validation in our database rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.validate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;newData.isNumber() &amp;amp;&amp;amp; newData.val() == data.val() + 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that the update will fail unless we are incrementing by one, which
should prevent people clearing or otherwise playing with the counter too much,
but at the end of the day without authentication we are a little open to
exploitation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h2&gt;
&lt;p&gt;I really like firebase. I’ve used it in some web apps and have been very
pleasantly surprised, and I’d be stoked to be able to base some features on it
in a Standalone build of a Unity game. If you feel the same way, please get in
touch with firebase and tell them!&lt;&#x2F;p&gt;
&lt;p&gt;Otherwise, I hope this has given you some insight into how firebase can be used
and setup!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Connecting Players with Firebase and Unity [Part 1]</title>
        <published>2017-02-19T00:00:00+00:00</published>
        <updated>2017-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/firebase-and-unity-part-1/"/>
        <id>https://willhart.io/post/firebase-and-unity-part-1/</id>
        
        <content type="html" xml:base="https://willhart.io/post/firebase-and-unity-part-1/">&lt;h2 id=&quot;all-your-firebases-are-belong-to-us&quot;&gt;All your firebases are belong to us?&lt;&#x2F;h2&gt;
&lt;p&gt;Playing around with a React web app recently I was working through ideas for the
app backend, and after weighing up a bunch of different options I decided to
give &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; a go so I could concentrate on the
frontend. I’d played with firebase a while back (before it was acquired by
google) but it had never really clicked with me. That was before I used React
for web&#x2F;mobile apps, and I quickly found that firebase is &lt;em&gt;made&lt;&#x2F;em&gt; for the
React&#x2F;Redux architecture; the first time I changed something on my PC browser
and it immediately popped up on my mobile browser (without any special code from
me) I was hooked.&lt;&#x2F;p&gt;
&lt;p&gt;In case you aren’t aware, firebase is a bunch of different things, but the
interesting features for me are it provides a user logins, a real-time[1]
JSON-like database backend with fine grained read&#x2F;write permissions, and
integrated file storage. The interface is really easy, all data is just accessed
by URLs, like (&lt;code&gt;&#x2F;myfirebaseurl&#x2F;users&#x2F;1234&#x2F;username&lt;&#x2F;code&gt;). It has APIs for
JavaScript, and … wait, did they just say &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;unity&#x2F;setup&quot;&gt;Unity
support&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Before I get any further: currently firebase only supports Android
and iOS builds by default. If you stick around until the end, I’ve managed to
get it working in standalone builds but it is a little hacky. The best thing I
can suggest is to try to badger firebase through twitter or (shudder) google
groups to add support for Standalone builds!&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;d&#x2F;topic&#x2F;firebase-talk&#x2F;XLaACoVjysc&#x2F;discussion&quot;&gt;asked for an
update&lt;&#x2F;a&gt;
on the google groups page, but at the time of writing this I haven’t heard
anything back.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Suddenly, gears started grinding in my head, shaking off the piles of rust that
had accumulated. Visions of real-time backend features, like the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;arrowheadgamestudios.com&#x2F;games&#x2F;helldivers&#x2F;helldivers-war-statistics&#x2F;&quot;&gt;global
statistics&lt;&#x2F;a&gt;
from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;arrowheadgamestudios.com&#x2F;games&#x2F;helldivers&#x2F;&quot;&gt;Helldivers&lt;&#x2F;a&gt; swam before
my eyes. Or, what about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.warcubegame.com&#x2F;&quot;&gt;Warcube’s&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Chman&#x2F;Moments&quot;&gt;gif recording
feature&lt;&#x2F;a&gt;, with automatic uploads so that they
can be featured on a game’s website in real-time. When you start to go down this
path, there are lots of ways to make players feel connected while playing your
game.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, it isn’t all roses. During development of the web app I was prompted
to tweet this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;tweet.png&quot; alt=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;wlhart&#x2F;status&#x2F;824828033970212865&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is a bit of learning curve using firebase, but its not insurmountable, and
I was pretty impressed to see one of the firebase staff find the tweet and ask
me for further feedback… thumbs up for good community engagement!&lt;&#x2F;p&gt;
&lt;p&gt;So, that aside, I present to you - a basic introduction in creating real-time
“social” features in your Unity games using Google’s Firebase backend (in two
parts)! We’re going to create a very simple stats feature, which counts the
number of mouse clicks and saves it globally so all users can see it in
real-time. I’m going to assume you are comfortable with Unity so will gloss over
the Unity basics for the sake of brevity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;setting-up-firebase&quot;&gt;Setting up Firebase&lt;&#x2F;h3&gt;
&lt;p&gt;Firebase at the moment has a pretty decent free tier, which gives you a bunch of
storage and bandwidth. Go ahead and sign up now if you are following along. Once
you are signed in, create a new application following their prompts. I’m going
to call mine &lt;code&gt;wilsk_unity_test&lt;&#x2F;code&gt;, but you can call yours whatever you want (see
note 2)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;create_new_project_firebase.png&quot; alt=&quot;Create a new firebase application&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once you have created the database, click the “Database” link on the left hand
menu, here you can see your database contents. It might look something like
this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;firebase_setup.png&quot; alt=&quot;The initial database contents (size: 1098x293px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can see the firebase URL - &lt;code&gt;http:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;code&gt; and the root
of the database, &lt;code&gt;wh-unity-test&lt;&#x2F;code&gt; with a value of &lt;code&gt;null&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next we need to set up some database permissions. These control who can read or
write what data, and also validation rules for the data. Click on the &lt;code&gt;RULES&lt;&#x2F;code&gt; tab
above the database URL. You should see a text box containing the default rules
in JSON format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.read&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auth != null&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.write&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auth != null&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These rules just specify that anybody who is logged in can read or write
anything. For now we don’t want any real restrictions, but we also don’t want a
massive free for all. Lets say we want to be able to increment a counter, and
everything else should be rejected. Paste the following into the text box,
replacing the current rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.validate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;newData.isNumber()&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.read&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.write&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks a little intimidating, but what it does is quite straightforward.
Basically for the &lt;code&gt;counter&lt;&#x2F;code&gt; path on the database, i.e. if we access
&lt;code&gt;http:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;counter&lt;&#x2F;code&gt;, it allows read and write by
default. When we write to the path, any value is accepted as long as it is a
number, this is the &lt;code&gt;newData.isNumber()&lt;&#x2F;code&gt; part. Anything not specified in the
rules is rejected by default.&lt;&#x2F;p&gt;
&lt;p&gt;You will probably notice a “Simulator” button on the top right of the text box.
This lets us try out our rules before saving them. Have a play and verify that
the rules prevent access outside of &lt;code&gt;counter&lt;&#x2F;code&gt; and reject attempts to write text or
other data to the &lt;code&gt;&#x2F;counter&lt;&#x2F;code&gt; path.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;rule_simulator-1.png&quot; alt=&quot;The Firebase rules simulator in action (size: 1186x631px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you are happy, hit &lt;code&gt;PUBLISH&lt;&#x2F;code&gt; and our database setup is done. We’ll come
back to the database in a little while.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setting-up-unity&quot;&gt;Setting up Unity&lt;&#x2F;h3&gt;
&lt;p&gt;The next thing is to get Unity setup. Download the Unity SDK from
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;unity&#x2F;setup&quot;&gt;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;unity&#x2F;setup&lt;&#x2F;a&gt;, the package comes with a bunch of
&lt;code&gt;.unitypackage&lt;&#x2F;code&gt; files which contain the code for different feature sets.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;firebase_unity_package_contents.png&quot; alt=&quot;The Contents of the Firebase Unity Package&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lets start a new Unity project and import the &lt;code&gt;FirebaseDatabase.unitypackage&lt;&#x2F;code&gt;
package. We’re going to skip authentication for now as it makes life a bit more
complicated (see note 3). You should see something like this screen when you
drop the package in:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;firebase_package_import.png&quot; alt=&quot;Importing the Firebase Database package&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You might get a warning about having the wrong SDK version. Just follow the
instructions on screen to configure the project correctly for firebase.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;sdk_prompt.png&quot; alt=&quot;The SDK version may need to be updated&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ready-to-rock&quot;&gt;Ready to rock&lt;&#x2F;h3&gt;
&lt;p&gt;OK, with that I think we are ready to start building up our application. Stay
tuned for &lt;a href=&quot;&#x2F;post&#x2F;firebase-and-unity-part-2&quot;&gt;part 2&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Real-time as in you can subscribe to a particular database field, and when
anybody updates the value all subscribers get notified. Think a chat site,
where new messages are automatically pushed to other users as soon as they
are posted.&lt;&#x2F;li&gt;
&lt;li&gt;If the name you pick is already taken then you will end up with a short
series of random characters after the name you pick.&lt;&#x2F;li&gt;
&lt;li&gt;Also, I’m not even sure that authentication &#x2F; authorisation is possible in
standalone builds with the current library.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Making game assets using OpenSCAD</title>
        <published>2017-02-12T00:00:00+00:00</published>
        <updated>2017-02-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/game-assets-using-openscad/"/>
        <id>https://willhart.io/post/game-assets-using-openscad/</id>
        
        <content type="html" xml:base="https://willhart.io/post/game-assets-using-openscad/">&lt;p&gt;In my day job, I have a task to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.osapublishing.org&#x2F;abstract.cfm?uri=BGPPM-2018-JTh4A.2&quot;&gt;design some 3D printed parts in a variety of
repeating
patterns&lt;&#x2F;a&gt;,
but with each part being just slightly different. I didn’t really want to mess
about in SolidWorks making them in all sorts of different sizes and then
maintaining them every time the design specs changed. I decided what I really
wanted was a procedural CAD program so I could code the outputs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;header.png&quot; alt=&quot;A preview of what we are going to make in this tutorial (size: 1918x768px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After some messing about I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.openscad.org&#x2F;&quot;&gt;OpenSCAD&lt;&#x2F;a&gt; which is
billed as “the Programmer’s Solid 3D CAD modeller”. Basically you can script 3D
models using basic boolean operations like &lt;code&gt;union&lt;&#x2F;code&gt;, &lt;code&gt;difference&lt;&#x2F;code&gt; and &lt;code&gt;intersect&lt;&#x2F;code&gt;
as well as primitive shapes like &lt;code&gt;cube&lt;&#x2F;code&gt;, &lt;code&gt;cylinder&lt;&#x2F;code&gt; and &lt;code&gt;sphere&lt;&#x2F;code&gt;. The language
allows basic scripting including variables, &lt;code&gt;for&lt;&#x2F;code&gt; and &lt;code&gt;if&lt;&#x2F;code&gt; control statements. A
minimal example is a cube, which you make like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;a_basic_openscad_cube.png&quot; alt=&quot;A basic OpenSCAD box (size: 785x510px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wondered if I could use this as a really simple way to make game assets,
particularly building up a lot of basic shapes very quickly. I think the
technique is naturally suited to making things like castle walls which are
basically a &lt;code&gt;union&lt;&#x2F;code&gt; of lots of primitive shapes. So, lets begin!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blocking-out-the-basic-structure&quot;&gt;Blocking out the basic structure&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, we can block out the structure of our wall. I’ll just specify some
proportions, then use a scale value to &lt;code&gt;scale&lt;&#x2F;code&gt; it up to our preferred size:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are specifying a base wall is 1 unit long, 0.3 units thick and 0.8 units
tall. We also want to scale the whole wall up by 10 units (A “unit” in OpenSCAD
is one millimetre, but that doesn’t really matter here). We can scale and draw
our cube the same was as before, except now we use the variable values instead
of hard coding:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;making-crenelations&quot;&gt;Making crenelations&lt;&#x2F;h2&gt;
&lt;p&gt;The next thing a castle wall needs is crenelation, something for our archers to
hide behind. We need a few variables here…&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;* cren_period;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A diagram may help:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;crennelation_dimensions.png&quot; alt=&quot;The attributes of crenellations&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;period&lt;&#x2F;em&gt; is the length of one “on and off” crenelation, the height is the
height of a crenelation and the duty cycle is the percentage of on vs off of
the crenellations, so &lt;code&gt;0.5&lt;&#x2F;code&gt; here indicates for each period 50% is crenelation
and 50% is air. For simplicity we are going to assume that crenelations are
cubes, so we can define the thickness as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can use a &lt;code&gt;for&lt;&#x2F;code&gt;, &lt;code&gt;translate&lt;&#x2F;code&gt; and &lt;code&gt;cube&lt;&#x2F;code&gt; to draw our crenelations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;(cren_thickness);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first line is just the notation for a &lt;code&gt;for&lt;&#x2F;code&gt; loop in OpenSCAD. It loops from
&lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;wall_length - cren_period&lt;&#x2F;code&gt;, taking steps of &lt;code&gt;cren_period&lt;&#x2F;code&gt;. By default, the
cube will be drawn at &lt;code&gt;(0,0,0)&lt;&#x2F;code&gt;, but actually we want them to be placed on top of
the wall. To achieve this we use a &lt;code&gt;translate&lt;&#x2F;code&gt; statement to wrap our &lt;code&gt;cube&lt;&#x2F;code&gt;
primitive drawing statement. We provide the x, y and z coordinates where we want
our cube to be drawn.&lt;&#x2F;p&gt;
&lt;p&gt;To join the crenelations to our base wall, we can wrap the whole lot in a &lt;code&gt;union&lt;&#x2F;code&gt;
statement. Our model code now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelations
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which produces:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;model_with_crennelation.png&quot; alt=&quot;The first attempt at a castle wall (size: 477x440px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reusing-our-wall&quot;&gt;Reusing our wall&lt;&#x2F;h2&gt;
&lt;p&gt;Now we have a fairly basic castle wall, but it would be really great if we could
draw a bunch of wall really easily. Luckily OpenSCAD provides &lt;code&gt;modules&lt;&#x2F;code&gt;, which are
essentially functions for this purpose. We can wrap our wall drawing code in a
module like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; our wall drawing code from above in here,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; except for the &amp;quot;scale&amp;quot; command
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll also move the &lt;code&gt;scale&lt;&#x2F;code&gt; out of the module, as we want to wrap our entire castle
in this later on, not just wall pieces one at a time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; You can provide function arguments to modules, but for simplicity I’m
just letting modules access the global variables declared at the top of the file&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We can then draw multiple wall segments using a for loop like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;num_walls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;multiple_walls_in_loop.png&quot; alt=&quot;Repeating wall sections using a module (size: 504x314px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We might also want to draw walls at different angles, so lets wrap that code in
a module with a couple of arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only new part here is the &lt;code&gt;rotate&lt;&#x2F;code&gt; command, which rotates everything by the
given x, y and z euler angles. Now we have this command, we can easily draw an
entire enclosed wall inside another module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length,
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is draw four different &lt;code&gt;longWalls&lt;&#x2F;code&gt;, with the correct offsets and
rotations. We can then draw a wall enclosure by writing&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;enclosed_wall.png&quot; alt=&quot;Repeating wall sections to draw a closed wall (size: 641x453px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Phew, that was actually “relatively” easy! Of course that’s only the basics, and
we still would need to export to STL, then do UV unwrapping, texturing and so on
in our modelling program. The main advantage of this kind of approach is that it
is really easy to generate a whole range of different geometry very fast.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; For my day job, I built a command line tool that can generate tonnes
of different geometry and export to STL at once. In the game dev world, this
kind of approach could be used to generate castles of all different sizes in a
batch process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Of course, our castle above lacks a whole lot of things like a gate, a keep and
towers… and it is debatable how useful this technique will be once things get
a lot more complicated, but its an interesting experiment!&lt;&#x2F;p&gt;
&lt;p&gt;Here is something I put together with maybe twenty minutes more effort (you can
see the code for it below):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;castle.png&quot; alt=&quot;An example castle built using OpenSCAD (size: 521x404px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; castle.scad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    walls_to_draw = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DarkGray&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(walls_to_draw);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(y = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;                    x * walls_to_draw * wall_length - x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness,
&lt;&#x2F;span&gt;&lt;span&gt;                    y * walls_to_draw * wall_length - y * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MediumSeaGreen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DarkGoldenrod&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cylinder&lt;&#x2F;span&gt;&lt;span&gt;(h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.5 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height, r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, $fn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Crimson&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;difference&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEntrance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* num_walls * wall_length);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dim_scale&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tower_height&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    dim = dim_scale * wall_thickness;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;difference&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([dim, dim, tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([dim, dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.45 &lt;&#x2F;span&gt;&lt;span&gt;* dim, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.01 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.45 &lt;&#x2F;span&gt;&lt;span&gt;* dim, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.01 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEntrance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_offset&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x = x_offset - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length;
&lt;&#x2F;span&gt;&lt;span&gt;    y = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness;
&lt;&#x2F;span&gt;&lt;span&gt;    z = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, y, z]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x_offset, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cylinder&lt;&#x2F;span&gt;&lt;span&gt;(h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length, $fn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, centre = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(wall_length, wall_height);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cren_length&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cren_z_offset&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : cren_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, cren_z_offset]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; castle_wall.scad
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelations
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Perils of Unity&#x27;s execution order</title>
        <published>2017-02-05T00:00:00+00:00</published>
        <updated>2017-02-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/the-perils-of-unitys-execution-order/"/>
        <id>https://willhart.io/post/the-perils-of-unitys-execution-order/</id>
        
        <content type="html" xml:base="https://willhart.io/post/the-perils-of-unitys-execution-order/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;the-perils-of-unitys-execution-order&#x2F;execution_order.png&quot; alt=&quot;Testing Unity’s script execution order&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I came across an interesting problem when I was posting about our &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-1&quot;&gt;Zenobit
ECS&lt;&#x2F;a&gt; a while back. In our ECS I
had noticed that as when we retrieve a list of Components from our ECS engine
(say a list of “attack” components), they are always in the same order. This
meant there was the potential for some sort of bias to occur when resolving
attacks. For instance, entities that attacked earlier in each Update loop were
at an advantage if it meant that others were killed before they could fight
back.&lt;&#x2F;p&gt;
&lt;p&gt;As I was thinking about how this would work in Unity’s preferred architecture, I
realised I didn’t really know much about how Unity resolves its “order of
execution” of scripts by default. You can set the order that Mono Behaviours are
executed in the “Script Execution Order” (or SEO) settings panel, but I wasn’t
really clear what happened if you scripts weren’t in the SEO panel. Was this a
potential source of “hidden” bias or errors in Unity code? (There is only one
way to find out!)&lt;&#x2F;p&gt;
&lt;p&gt;Unity’s documentation on Script Execution Order is… well not great. It
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.unity3d.com&#x2F;Manual&#x2F;class-ScriptExecution.html&quot;&gt;contains the following
line&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, the Awake, OnEnable and Update functions of different scripts are
called in the order the &lt;strong&gt;scripts&lt;&#x2F;strong&gt; are loaded (which is arbitrary). However,
it is possible to modify this order using the Script Execution Order settings&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The emphasis is mine - the word “scripts” is highly ambiguous, and is not a C#
term. By script they could either mean the &lt;code&gt;Type&lt;&#x2F;code&gt;, i.e. &lt;code&gt;typeof(MyClass)&lt;&#x2F;code&gt; or an
instance, &lt;code&gt;var instance = gameObject.AddComponent(MyClass)&lt;&#x2F;code&gt;. Even after writing
this post, I still don’t really know what they mean.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-could-possibly-go-wrong&quot;&gt;What could possibly go wrong?&lt;&#x2F;h2&gt;
&lt;p&gt;Why does the distinction matter? Well picture a scenario, similar to the ranged
combat example provided in &lt;a href=&quot;&#x2F;zenobits-unity-ecs-part-3&quot;&gt;part 3 of my ECS
series&lt;&#x2F;a&gt;. You have two &lt;code&gt;GameObject&lt;&#x2F;code&gt;s, each can attack
the other game object, and it can also die if it is attacked. A simple
implementation, where we have a reference to the other game object &lt;code&gt;enemy&lt;&#x2F;code&gt; looks
like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Attack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem here is fairly clear - whoever attacks first, wins. If the attack
code on one game object is always executed first, then it will &lt;em&gt;always&lt;&#x2F;em&gt; win the
combat. (In our ECS, this would mean older entities would always win combat as
they are at the top of the list).&lt;&#x2F;p&gt;
&lt;p&gt;To fix this, we could add a second MonoBehaviour, a &lt;code&gt;Death&lt;&#x2F;code&gt; component which
separately removes dead enemies. Our implementation now looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Attack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;Death&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsDead &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Death &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsDead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsDead&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gameObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, under this approach, the outcome still depends on the order the scripts
are called in. Consider what happens if the execution order is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;span&gt;Object B &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;span&gt;Object B &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should result in both of the objects dying as they attack, then check for
death. But what happens if the following occurs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;span&gt;*Object B &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;span&gt;*Object B &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the order the Components are Updated on Object B is now switched. Now
Object B dies before it can attack! Object A always wins and Object B always
dies, and once again there is a benefit in being higher in the game object
execution priority.&lt;&#x2F;p&gt;
&lt;p&gt;But can this ever happen? What does Unity actually do where we don’t specify a
script execution order? What order are components called in, and how does Unity
work out which GameObject to Update first?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mapping-unity-s-execution-order&quot;&gt;Mapping Unity’s Execution Order&lt;&#x2F;h2&gt;
&lt;p&gt;Lets do a little digging. If I open up Unity and Visual Studio, I can make a
simple script to find out what Unity does under the hood:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TestA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InstanceCount &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Awake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InstanceCount&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRAME &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frameCount &lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; INSTANCE &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script just increments a counter each time we add a new instance of the
class, then logs the frame number, instance number and class name in the
&lt;code&gt;Update&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;p&gt;I made a duplicate of this script, called &lt;code&gt;TestB&lt;&#x2F;code&gt;. In an empty scene, I created
a prefab from an empty game object with the &lt;code&gt;TestA&lt;&#x2F;code&gt; and &lt;code&gt;TestB&lt;&#x2F;code&gt; scripts attached
(&lt;code&gt;TestA&lt;&#x2F;code&gt; was above &lt;code&gt;TestB&lt;&#x2F;code&gt; in the hierarchy), and left one instance in the
scene. When I hit play, I got the following logs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 2 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 2 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is fairly straightforward. The execution order is the same every frame.&lt;&#x2F;p&gt;
&lt;p&gt;What if we duplicate the game object, so we now have two objects, each with the
two scripts attached?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 1 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 1 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 2 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 2 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 3 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 3 TestA
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Ruh roh&lt;&#x2F;em&gt;… the order of execution on the second game object is switched - B,A
versus A,B on the first object! Maybe Unity just wanted me to spell out ABBA? In
fact, adding more game objects seems to repeat this pattern (ABBA ABBA ABBA),
although once I got (BAAB BAAB BAAB). So… um - what are the rules here? To be
honest, I have no idea, so I guess we just move on?&lt;&#x2F;p&gt;
&lt;p&gt;Lets set the difficulty level to &lt;em&gt;Ultra Nightmare&lt;&#x2F;em&gt; by Instantiating a new prefab
every frame. I had to hit play and pause again really quickly to prevent too
much console spam… but now the log looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 8 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 1 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 1 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 2 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 2 TestB
&lt;&#x2F;span&gt;&lt;span&gt;... many more lines
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 7 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 7 TestB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And a few frames later&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 20 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 1 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 1 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 2 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 2 TestB
&lt;&#x2F;span&gt;&lt;span&gt;... many more lines
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 18 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 18 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 19 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 19 TestB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Something really strange has happened - the instantiated objects always follow
the same pattern, A then B, while the editor placed game object executes B then
A.&lt;&#x2F;p&gt;
&lt;p&gt;Double ruh roh. I’m really confused now. I’m assuming something like this is
happening:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The execution order of MonoBehaviours attached to each game object is
different depending on whether the GameObject was placed in the scene or
Instantiated at run time&lt;&#x2F;li&gt;
&lt;li&gt;The behaviour of execution order for editor placed objects is different from
instantiated objects&lt;&#x2F;li&gt;
&lt;li&gt;The game objects appear to be updated in the order in which they were
instantiated&lt;&#x2F;li&gt;
&lt;li&gt;The hierarchy has no impact on execution order (verify this by pausing the
game and rearranging the hierarchy)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I’m not even sure what to make of this - I think its best to just consider that
by default Unity executes Update methods completely arbitrarily, but usually
grouped by GameObject.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-does-this-matter-and-can-it-be-fixed&quot;&gt;Why does this matter, and can it be fixed?&lt;&#x2F;h2&gt;
&lt;p&gt;If we execute all of the &lt;code&gt;Attack.Update()&lt;&#x2F;code&gt; calls, then all of the
&lt;code&gt;Death.Update()&lt;&#x2F;code&gt; calls, then both game objects will die every time they fight -
they both attack the other object in their &lt;code&gt;Attack&lt;&#x2F;code&gt; instance, then they both die
in the &lt;code&gt;Death&lt;&#x2F;code&gt; instance.&lt;&#x2F;p&gt;
&lt;p&gt;It definitely isn’t a terminal problem - we can achieve explicitly set Script
Execution Order or perhaps do death removal check in &lt;code&gt;LateUpdate&lt;&#x2F;code&gt;. These
solutions both work, and are relatively straightforward to implement, but the
danger lies in the fact that the default Unity implementation relies on
&lt;em&gt;implicit&lt;&#x2F;em&gt; and seemingly arbitrary execution order.&lt;&#x2F;p&gt;
&lt;p&gt;There is the potential for a whole raft of insidious, unexpected and difficult
to debug logic errors to crop up, way beyond the complexity of our contrived
attack&#x2F;die example here. This potential is made worse by the fact that the
default Unity behaviour appears to vary based on factors such as instantiation
order and instantiation method. To be absolutely certain of our execution order
we may need to &lt;strong&gt;set script execution order on every single MonoBehaviour in our
game&lt;&#x2F;strong&gt;, which seems to me to be a particular kind of hell.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I hope this post has in some way helped you avoid some insidious, hard
to debug issues in your Unity Adventure!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zenobit&#x27;s Unity ECS (part 3)</title>
        <published>2017-01-24T00:00:00+00:00</published>
        <updated>2017-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/zenobits-unity-ecs-part-3/"/>
        <id>https://willhart.io/post/zenobits-unity-ecs-part-3/</id>
        
        <content type="html" xml:base="https://willhart.io/post/zenobits-unity-ecs-part-3/">&lt;p&gt;This is the third and final part of my three part series on the Entity Component
System we are using at @ZenobitStudios.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-3&#x2F;ecs-background-2.png&quot; alt=&quot;Zenobit ECS header (size: 1176x663px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-1&quot;&gt;first part&lt;&#x2F;a&gt;, I discussed what an ECS is, and
why we chose this architecture for our games. In the &lt;a href=&quot;&#x2F;zenobits-unity-ecs-part-2&quot;&gt;second
part&lt;&#x2F;a&gt;, I talked through several areas in which an
ECS offers some potential advantages over the “standard” Unity architecture. In
this third and final part, I’m going to describe a concrete example of how we
implemented a particular feature in our ECS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;show-don-t-tell&quot;&gt;Show don’t tell?&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous post I presented some concrete examples using an example where
we have Entities (or game objects) with a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and a
&lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;. We’re going to take this a step further here and describe (in
a relatively hand wavy way) how we implemented ranged combat in our current game
project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unity-version&quot;&gt;Unity Version&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll start by describing how I would normally implement a ranged combat system
in “Unity default” game architecture. I’m going to throw up a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sequence_diagram&quot;&gt;sequence
diagram&lt;&#x2F;a&gt; to describe the system,
and then step through it bit by bit.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-3&#x2F;unity_example-3.png&quot; alt=&quot;Sequence Diagram for Unity Ranged Combat (size: 612x734px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can see there are three participants in this approach - a “Ranged Attacker”,
a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and a &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;, which are MonoBehaviour derived
classes attached to the same GameObject. First, let’s assume that we have some
sort of ranged attacker (hand wavy assumption #1) which raycasts &#x2F; sphere
overlaps or whatever to find which enemies to hurt, and a weapon class (hand
wavy assumption #2) which stores weapon data.&lt;&#x2F;p&gt;
&lt;p&gt;Typically our attacker would then have a bunch of colliders to test against, and
there would be some logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in our ranged attacker MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetComponent&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gameObject&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RaycastAll&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weapon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetComponent&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TakeDamage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weapon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Damage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the first loop in our sequence diagram, which is called on every
attacker’s &lt;code&gt;Update&lt;&#x2F;code&gt; method. If the attacker has health &amp;gt; 0 (the &lt;code&gt;opt&lt;&#x2F;code&gt; bit in the
sequence diagram) then it calls the public &lt;code&gt;TakeDamage&lt;&#x2F;code&gt; method of any collided
&lt;code&gt;HealthComponents&lt;&#x2F;code&gt;. This then triggers the Health Component to find out if there
is an attached Shield Component. If there is, then it runs the shield’s logic
and reduce health by any remaining damage. It might look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TakeDamage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damage&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageTaken &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;        ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damage
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetRemainingDamage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageTaken&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That’s pretty straightforward, and I’ll leave the implementation of
&lt;code&gt;ShieldComponent::GetRemainingDamage()&lt;&#x2F;code&gt; up to your imagination. We now need a
way to remove dead GameObjects. We could do this in the &lt;code&gt;TakeDamage&lt;&#x2F;code&gt; method on
&lt;code&gt;HealthComponent&lt;&#x2F;code&gt;, and just check if health is less than or equal to 0 and
&lt;code&gt;Destroy()&lt;&#x2F;code&gt; the game object. This could cause difficulties though, as now there
is a possibility that objects are destroyed before they have the ability to
attack back. In theory, whichever objects are higher in the &lt;code&gt;Update&lt;&#x2F;code&gt; order now
have an advantage.&lt;&#x2F;p&gt;
&lt;p&gt;To fix this, we need to move our “death” code out of the &lt;code&gt;TakeDamage&lt;&#x2F;code&gt; loop and
into an &lt;code&gt;Update&lt;&#x2F;code&gt; method. However, if you ran the code now, there would still be
a problem. By default, GameObjects are considered in the order that they were
instantiated in, then each MonoBehaviour on the GameObject has its &lt;code&gt;Update&lt;&#x2F;code&gt;
method called, in a slightly strange order.[1] We still can’t guarantee that
ordering in the hierarchy won’t have an impact on the outcome of ranged combat.
To fix this we need to set an order of script execution using the Script
Execution Order editor window. This way we can ensure all of the ranged attack
occurs before any &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; destroys an entity. It works, but its a bit
confusing and arguably not very scalable.&lt;&#x2F;p&gt;
&lt;p&gt;There you go - the Unity system in a nutshell. Now let’s take a look at how our
ECS tackled this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ecs-version&quot;&gt;ECS Version&lt;&#x2F;h2&gt;
&lt;p&gt;Once again, I’ll throw out the sequence diagram for starters, then work through
it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-3&#x2F;ecs_example-6.png&quot; alt=&quot;Sequence Diagram for ECS Ranged Combat (size: 969x513px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Immediately you can see there are a few more moving pieces. Now we have three
systems alongside our two components. The components have the same data attached
but the &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; now has a &lt;code&gt;DamageReceived&lt;&#x2F;code&gt; property (see note 2), but
all logic has been removed from them.&lt;&#x2F;p&gt;
&lt;p&gt;Our systems run one at a time, in the order in which they are added to the ECS
when we bootstrap it. Each runs an Update loop, which for the &lt;code&gt;RangedSystem&lt;&#x2F;code&gt; may
look like the following (see note 3):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_enemyMatcher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetMatches&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weapon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Damage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It doesn’t get too much simpler than that. Obviously there are some
implementation details around how we get the list of enemies to attack, (see
note 4) but the system itself couldn’t be easier to understand.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;DamageSystem&lt;&#x2F;code&gt; then runs, calculating how much damage goes to health and how
much to shields. It might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetAll&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ShieldComponent&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mathf&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Min&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ShieldComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ShieldComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;-= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks like a “lot” of code, but it combines the
&lt;code&gt;HealthComponent::TakeDamage()&lt;&#x2F;code&gt; and &lt;code&gt;ShieldComponent::GetRemainingDamage()&lt;&#x2F;code&gt;
methods from our Unity implementation into one place. Basically we allocate the
damage between shields and health and update them accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Finally we have our &lt;code&gt;DeathSystem&lt;&#x2F;code&gt; which removes entities when they die. It
probably looks something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetAll&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entity&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, we can tell at a glance &lt;em&gt;exactly&lt;&#x2F;em&gt; what the code does, and we can
guarantee without any configuration or magic that it won’t be executed until
after all damage has been dealt out.&lt;&#x2F;p&gt;
&lt;p&gt;As the systems operate on a “batch” of Components in order, and components are
complete standalone, then it makes race conditions unlikely. While Unity does
provide a workable solution to this issue in the Script Execution Order
settings, the ECS approach is &lt;em&gt;failsafe&lt;&#x2F;em&gt; in that it protects against race
conditions by default.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparing-the-two&quot;&gt;Comparing the two&lt;&#x2F;h2&gt;
&lt;p&gt;So I’m sure you could look at the Unity or ECS code and suggest ways they could
be improved. However, they are after all just examples for illustration, and a
bit hand wavy as I promised.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back at the two, the ECS architecture has a few more moving pieces, and
it probably results in a bit more code being written. However in my mind at
least, it provides a much simpler, more loosely coupled structure than the Unity
approach. Importantly:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;None of the Systems depend on any of the other systems&lt;&#x2F;li&gt;
&lt;li&gt;Each of the Systems contains all the necessary logic to perform their
function (recall that this also makes refactoring our code significantly
easier)&lt;&#x2F;li&gt;
&lt;li&gt;The Systems do one thing, and only one thing&lt;&#x2F;li&gt;
&lt;li&gt;The Components just hold data, they don’t do anything else&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In my mind this makes for a more flexible, more extensible architecture.
Hopefully I’ve given you some insight into why we picked our particular approach
for game architecture, and how we get it to work. I’m sure you have your own
opinions and that’s totally fine by me!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;I ran a few tests in Unity with some simple scripts to work out what was
going on here. Strangely, it seemed that the execution order of
MonoBehaviours differed on game objects depending on whether they were in the
editor hierarchy or instantiated while the game was running. This has
implications for game logic, and can create some pretty weird bugs if you
aren’t careful - actually this might be a good topic for another blog post!&lt;&#x2F;li&gt;
&lt;li&gt;In practice we store a list of structs in the DamageReceived property, which
lets the system handle multiple different damage types and effects, but I’m
trying to keep things manageable here :)&lt;&#x2F;li&gt;
&lt;li&gt;See part 2 of this series for details of the Matcher class&lt;&#x2F;li&gt;
&lt;li&gt;In practice we use Unity’s colliders and a bridging MonoBehaviour to inject
collision data into the ECS. The bridging class is very simple and can be
reused for any entity which receives collisions.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zenobit&#x27;s Unity ECS (part 2)</title>
        <published>2017-01-20T00:00:00+00:00</published>
        <updated>2017-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/zenobits-unity-ecs-part-2/"/>
        <id>https://willhart.io/post/zenobits-unity-ecs-part-2/</id>
        
        <content type="html" xml:base="https://willhart.io/post/zenobits-unity-ecs-part-2/">&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-1&quot;&gt;first part&lt;&#x2F;a&gt;, we introduced the ECS
architecture and explained a bit about why we chose to avoid Unity’s standard
architectural approach. We also set up an example, using entities with both a
&lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and an optional &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;ecs-background-2.png&quot; alt=&quot;Zenobit ECS header (size: 1176x663px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this part I’ll go into some more detail, using this example, of some specific
areas where we thought a pure ECS offered some benefits. Zentropy has provided
some value suggestions for this article, and again I’d like to point out that
this is purely our opinion, and we’d welcome discussion!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;separation-of-logic-and-data&quot;&gt;Separation of Logic and Data&lt;&#x2F;h2&gt;
&lt;p&gt;As I touched on in the first part, a major difference between a pure ECS and
Unity’s approach to ECS is that Unity encourages merging components and systems
into the same class, that is: data and logic are in the same place. This
approach works quite well for small or simple projects, however as the project
grows in complexity, I’d argue that it can quickly lead to a code base that is
tangled up and confusing.&lt;&#x2F;p&gt;
&lt;p&gt;Already we can see a potential confusion in our Health &#x2F; Shield example. We have
placed our logic in the &lt;code&gt;HealthComponent&lt;&#x2F;code&gt;, but in order to determine how much
damage to take, the &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; has to access the &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;.
However, the &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt; may also need its own logic to determine how much
damage it saves.&lt;&#x2F;p&gt;
&lt;p&gt;All of a sudden, our components are no longer standalone, and there is a
dependency between them which looks like the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;unity_dependencies-1.png&quot; alt=&quot;Interdependencies in Unity’s Approach to ECS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is usually resolved by making everything public on MonoBehaviours, or
exposing public methods, which isn’t too different to the ECS approach.&lt;&#x2F;p&gt;
&lt;p&gt;However, two issues remain. Either:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Our damage logic is spread over two (or more) files, or&lt;&#x2F;li&gt;
&lt;li&gt;Components are responsible for setting values on other components, which
violates the single responsibility principle.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the pure ECS approach, this problem is resolved by moving logic “up” a level.
The logic is placed in a &lt;code&gt;HealthSystem&lt;&#x2F;code&gt;, which reads in the component data, and
allocates the appropriate amount of damage to shield energy and current health.
The dependencies now look a little like this (assuming current shield and health
levels are accessed publicly)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;ecs_dependencies-1.png&quot; alt=&quot;Interdependencies in a pure ECS Approach&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now arguably there isn’t a huge difference between ECS and Unity here in this
simplistic example, but in my mind the ECS approach is considerably cleaner -
the logic is all in one place, and the Components don’t do &lt;em&gt;anything&lt;&#x2F;em&gt; except
hold data.&lt;&#x2F;p&gt;
&lt;p&gt;When all our logic is in standalone systems, our game itself (i.e. not just the
entities) becomes composable. For instance we can build up our game from
systems:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageSystem&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HealthRegenerationSystem&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MovementSystem&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Functionality can then be turned on or off in one place in the code base, by
adding or removing a single line where we “bootstrap” our ECS. This is much
harder to do when the logic is scattered throughout MonoBehaviours and prefabs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;managing-links-between-components&quot;&gt;Managing Links Between Components&lt;&#x2F;h2&gt;
&lt;p&gt;Writing our own ECS let us have complete control over the lifecycle of the
classes that it contains via their constructors. We can use this to provide
efficient methods for accessing either specific components on an entity, all
instances of a component type, or a subset of components.&lt;&#x2F;p&gt;
&lt;p&gt;If we wanted all Components of a given type currently in the game with Unity, we
would need to do something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;healthComps &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FindObjectsOfType&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    typeof(HealthComponent)) as HealthComponent[];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach loops through every game object and component in the scene, which
quickly becomes performance prohibitive.&lt;&#x2F;p&gt;
&lt;p&gt;In our ECS, we can do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;healthComps &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ecsEngine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComp&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Internally, our ECS approach uses a Dictionary lookup, which in the normal, best
case is &lt;code&gt;O(1)&lt;&#x2F;code&gt; - i.e. it takes the same amount of time no matter how many
Components we have.&lt;&#x2F;p&gt;
&lt;p&gt;As we have complete control over the construction of Components and Entities, we
can also trigger &lt;code&gt;Events&lt;&#x2F;code&gt; when Components are added or removed from the ECS
system.&lt;&#x2F;p&gt;
&lt;p&gt;This lets us do neat things; we can create lazily evaluated &lt;code&gt;Matcher&lt;&#x2F;code&gt; classes
that retrieve components based on a specific criteria, and only update when the
underlying ECS data changes. In our example, we can use this to track all
Entities with a &lt;code&gt;HealthComp&lt;&#x2F;code&gt; but not a &lt;code&gt;ShieldComp&lt;&#x2F;code&gt;, and be guaranteed that this
is up to date:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; field declaration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;Matcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_noShieldEntities &lt;&#x2F;span&gt;&lt;span&gt;= new Matcher()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AllOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ComponentTypes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HealthComponent&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NoneOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ComponentTypes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ShieldComponent&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These can then be accessed by calling &lt;code&gt;_noShields.GetMatches()&lt;&#x2F;code&gt;, which returns
&lt;code&gt;IEnumerable&amp;lt;EcsEntity&amp;gt;&lt;&#x2F;code&gt; and is evaluated lazily, and only if the underlying
data structure is “dirty”.&lt;&#x2F;p&gt;
&lt;p&gt;This gives us improved performance and flexibility relative to Unity’s standard
approach, but perhaps more importantly the logic for this is hidden inside the
ECS implementation, and doesn’t clutter up our Components themselves.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serialisation&quot;&gt;Serialisation&lt;&#x2F;h2&gt;
&lt;p&gt;Taking our &lt;code&gt;Health&lt;&#x2F;code&gt; and &lt;code&gt;Shield&lt;&#x2F;code&gt; entities again, lets assume there are 10 different
types of enemies. Half of them have shields, but all of them have different
shield energy and maximum health values. How do we handle this in Unity?&lt;&#x2F;p&gt;
&lt;p&gt;We could manage this with prefabs, however as we can’t use inheritance here,
this approach scales very poorly. Unity’s built in serialisation is a bit hit
and miss, but luckily there are several decent external libraries. We could load
data from file (XML, YAML or JSON), and then somehow overwrite, or manually
populate MonoBehaviours. Again this scales poorly for any sort of moderately
complex data structure and needs a fair bit of hand written logic if we want to
dynamically add or remove components.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, the ECS approach has the following structure&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;ecs_serialisation_approach.png&quot; alt=&quot;Serialising Entity Data - the ECS Way&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The key here is that we are just serialising &#x2F; deserialising data structures. As
we have complete control over the process we can determine when and how Unity’s
game objects are created, pooled or destroyed. Unity has become a &lt;em&gt;GUI&lt;&#x2F;em&gt; for our
game. It is trivial to serialise an entire Entity, or a group of Entities, load
them in and attach “display” game objects to them.&lt;&#x2F;p&gt;
&lt;p&gt;As our entire ECS is serializable and housed in a single location, saving games
suddenly becomes a lot simpler - we just serialize our ECS system to file (see
note 1).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;portability&quot;&gt;Portability&lt;&#x2F;h2&gt;
&lt;p&gt;The way our ECS is designed, we essentially use Unity as a GUI, which overlays
our game architecture. Unity does a couple of things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Handles user input,&lt;&#x2F;li&gt;
&lt;li&gt;Provide a physics engine (i.e. notifying the ECS when a collision occurs,
handling projectile ballistics, etc),&lt;&#x2F;li&gt;
&lt;li&gt;Displays the current state of the game to the player&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In specific instances, such as collision handling, or UI we use “bridging”
MonoBehaviours, which inject data from Unity methods such as &lt;code&gt;OnCollisionEnter&lt;&#x2F;code&gt;
into our ECS. These are the only Unity specific aspects of the game architecture
and are usually very simple 1-2 line methods.&lt;&#x2F;p&gt;
&lt;p&gt;In theory, this means we are less bound to the Unity ecosystem. If we decided to
move to Godot once C# support landed, we would only have to replace the
“bridging” classes and the rest of our game logic could remain almost the same
(see note 2).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;This may be a bit of stretch, but by Unity’s &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blogs.unity3d.com&#x2F;2015&#x2F;12&#x2F;23&#x2F;1k-update-calls&#x2F;&quot;&gt;own
analysis&lt;&#x2F;a&gt; (and admittedly
on iPhone builds), using Unity’s Update magic method was $5-20\times$ slower
than just calling a bare update method. This may not add more than a few
milliseconds per frame (2-18ms added with &lt;em&gt;10,000&lt;&#x2F;em&gt; &lt;code&gt;MonoBehaviour&lt;&#x2F;code&gt; instances) so
the impact is not huge, but if the MonoBehaviour’s can be avoided than that’s an
easy performance pickup. At the end of the day, why carry around the whole
MonoBehaviour or ScriptableObject baggage when in these instances the
functionality isn’t being used?&lt;&#x2F;p&gt;
&lt;p&gt;(Of course, it possible that this performance gap will decrease over time as
Unity optimises further).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;refactoring-and-adding-features&quot;&gt;Refactoring and Adding Features&lt;&#x2F;h2&gt;
&lt;p&gt;A side effect of following the single responsibility principle, is that when its
time to refactor code it becomes a lot simpler. If we want to change the way
that damage logic works, we just go to the DamageSystem and edit that file, with
no need to hunt through any other classes. This is true of both Unity and pure
ECS approaches, but as we’ve seen the Unity approach sometimes leads to logic
being spread out amongst different classes.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, adding new features becomes relatively easy. Say we want to introduce
a system which can take energy from shields and add it to health. All we need to
do is create a system that looks a little bit like our health system, runs after
it, and transfers shield energy to health.&lt;&#x2F;p&gt;
&lt;p&gt;We could of course add these same lines to our &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; in a Unity
approach, (although as noted this creates interdependencies in our components),
but under the ECS approach, we don’t have to touch any of our other code to make
these changes, which reduces the chance of introducing unwanted bugs.&lt;&#x2F;p&gt;
&lt;p&gt;One potential pitfall here is that if we add a lot of systems like this you can
see that we might end up looping through the lists of shield or health
components a lot. For very large games, perhaps this might cause unwanted
performance issues. My usual mantra here is to implement it first, then if the
profiler suggests we are spending too much time looping through components, we
can start to consolidate and otherwise optimise our systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;having-a-single-source-of-truth&quot;&gt;Having a single source of truth&lt;&#x2F;h2&gt;
&lt;p&gt;Actually, it turns out that having a single source of truth - i.e. a container
which holds all relevant information is extremely useful for certain features.
In particular I’m thinking of AI. Our in-house AI system is based on GOAP (see
note 3), and to make sensible decisions it needs to be able to efficiently query
the game state and ask a wide variety of questions. Our AI would be several
orders of magnitude more difficult to implement if we weren’t able to use our
ECS to find &#x2F; match and interrogate game state through the ECS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;its-not-all-bad-right&quot;&gt;Its not all bad, right?&lt;&#x2F;h2&gt;
&lt;p&gt;I wouldn’t say the Unity design approach doesn’t work, in fact I’ve happily used
this type of architecture on lots of other projects.&lt;&#x2F;p&gt;
&lt;p&gt;There are some definite weaknesses of our ECS approach:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A lot of our performance gains in terms of querying for Components and
Entities comes at the expense of increased memory usage&lt;&#x2F;li&gt;
&lt;li&gt;Using Unity’s physics and colliders etc requires a level of indirection to
work&lt;&#x2F;li&gt;
&lt;li&gt;The ECS approach probably requires more overall code to be written, even if
the individual methods and classes are small(er).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In our case, and despite these compromises, we felt that our custom ECS offered
a cleaner, more reusable architecture that we could apply to multiple different
game styles. Hopefully I’ve given you a bit of an insight into our reasoning.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-3&quot;&gt;third and final instalment&lt;&#x2F;a&gt; of this series,
I’m going to give an example of how we implemented a particular feature in our
ECS for our current game project so you can see how this would work “irl”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;In theory :) In practice we aren’t at this stage yet…&lt;&#x2F;li&gt;
&lt;li&gt;Again… in theory :) In practice, this is probably unlikely, but its nice to
be less dependent on one particular ecosystem.&lt;&#x2F;li&gt;
&lt;li&gt;GOAP stands for Goal Oriented Action Planning. Read more about it
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;alumni.media.mit.edu&#x2F;~jorkin&#x2F;goap.html&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zenobit&#x27;s Unity ECS (part 1)</title>
        <published>2017-01-16T00:00:00+00:00</published>
        <updated>2017-01-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/zenobits-unity-ecs-part-1/"/>
        <id>https://willhart.io/post/zenobits-unity-ecs-part-1/</id>
        
        <content type="html" xml:base="https://willhart.io/post/zenobits-unity-ecs-part-1/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-1&#x2F;ecs-background-2.png&quot; alt=&quot;Zenobit ECS header (size: 1176x663px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve recently started a collaboration with Zentropy under the name Zenobit
Studios - for now you can find us at @ZenobitStudios on Twitter if you want to
know more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Our first project was the November 2016 GitHub Game Jam, where we spent a month
creating a very basic RTS. The game wasn’t that great (and our artist went AWOL
which didn’t help), but we had a working RTS with a multilevel enemy AI by the
end of it.&lt;&#x2F;p&gt;
&lt;p&gt;For the game jam, our RTS was built on the back of an “ECS Architecture”, and I
want to describe here why we both thought that this was a good approach for game
architectural design that can be applied to many different game genres.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I should probably point out at this point that I don’t believe there is any
such thing as “the best” architecture in software. In fact, the following is
100% subjective and opinion based. Your opinion may differ, which is fine. If
you do want to chat about it, hit us up on Twitter or the comments below.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As this post turned out to be quite long, I think I’ll break it up into three
parts. In this first part I’m going to give some background on ECS
architectures, and some of the decisions which lead us to write our own. In the
second part I’m going to go into why we thought a pure (non-Unity) ECS was
worthwhile, and I’ll finish off in the third part with a practical example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-an-ecs&quot;&gt;What is an ECS?&lt;&#x2F;h2&gt;
&lt;p&gt;ECS stands for Entity Component System, which refers to an architectural
pattern. I’ll just put this here from
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity%E2%80%93component%E2%80%93system&quot;&gt;Wikipedia&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Entity-component system (ECS) is an architectural pattern … [that uses]
composition over inheritance… Every Entity consists of one or more
components which add additional behavior or functionality. Therefore, the
behavior of an entity can be changed at runtime by adding or removing
components.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words, a generic ECS system is just an approach to structuring the code
of a game which uses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Components&lt;&#x2F;strong&gt; to hold data and compose the way an Entity acts,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Entities&lt;&#x2F;strong&gt; to bundle together components, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Systems&lt;&#x2F;strong&gt; to apply game logic to the data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, an &lt;code&gt;Entity&lt;&#x2F;code&gt; can be composed by adding &lt;code&gt;Components&lt;&#x2F;code&gt; together. An
enemy could be made up from &lt;code&gt;Health&lt;&#x2F;code&gt;, &lt;code&gt;Movement&lt;&#x2F;code&gt;, and &lt;code&gt;Shield&lt;&#x2F;code&gt; components.&lt;&#x2F;p&gt;
&lt;p&gt;Various systems perform mutations on that data, (although some purists may
prefer Components to be immutable) for instance a &lt;code&gt;MovementSystem&lt;&#x2F;code&gt; might find
all the &lt;code&gt;Movement&lt;&#x2F;code&gt; Components and update them to move the entity around the game
world.&lt;&#x2F;p&gt;
&lt;p&gt;While there are many different ways to build an ECS, generally a key criteria is
that components are very loosely coupled. This means there are few links between
them, and each in theory is only responsible for its own particular area of
interest, such as tracking Health, or Shield status.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-just-use-unity-s-standard-approach&quot;&gt;Why not just use Unity’s standard approach?&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I picture you yelling at your screen. What I described above was
very similar to Unity’s standard approach of &lt;code&gt;GameObjects&lt;&#x2F;code&gt; (entities) and
&lt;code&gt;MonoBehaviours&lt;&#x2F;code&gt; (components and systems). Unity’s approach could certainly be
viewed as a brand of ECS, and in fact most of the things you can do with a
“pure” ECS you can do within Unity’s structure. However, as I hope I’ll show in
this series, doing it in plain C# is just a bit less… well, a bit less &lt;em&gt;ugly&lt;&#x2F;em&gt;
and a lot more flexible.&lt;&#x2F;p&gt;
&lt;p&gt;I’m going to take a simple example, and consider it from a number of angles
below. Say you have an enemy Entity with &lt;code&gt;Health&lt;&#x2F;code&gt; and &lt;code&gt;Shield&lt;&#x2F;code&gt; Components (or
MonoBehaviours). &lt;code&gt;Shield&lt;&#x2F;code&gt;s have &lt;code&gt;Energy&lt;&#x2F;code&gt; which reduces damage, but not every
enemy has a shield.&lt;&#x2F;p&gt;
&lt;p&gt;In the traditional Unity approach you would put the &lt;code&gt;Health&lt;&#x2F;code&gt; and &lt;code&gt;Shield&lt;&#x2F;code&gt;
components on the same &lt;code&gt;GameObject&lt;&#x2F;code&gt;, then either link them in the Inspector or
cache references to the other &lt;code&gt;MonoBehaviours&lt;&#x2F;code&gt; in the &lt;code&gt;Awake&lt;&#x2F;code&gt; or &lt;code&gt;Start&lt;&#x2F;code&gt;
methods.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caching MonoBehaviours is pretty much standard practice in Unity because
people say that GetComponent is a little slow, although its not clear that this
is still true. FindXXX on the other hand should be used with caution as it
iterates over every GameObject and Component in the scene!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the “pure” ECS approach you may have a &lt;code&gt;HealthSystem&lt;&#x2F;code&gt; and the enemies would
be represented by Entities, some of which just have a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt;, while
others have a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and a &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;. This is the composition
part both Unity and pure ECS systems offer - if the Entity has a
&lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;, then it adds the “shield behaviour”.&lt;&#x2F;p&gt;
&lt;p&gt;The Unity version might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HealthComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MaxHealth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerializeField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;ShieldComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TakeDamage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetDamage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; regeneration logic }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ShieldComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;GetDamage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; logic }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; regeneration logic }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s relatively easy to follow, however there is a dependency between the Health
and Shield logic, and the logic is spread out over two classes.&lt;&#x2F;p&gt;
&lt;p&gt;The “pure” ECS implementation on the other hand may look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The System
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;HealthSystem : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AbstractEcsSystem
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; find damage, shield energy and current health
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reduce shield energy and health as required
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set DamageReceived to 0 once handled
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The Components
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serializable&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;HealthComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AbstractEcsComponent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MaxHealth &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serializable&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;ShieldComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AbstractEcsComponent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Interestingly, we are no longer exposing public methods - all the logic is done
in Update. This reduces the “surface area” of our API, making it much easier to
debug - if something goes wrong, we generally only need to look at one method.&lt;&#x2F;p&gt;
&lt;p&gt;To replace public methods, such as weapons calling
&lt;code&gt;healthComponent.TakeDamage(4f)&lt;&#x2F;code&gt;, we now modify component data, for instance by
executing &lt;code&gt;healthComponent.DamageReceived += 4f&lt;&#x2F;code&gt;. When the system runs, it uses
these values to allocate damage.&lt;&#x2F;p&gt;
&lt;p&gt;If logic and data are separated, and each System is responsible for only doing
one thing, then its very hard to have 1,000 line mega classes. Our longest
system is 167 lines long including comments, file headers and so on, but the
majority are a lot less than 50-100 lines all up. These systems are standalone,
responsible for only one thing, located in the same place in our namespace
hierarchy, and are generally trivial to understand.&lt;&#x2F;p&gt;
&lt;p&gt;@@ Aren’t there already ECS systems?&lt;&#x2F;p&gt;
&lt;p&gt;Both @Zentropy and I (the two parts of Zenobit) were familiar with Unity, but
uncomfortable with a lot of the design decisions in the underlying framework, or
at least with the way that Unity encourages you to design your code.&lt;&#x2F;p&gt;
&lt;p&gt;We had both briefly considered other mature ECS solutions such as
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sschmid&#x2F;Entitas-CSharp&quot;&gt;Entitas&lt;&#x2F;a&gt;, however there were aspects
of most systems that we weren’t happy with and they seemed quite heavyweight for
what we were after.&lt;&#x2F;p&gt;
&lt;p&gt;We had both independently started developing our own very lightweight ECS
frameworks in plain C# before we started making games. Mine grew from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;4dce1335d05d34dfbc32d61d32e56b5b&quot;&gt;this
snippet&lt;&#x2F;a&gt;.
When we began to collaborate, we brought the best of our systems together, and
what we’ve ended up with what we think is a fairly robust, lightweight
architecture for developing games. Of course, we are only developing our second
game using the system so it’s possible we will totally change our mind in a few
months!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, I think that’s enough setup for now! In &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-2&quot;&gt;Part 2&lt;&#x2F;a&gt;
of this series, I’m going to step through some different scenarios where we
think a “pure” ECS approach provides some benefits.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A year in review (2016 game dev edition)</title>
        <published>2017-01-15T00:00:00+00:00</published>
        <updated>2017-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/a-year-in-review-2016-edition/"/>
        <id>https://willhart.io/post/a-year-in-review-2016-edition/</id>
        
        <content type="html" xml:base="https://willhart.io/post/a-year-in-review-2016-edition/">&lt;p&gt;Looking back, 2016 was a fairly big year for me. I travelled a bit, finished up
some major work projects, moved house (to a different hemisphere) and started a
PhD! I thought it might be nice to look back at the year in review for my
favourite hobby - game dev.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;game-jams&quot;&gt;Game Jams&lt;&#x2F;h2&gt;
&lt;p&gt;I try to do game jams when I can, as its a great way to test out ideas.
Obviously juggling family life and game jams can be a bit of a challenge, but I
still managed to release five games for Game Jams in 2016!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;twirlygig&quot;&gt;Twirlygig&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;twirlygig.jpg&quot; alt=&quot;A terrible game jam game (size: 551x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210127063404&#x2F;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-35&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Ludum Dare 35 Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This game was an example of what happens when you try to balance family life
with a weekend game jam! To follow on from the Button Simulator, I decided to
make another game using ReactJS. The theme of the jam was “shape shifting” and I
wanted to see if I could use React to simulate physics. Basically the idea is
there are a whole lot of shapes which swirl down towards the centre, and you
have to press keys to match the shapes before they hit the centre. Its
not (quite) the worst game I ever made.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clockwork-dragon&quot;&gt;Clockwork Dragon&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;clockwork-dragon.jpg&quot; alt=&quot;Clockwork Dragon - a game I was actually proud of (size: 731x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wilsk.itch.io&#x2F;clockwork-dragon&quot;&gt;Ludum Dare 36 Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I’m actually fairly proud of this game - I think its probably one of the best
games I’ve released to date. In this voxel adventure, you are a steam powered
dragon that flies around scaring villagers to steal their gold. Use the gold to
upgrade yourself, and follow along with the story.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;missile-commander&quot;&gt;Missile Commander&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;missile-commander.png&quot; alt=&quot;Missile Commander - a game made in about three hours (size: 596x402px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wilsk.itch.io&#x2F;missile-commander&quot;&gt;Game Dev League Artificial Intelligence Jam, itch.io link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wasn’t going to take part in this game jam, but changed my mind at the last
minute. Hence this game was made in about 2-3 hours, and it shows! Its kind of a
cross between &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;interplanetary.weebly.com&#x2F;&quot;&gt;Interplanetary&lt;&#x2F;a&gt; and just about
any artillery type game ever made. Fire off missiles from the surface of the
earth and hope to get the enemy before they get you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-eridanus-monument&quot;&gt;The Eridanus Monument&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;eridanus-monument.png&quot; alt=&quot;Eridanus Monument - my attempt at a more narrative game (size: 473x312px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wilsk.itch.io&#x2F;eridanus&quot;&gt;Game Dev League Area 51 Jam, itch.io link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This was probably the most experimental “game” I’ve made to date. Its a
hand-drawn story driven narrative game. There isn’t a whole lot of game play, so
I guess its almost semi-interactive fiction. I’m pretty proud of it, even if the
“critical reception” wasn’t great.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-game-jam-november&quot;&gt;GitHub Game Jam (November)&lt;&#x2F;h3&gt;
&lt;p&gt;I also participated in the GitHub November Game Jam, and along with Zentropy
built up a functioning RTS, and a solid entity component system framework which
I hope I’ll have more to say about later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;art&quot;&gt;“Art”&lt;&#x2F;h2&gt;
&lt;p&gt;I tinkered around quite a lot with Blender and MagicaVoxel in 2016, mostly in
the low poly style because thats about all I can manage. Here are a few things I
worked on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-random-low-poly-landscape&quot;&gt;A random low poly landscape&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;Random-Landscape-2.png&quot; alt=&quot;Low poly scene (size: 1337x746px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;some-random-medieval-game-assets&quot;&gt;Some random medieval game assets&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;medieval_assets.png&quot; alt=&quot;Some medieval game assets (size: 1536x864px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;four-seasons&quot;&gt;Four seasons&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;Seasons-Composite.png&quot; alt=&quot;Four seasons (size: 1536x618px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;camping-under-the-stars&quot;&gt;Camping under the stars&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;Scene-4.2-J.png&quot; alt=&quot;Camping under the stars (size: 1152x618px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2017&quot;&gt;2017?&lt;&#x2F;h2&gt;
&lt;p&gt;Well I’m pretty excited for 2017 both professionally and for game dev. I’m
working with Zentropy from the GitHub game jam on some new ideas and our ECS is
maturing rapidly. I’m hoping I’ll have a lot more to talk about this year, and
this time in 2018 :)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A very switchy button, LD34 Post-Mortem</title>
        <published>2015-12-20T00:00:00+00:00</published>
        <updated>2015-12-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/a-very-switchy-button-ld34-post-mortem/"/>
        <id>https://willhart.io/post/a-very-switchy-button-ld34-post-mortem/</id>
        
        <content type="html" xml:base="https://willhart.io/post/a-very-switchy-button-ld34-post-mortem/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-very-switchy-button-ld34-post-mortem&#x2F;switchy-button-ld34.png&quot; alt=&quot;Screenshot of the game in action (size: 798x602px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-34&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Play the game here&lt;&#x2F;a&gt; | &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;ludum_react_boilerplate&#x2F;tree&#x2F;ld34&quot;&gt;View the source code here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;&#x2F;h2&gt;
&lt;p&gt;I had the idea for Button Simulator, my LD34 entry, while watching a crappy
science fiction movie. The characters sat at their space ship consoles, flicking
switches and pressing buttons. There was something strangely entertaining about
the experience - the link between human and machine - a sense of power, and a
satisfaction in being able to control the world around you with just a flick of
your fingers.&lt;&#x2F;p&gt;
&lt;p&gt;I suppose its also the same little itch that DCS A-10 and its hard-core
simulator siblings scratch, or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=j6zseFi070E&quot;&gt;this mission control
desk&lt;&#x2F;a&gt;. But how to translate a
switch flicking simulation into something that was fun to play and could be
completed in a weekend?&lt;&#x2F;p&gt;
&lt;p&gt;I suppose I completed the process back to front - instead of using the theme to
generate a game idea, I used the theme to flavour the game idea I already had!
In the final days leading up to the theme announcement I took the 20 final
themes and wrote a short paragraph - a “hook” - for as many themes as I could
that set out how my game idea would fit into each theme. My hook for the
“growing” theme was:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Last year’s crop wasn’t that great,
and unfortunately we had to let Freddy go…
…from altitude.
Don’t let the crop die”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This turned out to be pretty close to the final intro text. Even if my approach
was back to front it meant that although I wasn’t ecstatic about the themes that
were announced, at least I had something ready to go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-the-game&quot;&gt;Making the game&lt;&#x2F;h2&gt;
&lt;p&gt;My last Ludum Dare entry was probably the worst thing I have ever publicly
released. I wasn’t happy with it at all, and I think it was because I didn’t
have a solid concept in mind before I started, and as such was a bit all over
the place. This time I decided to do a lot more planning and so I spent the
morning of the first day jotting down some thoughts and scribbling out the UI.
My idea was that there was a relatively old fashioned computer terminal that
controlled the growth of a crop. You had to flick switches and turn dials to
manage light, food and water, and keep the crop growing.&lt;&#x2F;p&gt;
&lt;p&gt;I had decided ahead of time to make the game using React.js and Redux. I’ve
played around with web interfaces using these technologies, but I was curious to
apply the Redux&#x2F;Flux methodology to a game. (If you aren’t aware of React&#x2F;Flux
then its worth reading up on, if nothing else as another way to approach
application design) As it turned out React was very well suited to the type of
game I made and I felt it helped me develop very rapidly and relatively bug
free. Hot reloading (i.e. when you save the source the changes get immediately
injected into the browser) is a massive productivity increase, particularly when
playing around with styles and layout.&lt;&#x2F;p&gt;
&lt;p&gt;I could probably have made more use of ES6 and javascript features, in
particular a lot of my game logic could have been simplified using a few calls
to Array.reduce(), and I should probably have used selectors for some of my UI
code, however overall I’m happy with the way the code base turned out. Would I
use React again for another LD entry? Depending on the type of game, yes I
probably would.&lt;&#x2F;p&gt;
&lt;p&gt;I used Inkscape for the graphics and Audacity to make the sounds. The sounds
effects were all bundled in a single file and I used Howler.js to treat them as
a sound sprite. I think the buttons have a really nice tactile feel to them, and
at least some of you agree.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-was-received&quot;&gt;How it was received&lt;&#x2F;h2&gt;
&lt;p&gt;Most comments have been positive, although time will tell what people have
actually rated the game!&lt;&#x2F;p&gt;
&lt;p&gt;I did wonder a bit about the difficulty level. As I made it and am aware of the
logic, I can win quite easily. However for other players (although its not meant
to be an easy game) a lot of the comments have been that its a bit confusing and
challenging. I did put in some help tucked away in one corner which explains a
lot of the mechanics (and one of the game screenshots shows the help screen),
but many players didn’t seem to find the option.&lt;&#x2F;p&gt;
&lt;p&gt;I’m a bit torn about this feedback - the “plot” of the game is that you have no
idea what you are doing, so providing any sort of help is kind of breaking that
premise. At the same time the game is meant to be fun. I think in future I’ll
make the help button a bit more prominent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;&#x2F;h2&gt;
&lt;p&gt;I’m thinking of making the game into a sort of multiplayer party game that I can
play with my mates. This could probably be done in React using RethinkDB and
websockets, however in this case I think I’ll do it in Unity as I want to try
out Forge Networking. I do want to bring a lot of the React&#x2F;Flux mentality to
the C# version though, where appropriate, particularly the idea of a single
global state - although I think I’ll discard some of the immutability Flux
favours for its state.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-34&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Play the game here&lt;&#x2F;a&gt; | &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;ludum_react_boilerplate&#x2F;tree&#x2F;ld34&quot;&gt;View the source code here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Coal powered cars?</title>
        <published>2015-05-09T00:00:00+00:00</published>
        <updated>2015-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/how-green-is-your-electric-car/"/>
        <id>https://willhart.io/post/how-green-is-your-electric-car/</id>
        
        <content type="html" xml:base="https://willhart.io/post/how-green-is-your-electric-car/">&lt;p&gt;You often see “zero emissions” plastered over the backs of electric cars, as if
the energy to run them is magically pulled from the ether. I’m curious about
some of the practical considerations for a large scale adoption of electricity
as a form of energy for road transportation, and what sort of overall impact
this may have on environmental issues.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s try to calculate (on the back of an envelope!) the impact of an imaginary,
immediate and total conversion from petrol and diesel to electric cars.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scale-of-emissions&quot;&gt;Scale of emissions&lt;&#x2F;h2&gt;
&lt;p&gt;Based on statistics released by the UK Climate Change Commission, in 2012 the UK
released about 600 mega tonnes of CO2 (MtCO2) into the atmosphere. Approximately
110Mt was related to surface transport of all kinds&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, including rail,
passenger cars, vans, and freight in trucks&#x2F;lorries&#x2F;HGVs. Private passenger
transport accounts for around 60% of transport related emissions&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; or
around 11% of total CO2 emissions&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. By comparison, electricity
generation emitted around 160MT of CO2 in the same year, or in other words about
two and a half times as much as passenger transport&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-2&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;electric-supply&quot;&gt;Electric supply&lt;&#x2F;h2&gt;
&lt;p&gt;The scale of emissions above suggests that if we were to suddenly replace all
the petrol and diesel cars in the UK with electric vehicles then we could cut
total UK emissions by about 65MtCO2 or 11%. However, in reality this is not the
case as most energy for electric cars comes from the grid…&lt;&#x2F;p&gt;
&lt;p&gt;In England in 2011, almost 80% of that energy is generated by burning fossil
fuels (the figure is less in other countries within the UK)&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Does
moving emissions from an internal combustion engine to a fossil fuel power plant
reduce total emissions at all? Let’s do the rough numbers…&lt;&#x2F;p&gt;
&lt;h2 id=&quot;calculating-the-emissions&quot;&gt;Calculating the emissions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;energy-in-fuels&quot;&gt;Energy in fuels&lt;&#x2F;h3&gt;
&lt;p&gt;Not all fuels are created equal. The reason why petrol and diesel have become so
ubiquitous is that it gives you very good bang for buck - it lets you carry
around a lot of energy in a small tank. For each kg of petrol you burn, you can
theoretically “liberate” 44MJ of energy. For coal and natural gas this value is
around 35MJ&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-5-1&quot;&gt;&lt;a href=&quot;#fn-5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Therefore to produce 44MJ of energy, you could burn 1kg of
“gasoline”, or $\frac{44}{35}=1.25kg$ of natural gas or coal.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;efficiency-of-power-sources&quot;&gt;Efficiency of power sources&lt;&#x2F;h3&gt;
&lt;p&gt;To make this a back of the envelope calculation, we’ll have to ignore
distribution and transmission efficiency and just concentrate on generation
efficiency. A typical internal combustion engine is between 25 and 45%
efficient. This means that to generate 44MJ of energy at the fly wheel (i.e.
before the mechanical losses from the transmission) then we don’t need to burn
1kg of fuel, but actually between $\frac{1}{0.45}=2.2kg$ and
$\frac{1}{0.25}=4.0kg$ of fuel.&lt;&#x2F;p&gt;
&lt;p&gt;A power plant may have higher efficiency in the range of 40-60%, meaning we have
to burn between $\frac{1.25}{0.4}=2.1kg$ and $\frac{1.25}{0.6}=3.1kg$ of fuel&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-6-1&quot;&gt;&lt;a href=&quot;#fn-6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
To be fair to petrol engines we should factor in the electric car
motor efficiency, which is less than 100%, but luckily much higher than for
petrol engines. We will assume a generous 90% efficiency, meaning that to get
44MJ of energy at the electric motor “flywheel”, we have to burn between 2.3 and
3.4kg of fuel at the power plant.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;co2-emitted-by-fuel&quot;&gt;CO2 emitted by fuel&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, we need to work out how much CO2 is emitted by burning each of these
fuel types. A simplified chemical reaction for petrol combustion is&lt;&#x2F;p&gt;
&lt;p&gt;$$ C_8 H_{18} + 12.5(O_2 + 3.76N_2) \rightarrow 8CO_2 + 9H_2O + 47N_2$$&lt;&#x2F;p&gt;
&lt;p&gt;These units are in mole, but using the atomic weight of the molecules we can
determine from this reaction that for every kg of petrol we burn, we produce
around 3kg of C02&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-7-1&quot;&gt;&lt;a href=&quot;#fn-7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This reaction assumes complete combustion and ignores CO or NOx emissions&lt;&#x2F;p&gt;
&lt;p&gt;Similar values can be worked out for coal and natural gas, but for simplicity
lets use a table which gives kg of CO2 per kg of fuel of 3.3kg&#x2F;kg for petrol,
2.8 for natural gas and 2.3 for coal&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-8-1&quot;&gt;&lt;a href=&quot;#fn-8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore to produce 44MJ of energy from petrol, we would have to release
between $2.2kg \times 3.3kg&#x2F;kg = 7.3kg$ and $4kg\times3.3kg&#x2F;kg = 13.2kg$ of CO2,
depending on the fuel type. (Diesel is typically more efficient at the cost of
higher nitrous oxides, but we’ll assume everything is petrol for now).&lt;&#x2F;p&gt;
&lt;p&gt;Using England’s split of 20.8% of power supplied by low emission sources, 29.2%
by coal and 50% by natural gas&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-2&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, we can calculate the equivalent
emissions for power plant generation at between&lt;&#x2F;p&gt;
&lt;p&gt;$$0.29 \times 2.3kg \times 2.3kg&#x2F;kg + 0.5 \times 2.3kg \times 2.8kg&#x2F;kg = 4.8kg$$&lt;&#x2F;p&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;p&gt;$$0.29 \times 3.4kg \times 2.3kg&#x2F;kg + 0.5 \times 3.4kg \times 2.8kg&#x2F;kg = 7.0kg$$&lt;&#x2F;p&gt;
&lt;p&gt;Comparing the two reveals that burning fossil fuels as opposed to fuel can
result in emissions being reduced to 53-66% of their petrol counterparts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;now-what&quot;&gt;Now what?&lt;&#x2F;h2&gt;
&lt;p&gt;In short, this pretty basic analysis tells us that if we took the 65 MTCO2e from
passenger transport and converted it all to 2011 England electric power, we
would reduce CO2 emissions to between 35 and 44 MTCO2e for passenger transport
under current power generation technology. The reduction would equate to around
5% of total emissions.&lt;&#x2F;p&gt;
&lt;p&gt;In reality, the impact of even total adoption of electric vehicles on CO2
emissions would be small to negligible under current power generation
technologies. Whilst
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.tudelft.nl&#x2F;en&#x2F;current&#x2F;latest-news&#x2F;article&#x2F;detail&#x2F;studenten-breken-wereldrecord-0-100-acceleratie-1&#x2F;&quot;&gt;electric&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;69173273&quot;&gt;vehicles&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.teslamotors.com&#x2F;en_GB&#x2F;models&quot;&gt;are&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.fiaformulae.com&#x2F;&quot;&gt;cool&lt;&#x2F;a&gt;, a far more pressing need is to develop and
commercialise new, cleaner ways of generating electrical energy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes-and-assumptions&quot;&gt;Notes and assumptions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-missing&quot;&gt;What is missing?&lt;&#x2F;h3&gt;
&lt;p&gt;Energy analysis is by definition complex, and calculation CO2 emissions and fuel
economy is even more difficult given the very wide range of factors at play&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-9-1&quot;&gt;&lt;a href=&quot;#fn-9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This analysis is based on operating emissions only - that is the emissions
required to supply the energy to move a vehicle from point A to point B. Factors
like hybrids, regenerative braking, the higher mass of electric vehicles and
potential changes to driver habits are ignored, as are the total lifetime
emissions of vehicles from digging ore out of the ground to end of life
vehicles.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, this analysis completely ignores the exotic metals electric motors
require or the problem of disposing of vast quantities of end of life electric
vehicle batteries.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;CO2 emissions by sector &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.theccc.org.uk&#x2F;charts-data&#x2F;ukemissions-by-sector&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.theccc.org.uk&#x2F;charts-data&#x2F;ukemissions-by-sector&#x2F;&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-1-2&quot;&gt;↩2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;Transport emissions by type, p23 of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;228897&#x2F;7682.pdf&quot;&gt;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;228897&#x2F;7682.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;$\frac{60% \times 110MTCO_2e}{600 MTCO_2e} = 11%$ &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;UK sources of electricity, 2010 and 2011, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;65841&#x2F;7345-elec-gen-2008-2011-et-article.pdf&quot;&gt;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;65841&#x2F;7345-elec-gen-2008-2011-et-article.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-4-2&quot;&gt;↩2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-5&quot;&gt;
&lt;p&gt;Calorific values of some fuels &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Heat_of_combustion#Heat_of_combustion_tables&quot;&gt;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Heat_of_combustion#Heat_of_combustion_tables&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-5-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-6&quot;&gt;
&lt;p&gt;See typical power plant losses and efficiency on p24 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.iea.org&#x2F;ciab&#x2F;papers&#x2F;power_generation_from_coal.pdf&quot;&gt;https:&#x2F;&#x2F;www.iea.org&#x2F;ciab&#x2F;papers&#x2F;power_generation_from_coal.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-6-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-7&quot;&gt;
&lt;p&gt;As 1kmol of $C_8 H_18$ weighs $8\times 12 + 18 \times 1 = 114kg$ and produces 8kmol of $CO_2$  weighing $8\times(12 + 2\times 16) = 352kg$ &lt;a href=&quot;#fr-7-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-8&quot;&gt;
&lt;p&gt;Specific CO2 Emission table, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.engineeringtoolbox.com&#x2F;co2-emission-fuels-d_1085.html&quot;&gt;http:&#x2F;&#x2F;www.engineeringtoolbox.com&#x2F;co2-emission-fuels-d_1085.html&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-8-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-9&quot;&gt;
&lt;p&gt;Limitations of transport CO2 emissions calculations &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.abtslogistics.co.uk&#x2F;green-logistics-resources&#x2F;d82cc048-4b92-4c2a-a014-af1eea7d76d0_CO2%20Emissions%20from%20Freight%20Transport%20-%20An%20Analysis%20of%20UK%20Data.pdf&quot;&gt;https:&#x2F;&#x2F;www.abtslogistics.co.uk&#x2F;green-logistics-resources&#x2F;d82cc048-4b92-4c2a-a014-af1eea7d76d0_CO2%20Emissions%20from%20Freight%20Transport%20-%20An%20Analysis%20of%20UK%20Data.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-9-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;section&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ludum Dare 32 Postmortem - Colour Rocket</title>
        <published>2015-04-27T00:00:00+00:00</published>
        <updated>2015-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/ludum-dare-32-postmortem-colour-rocket/"/>
        <id>https://willhart.io/post/ludum-dare-32-postmortem-colour-rocket/</id>
        
        <content type="html" xml:base="https://willhart.io/post/ludum-dare-32-postmortem-colour-rocket/">&lt;p&gt;A couple of weekends ago I participated in my first &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ludumdare.com&#x2F;&quot;&gt;Ludum
Dare&lt;&#x2F;a&gt; - LD32. The theme for the event was “&lt;em&gt;an
unconventional weapon&lt;&#x2F;em&gt;”. If you aren’t familiar, Ludum Dare is basically a
weekend long game jam where you make a game from scratch in 48 hours. In the
“compo” version you need to make all assets - art, code, music and gameplay -
within the 48 hours… oh yeah and you have to do it on your own.&lt;&#x2F;p&gt;
&lt;p&gt;My game was called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-32&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Colour
Rocket&lt;&#x2F;a&gt; and
the concept was an “infinite runner” inspired asteroid dodger, where you aim was
to guide a rocket to an enemy planet through flying asteroids, and use it to
return colour to a darkened universe.&lt;&#x2F;p&gt;
&lt;p&gt;At about 5pm on the final day of Ludum Dare, I decided I’d had enough. I put
down my keyboard and picked up my baby daughter for a cuddle. She has since
forgiven me for ignoring her for the best part of a day. This left me with a
fully functional, complete but very minimal game with only three levels. I’m
pretty happy that I was able to get that far.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;toolset&quot;&gt;Toolset&lt;&#x2F;h2&gt;
&lt;p&gt;I picked a fairly standard free toolset early on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unity to make the game,&lt;&#x2F;li&gt;
&lt;li&gt;Blender for artwork, and&lt;&#x2F;li&gt;
&lt;li&gt;Sunvox for music&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-worked&quot;&gt;What worked&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;music&quot;&gt;Music&lt;&#x2F;h3&gt;
&lt;p&gt;With the exception of one or two minor volume issues, I’m pretty happy with the
music I made. There is a different song for each menu screen or level, and
although they aren’t going to win any prizes, given its the first time I’ve
tried to make music I don’t think the songs are too horrendous.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;artwork&quot;&gt;Artwork&lt;&#x2F;h3&gt;
&lt;p&gt;The artwork was very basic low poly stuff and I quite like the look of the black and white planets before colour is returned to the universe. Its very basic as a few comments have noted, but yeah “programmer art”.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;ludum-dare-32-postmortem-colour-rocket&#x2F;ld32-colour-rocket.png&quot; alt=&quot;Programmer art at its finest (size: 900x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;&#x2F;h3&gt;
&lt;p&gt;I tried something a bit different with the player controller. The player’s
rocket is always at &lt;code&gt;(0,0,0)&lt;&#x2F;code&gt;, and the asteroids move around the player. I can’t
really say I have a logical reason for doing it this way other than it meant I
didn’t have to think about the camera or moving cleanup&#x2F;spawn regions. In the
end I think this worked ok.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-didn-t-work&quot;&gt;What didn’t work&lt;&#x2F;h2&gt;
&lt;p&gt;There were a couple of areas where the game clearly fell short. Although its
promising to think that most of these would have been easily solved if I’d spent
more time on them! In no particular order…&lt;&#x2F;p&gt;
&lt;h3 id=&quot;obstacles&quot;&gt;Obstacles&lt;&#x2F;h3&gt;
&lt;p&gt;My method for slinging asteroids towards the player was to spawn a whole lot at the back of the screen. However this lead to disconcerting “pop in” in the background as asteroids were recycled. As the asteroids were rigid bodies with collisions, it also meant that the target planet effectively carved a tunnel in to the asteroid field that would sometimes let the player travel through the whole level without touching the controls… oops!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;ludum-dare-32-postmortem-colour-rocket&#x2F;ld32-colour-rocket-2.png&quot; alt=&quot;Going through an asteroid tunnel (size: 900x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I fixed the pop in issue by running a coroutine to gradually scale asteroids up
from 0 to 1 as they were spawned in, but the difficulty and asteroid placement
proved to be a bit more difficult. I tried adding some pre-existing asteroids
which improved things a bit, but I think if I’d had more time I should have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;created some more larger static obstacles,&lt;&#x2F;li&gt;
&lt;li&gt;created more asteroid spawn points to the sides, shooting asteroids across the
player’s path&lt;&#x2F;li&gt;
&lt;li&gt;had the target planets move around instead of sitting still&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;user-feedback-and&quot;&gt;User Feedback and&lt;&#x2F;h3&gt;
&lt;p&gt;UI Many of the comments so far have been along the lines of “the controls
stopped working”. At first I thought this was a weird bug I hadn’t seen, then I
realised that it was probably related to one of the game mechanics I’d
implemented.&lt;&#x2F;p&gt;
&lt;p&gt;So that players can’t just mash the controls non-stop, the rocket has a limited
amount of fuel. The idea was to make the player chose between getting hit by an
asteroid and running out of fuel by moving too much. (Move around too much and
you lose the ability to manoeuvre).&lt;&#x2F;p&gt;
&lt;p&gt;On realising that players were thinking of a game mechanic as a big, my first
reaction was in truth a bit defensive…&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;well, it mentions fuel on the first screen and there is a fuel bar on the GUI,
so it should be obvious, right? RIGHT?!?!?!!?!“.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then I realised that the comments were actually letting me know that the game
mechanic was a bit too obscure. To be “intuitive”, every important player action
in the game needs to have visual or audio feedback.&lt;&#x2F;p&gt;
&lt;p&gt;It wasn’t enough to hope the player read three paragraphs of text, or noticed a
small fuel bar in one corner of the screen - I needed flashing text, colour or
sounds to notify the user they were about to run afoul of a crucial game
mechanic.&lt;&#x2F;p&gt;
&lt;p&gt;This is even more important in something like Ludum Dare where players may only
spend a minute or two with your game.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;&#x2F;h2&gt;
&lt;p&gt;To summarise, there were two main lessons for me from this Ludum Dare entry:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t get defensive about feedback - listen to what the players are saying,
and try to work out why they are saying it.&lt;&#x2F;li&gt;
&lt;li&gt;Audio and visual cues are critical for communicating game mechanics.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I enjoyed the weekend a lot, and I’ve been playing and enjoying some of the
other entries. Bring on the next Ludum Dare!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Switched to Ghost</title>
        <published>2015-04-27T00:00:00+00:00</published>
        <updated>2015-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/switched-to-ghost/"/>
        <id>https://willhart.io/post/switched-to-ghost/</id>
        
        <content type="html" xml:base="https://willhart.io/post/switched-to-ghost/">&lt;p&gt;I had a look at my website the other day and I realised that the last time I
posted anything was March 2014, over a year ago. Prompted by an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dailyjs.com&#x2F;2015&#x2F;04&#x2F;23&#x2F;migrating-dailyjs-to-ghost&#x2F;&quot;&gt;article on
dailyjs&lt;&#x2F;a&gt; I decided to
give &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;&quot;&gt;ghost&lt;&#x2F;a&gt; a go.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve had my eye on ghost for some time but never made the plunge as I couldn’t
work out a neat way to redirect my old static website URLs to a new ghost
instance. The dailyjs article is quite straightforward, it just uses a JSON file
to describe URL redirects and sets up listeners in an express app which contains
Ghost. My implementation is very slighlty different as it lets me use the ghost
config file to specify the base URL, which is useful for testing. The entire
code is trivial at about 20 lines.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghost &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ghost&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirects &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;redirects.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ghost&lt;&#x2F;span&gt;&lt;span&gt;({config: __dirname + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;ghost-config.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghostServer&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghostServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rootApp&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirects&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Redirecting %s to %s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newUrl&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghostServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My &lt;code&gt;redirects.json&lt;&#x2F;code&gt; file looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;charlieplexing-leds-with-arduino.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.williamhart.info&#x2F;charlieplexing-leds-with-arduino&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;....&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m not setting myself a target or anything like that but going back to a CMS
should make it easier to post new articles when something comes to mind (for
instance updating my old Ember tutorial which is past overdue!)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I’ve since noticed that disqus comments haven’t properly migrated
over. I’ve mapped them in the disqus interface using a CSV file but they don’t
appear on the post. I’ll keep investigating.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Python static site generator</title>
        <published>2015-04-26T00:00:00+00:00</published>
        <updated>2015-04-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/python-static-site-generator/"/>
        <id>https://willhart.io/post/python-static-site-generator/</id>
        
        <content type="html" xml:base="https://willhart.io/post/python-static-site-generator/">&lt;h2 id=&quot;about&quot;&gt;About&lt;&#x2F;h2&gt;
&lt;p&gt;The following code is described in &lt;a href=&quot;&#x2F;post&#x2F;a-simple-static-site-generator-in-python&quot;&gt;this blog
post&lt;&#x2F;a&gt;. It is available under the MIT
license. You can also see the code &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;9609188&quot;&gt;as a
gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Free to use under the MIT license
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Builds a static site from a list of Markdown source files. The source
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;files should have the same directory structure as the desired output.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Files are rendered using Markdown2 and can declare metadata variables:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    ---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    template: index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    title: My Title
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    ---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # your makdown doc from here on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Site templates are stored in the `templates` folder and should be Jinja2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;templates. Apart from the `template` meta variable in markdown documents, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;any variables supplied in the Markdown meta will be available in the 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;template under the same name. The variable `title` given above can therefore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;be accessed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;The static site will be exported to the `build` directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;jinja2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Environment, FileSystemLoader, TemplateNotFound
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;markdown2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# include additional markdown 2 extras here (e.g. tables, footnotes etc)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MARKDOWN_EXTRAS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# folders that should be copied from your `src` directory to the `build` directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STATIC_DIRS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;files_with_extension&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ext&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Gets all files in the given directory with the given extension
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;listdir&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span&gt;(ext)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;copy_directory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Copies all the contents from the source directory to the output directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Copying &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copytree&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;OSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; There was an error copying the files from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_templates&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Compiles all the templates in the template directory and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    returns a dictionary of Jinja2 `Template` objects with the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    file names as the keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FileSystemLoader&lt;&#x2F;span&gt;&lt;span&gt;(path))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build_directory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_path&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Takes all the *.md files in the given directory, builds them into
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    HTML and renders them using the Jinja templates. The rendered markdown
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    is available in the Jinja templates as the `content` variable.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    ::warning:: There can only be one `src` folder in the path, as the script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    directly replaces `src` with `build` once to find the output path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Looking for Markdown files in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(input_path)
&lt;&#x2F;span&gt;&lt;span&gt;    files = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;files_with_extension&lt;&#x2F;span&gt;&lt;span&gt;(input_path, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    op_dir = input_path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span&gt;(op_dir):
&lt;&#x2F;span&gt;&lt;span&gt;        os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;        os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt;(op_dir, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0o777&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;files:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Converting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ip_path = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(input_path, f)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(ip_path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;ip:
&lt;&#x2F;span&gt;&lt;span&gt;            raw_html = markdown2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;(ip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extras&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MARKDOWN_EXTRAS&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            template = raw_html.metadata[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;KeyError:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WARNING: No template specified for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, using index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span&gt;            template = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            tpl = templates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_template&lt;&#x2F;span&gt;&lt;span&gt;(template)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;TemplateNotFound:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to locate the template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; for file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. Aborting&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(template, f))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        context = raw_html.metadata
&lt;&#x2F;span&gt;&lt;span&gt;        context[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = raw_html
&lt;&#x2F;span&gt;&lt;span&gt;        result = tpl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(context)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        op_path = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(op_dir, f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writing to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(op_path)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(op_path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;op:
&lt;&#x2F;span&gt;&lt;span&gt;            op.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; Rendered files at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(ip_path, op_path)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Folder complete&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build_site&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template_dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Gets all the markdown files in the `src` directory, renders them using the template
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    given in metadata (or `index.html`) if no template given, and then throws them in the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    same directory structure in the `build` folder.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Additionally everything in the `templates&#x2F;static` folder is copied to `build&#x2F;static`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# delete the old build
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;clean:
&lt;&#x2F;span&gt;&lt;span&gt;        op_dir = ip_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cleaning out old files from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rmtree&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; ERROR - Unable to clean the old build directory&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;            os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt;(op_dir, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0o777&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Created output directory&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; ERROR - Unable to create a directory at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# copy the `templates&#x2F;static` folder to `build&#x2F;static`
&lt;&#x2F;span&gt;&lt;span&gt;    src = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(template_dir, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    dst = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copy_directory&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# copy all the static files
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;sd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STATIC_DIRS&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        src = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir, sd)
&lt;&#x2F;span&gt;&lt;span&gt;        dst = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), sd)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copy_directory&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# load the templates
&lt;&#x2F;span&gt;&lt;span&gt;    templates = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_templates&lt;&#x2F;span&gt;&lt;span&gt;(template_dir)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Do the root directory
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_directory&lt;&#x2F;span&gt;&lt;span&gt;(templates, ip_dir)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# get all the source directories
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;path, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;walk&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_directory&lt;&#x2F;span&gt;&lt;span&gt;(templates, os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(path, d))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Site build complete&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# get the input and template dir paths
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span&gt;= os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getcwd&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    template_dir = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span&gt;= os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build the site
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_site&lt;&#x2F;span&gt;&lt;span&gt;(template_dir, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A simple static site generator in Python</title>
        <published>2014-03-18T00:00:00+00:00</published>
        <updated>2014-03-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/a-simple-static-site-generator-in-python/"/>
        <id>https://willhart.io/post/a-simple-static-site-generator-in-python/</id>
        
        <content type="html" xml:base="https://willhart.io/post/a-simple-static-site-generator-in-python/">&lt;h2 id=&quot;what-is-a-static-site-generator&quot;&gt;What is a static site generator?&lt;&#x2F;h2&gt;
&lt;p&gt;A static site generator is a bit of code which takes input files, for instance
from Markdown files or from another source on the web, and builds a website from
it. For it to be static, the website is usually just plain HTML. Static site
generators are handy because they remove a lot of the complexity of using a
server based site such as Wordpress or a custom Django blog, and instead let you
just focus on the content. They are better than traditional HTML web pages
because they let you apply templates to style your HTML pages just like any
other server based site.&lt;&#x2F;p&gt;
&lt;p&gt;When I needed to make a manual for the data acquisition system I have been
building, I decided I wanted to write the content in Markdown and use a static
site generator to build the web pages for me. These pages (when ready) can then
be dropped onto a web server or github pages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-make-my-own&quot;&gt;Why make my own?&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve used &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.getpelican.com&#x2F;&quot;&gt;Pelican&lt;&#x2F;a&gt; on a number of sites including
the one you are browsing at the minute, and have found it to be pretty good. Yet
as the software matures they are splintering the code base, putting plugins in
one repository, themes in another and the core site generator in a third. This
means I have to install and maintain three different repositories and bits of
software on my computer to generate a static site. This is a pain. It also means
that since I got it working on my Linux install and haven’t really been bothered
to get it working on my Windows machine, every time I want to update the site I
have to reboot into Linux.&lt;&#x2F;p&gt;
&lt;p&gt;So for the manual I looked around and there are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;staticsitegenerators.net&#x2F;&quot;&gt;a lot of different site
generator options&lt;&#x2F;a&gt; - over 230 to be exact. A
lot of the more popular ones have all the bells and whistles, plugins, command
line tools, test servers, different input formats, you name it. At the end of
the day all I want to do is to take a bunch of Markdown files, convert them into
HTML and spit out a website with the same directory structure as my input files.
Rather than download 230 tools until I found one that worked I just decided to
bake my own.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The source code is available (MIT licensed) &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;9609188&quot;&gt;in this
gist&lt;&#x2F;a&gt; or &lt;a href=&quot;&#x2F;python-static-site-generator&quot;&gt;on my
website&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The generator uses &lt;code&gt;Jinja2&lt;&#x2F;code&gt; for templates and &lt;code&gt;Markdown2&lt;&#x2F;code&gt; for rendering
Markdown. It uses the &lt;code&gt;metadata&lt;&#x2F;code&gt; Markdown extra so that you can specify the
template and any context variables for the template in your Markdown. A Markdown
document with metadata could look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;background-color:#4f5b66;color:#c0c5ce;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;title: My cool article
&lt;&#x2F;span&gt;&lt;span&gt;keywords: article, cool, my, python, ftw
&lt;&#x2F;span&gt;&lt;span&gt;template: index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;# This is a Markdown document
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;There are many like it but this is mine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it - normal Markdown for the most part. If you don’t specify a template in
the metadata then &lt;code&gt;index.html&lt;&#x2F;code&gt; will be used and if you haven’t got an
&lt;code&gt;index.html&lt;&#x2F;code&gt; in your templates folder the script gives up and dies. The
generator relies on a set directory structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;root
&lt;&#x2F;span&gt;&lt;span&gt; |----src
&lt;&#x2F;span&gt;&lt;span&gt; |     |---- # your markdown files in here in any directory structure you like
&lt;&#x2F;span&gt;&lt;span&gt; | 
&lt;&#x2F;span&gt;&lt;span&gt; |----templates
&lt;&#x2F;span&gt;&lt;span&gt; |     |---- # your Jinja2 templates go here
&lt;&#x2F;span&gt;&lt;span&gt; |     |----static
&lt;&#x2F;span&gt;&lt;span&gt; |     |    |---- # CSS files, javascript, etc go in the static folder
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you run the generator it converts all the Markdown files in the &lt;code&gt;src&lt;&#x2F;code&gt;
directory into HTML, applies the correct template from the templates folder and
puts it all in the &lt;code&gt;output&lt;&#x2F;code&gt; folder. It copies the &lt;code&gt;static&lt;&#x2F;code&gt; directory to build as
well so you have your CSS and javascript.&lt;&#x2F;p&gt;
&lt;p&gt;This approach makes it really easy to link between files or insert images. All
you have to do is write the Markdown as you normally would. I add an images
folder to the src folder and throw all my images in there. By setting the
&lt;code&gt;STATIC_DIRS&lt;&#x2F;code&gt; variable in the script I can ensure the images get copied over to
the build directory.&lt;&#x2F;p&gt;
&lt;p&gt;To build a site, assuming you have downloaded the script as &lt;code&gt;build.py&lt;&#x2F;code&gt; you just
run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python build.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reducing online abuse through sentiment analysis</title>
        <published>2014-01-27T00:00:00+00:00</published>
        <updated>2014-01-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/reducing-online-abuse-through-sentiment-analysis/"/>
        <id>https://willhart.io/post/reducing-online-abuse-through-sentiment-analysis/</id>
        
        <content type="html" xml:base="https://willhart.io/post/reducing-online-abuse-through-sentiment-analysis/">&lt;h2 id=&quot;cleaning-up-twitter&quot;&gt;Cleaning up Twitter&lt;&#x2F;h2&gt;
&lt;p&gt;Recently the issue of on-line abuse has received a lot of play time in the news.
In the UK several prominent female figures were sent death threats through
Twitter after they campaigned to have a female (other than the Queen) on a UK
bank note. Articles such as this one by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.psmag.com&#x2F;navigation&#x2F;health-and-behavior&#x2F;women-arent-welcome-internet-72170&#x2F;&quot;&gt;Pacific Standard
Magazine&lt;&#x2F;a&gt;
present a chilling picture of the state of on-line media and its treatment of
women, and the lack of a clear policy from law enforcement agencies. As a result
of the UK episode two people were arrested and jailed, however many more escaped
without penalty.&lt;&#x2F;p&gt;
&lt;p&gt;The explosion of on-line media has generated a range of compelling, complex and
large scale issues that we have only slowly begun to adapt to. For instance, how
much should Twitter and other social media outlets be required to police what
goes on using their services? In the past phone companies were not held to
account for what people said over the phone lines. However tweets and the
facebook posts are both public and persistent. Does this impose a new burden of
responsibility for these companies? And if there is, what can they actually do
about it?&lt;&#x2F;p&gt;
&lt;p&gt;From wild supposition I would imagine that you can divide the abusers into two
different groups. The first is those who are doing it for “a bit of a laugh”,
without considering the impact it has on the victim. The second group are
potentially conducting this behaviour as as symptom of wider social or mental
issues. The behaviour of the first group is probably open to influence, through
making them aware that what they are doing has both social and legal
consequences. However, the second category of abuser is unlikely to be managed
through actions undertaken by Twitter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-be-done&quot;&gt;What can be done?&lt;&#x2F;h2&gt;
&lt;p&gt;From a technical standpoint, one possible way to “jolt” the first group into
modifying their behaviour is through a visual cue in the browser. Something that
alerts the user if the tweet they have typed (and are about to “send”) appears
to be abusive. For instance, the message could read:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING - the message you have typed appears to be abusive. Your IP address
has been logged and on-line abuse can be a criminal offence.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Upon seeing a message like this, the casual abuser could hopefully be prevented
from hitting the “send” button.&lt;&#x2F;p&gt;
&lt;p&gt;Determining if a tweet is “good” or “bad” falls under a the heading of a
“classification problem”. In these problems a computer must categorise a data
point, usually based on a small and finite number of possible states. In the
case of natural language (i.e. text), this technique is frequently known as
“sentiment analysis”, and is supposedly used by business such as Amazon to
detect the tone of reviews written on their site. This involves an algorithm
which looks over a sentence or slab of text, and tries to work out if the mood
of the text is positive or negative based on the prevalence of certain words or
word patterns. In the remainder of this article I’ll attempt to build a
classifying algorithm for tweets, and see if it could have applicability to
“cleaning up Twitter”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sentiment-analysis&quot;&gt;Sentiment analysis&lt;&#x2F;h2&gt;
&lt;p&gt;The basic approach is often quite simple:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Count the number of times words appear in the text&lt;&#x2F;li&gt;
&lt;li&gt;Work out which words are more common in good or bad text and see if these are
present in our text&lt;&#x2F;li&gt;
&lt;li&gt;See if there are more good or bad words in our text&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The first part involves some basic string manipulation, and is often referred to
as “vectorisation” of text. For short sentences like Tweets (with 160
characters) this would be quite easy to do. One complication may be that the use
of abbreviations and “text speak” (or whatever the kids are calling it these
days) would mean that the number of words that would need to be tracked as good
or bad would grow.&lt;&#x2F;p&gt;
&lt;p&gt;A number of different rules can be applied to perform steps 2 and 3. The most
common of these use some sort of probability theory - for instance the
probability that the word “LeBron” will appear in a tweet if it is about the NBA
can be calculated. Some sort of formula can then be calculated to determine how
likely it is that a tweet is good or bad based on this probabilities. This type
of technique, as we shall see, is usually referred to as some form of &lt;em&gt;Bayesian
classification&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classifying-tweets&quot;&gt;Classifying tweets&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;approach&quot;&gt;Approach&lt;&#x2F;h3&gt;
&lt;p&gt;To perform this task, I decided to use a &lt;em&gt;Naive Bayes&lt;&#x2F;em&gt; approach, which makes
some simplifying assumptions and uses &lt;em&gt;Bayes Rule&lt;&#x2F;em&gt; to mathematically formulate
the problem. In words, we are trying to answer the following question:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the probability the tweet is bad given it has the following words in
it: ….&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The word &lt;em&gt;given&lt;&#x2F;em&gt; has a specific role in probability - for instance
$P(apple|fruit)$ means “the probability we have an apple given we have a fruit”.
If you don’t remember your high school probability - if we are holding an
object, the probability it is an apple rather than any of the other objects in
the universe is, for instance, 0.00001%. However if we are told that what we are
holding is a fruit, the probability that object we are holding is an apple given
we are holding a fruit becomes much higher, say 30% if my fruit bowl is anything
to go by.&lt;&#x2F;p&gt;
&lt;p&gt;The Naive Bayes approach relies on some simple rules to formulate our word
problem above. into mathematical symbols. This could look something like the
following (from the &lt;code&gt;scikit-learn&lt;&#x2F;code&gt; documentation):&lt;&#x2F;p&gt;
&lt;p&gt;$$P(y|x_1, …, x_n) = \frac{P(y)\Pi_{i=1}^nP(x_i|y)}{P(x_1, …, x_n)}$$
​&lt;&#x2F;p&gt;
&lt;p&gt;Where &lt;code&gt;y&lt;&#x2F;code&gt; is the “good”&#x2F;“bad” classification and &lt;code&gt;x&lt;&#x2F;code&gt; variables are the words in
the tweet.&lt;&#x2F;p&gt;
&lt;p&gt;If this is gibberish to you, don’t despair its not really necessary to
understand the maths in detail. All this is saying is that to work out if the
tweet is bad - given the presence of a whole bunch of words - we multiply
together the probability that each of the words is present given the tweet is
known to be bad - $\Pi_{i=1}^nP(x_i|y)$. For instance, words such as &lt;code&gt;the&lt;&#x2F;code&gt; and
&lt;code&gt;you&lt;&#x2F;code&gt; may be equally likely to be present in good or bad tweets, whilst other
words are much more likely to be present in bad tweets alone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;&#x2F;h3&gt;
&lt;p&gt;If our tweet contains the words “Chocolate tastes great”, then the mathematical
formulation would become:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(bad|chocolate,tastes,great)=\frac{P(bad)\times P(chocolate|bad)\times P(tastes|bad)\times P(great|bad)}{P(chocolate,tastes,great)}$$&lt;&#x2F;p&gt;
&lt;p&gt;Where $P(chocolate)$ is the probability the tweet contains the word “chocolate”.
The probability the tweet is good would be given by:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(good|chocolate,tastes,great)=\frac{P(good)\times P(chocolate|good)\times P(tastes|good)\times P(great|good)}{P(chocolate,tastes,great)}$$&lt;&#x2F;p&gt;
&lt;p&gt;To work out if the tweet is good or bad, we can just compare which of these
probability is greater, e.g.&lt;&#x2F;p&gt;
&lt;p&gt;$$P(good|chocolate,tastes,great) &amp;gt; P(bad|chocolate,tastes,great)$$&lt;&#x2F;p&gt;
&lt;p&gt;As the denominator of the fraction is the same on both probabilities, we only
need to compare the top lines of the fraction.&lt;&#x2F;p&gt;
&lt;p&gt;I tend to code in Python given the wide range of libraries available for
scientific computing. Classification problems are no exception, as Python’s
&lt;code&gt;scikit-learn&lt;&#x2F;code&gt; includes Naive Bayes functionality based on the mathematical
formulation above. &lt;code&gt;scikit-learn&lt;&#x2F;code&gt; can be installed by typing into the command
line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install scipy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install scikit-learn
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;On Windows I’ve found it easier to use a Python installation such as WinPython
for these kinds of tasks as pip sometimes seems to struggle with building
packages on Windows. On Linux the above should work without a hitch.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;building-a-probability-matrix&quot;&gt;Building a probability matrix&lt;&#x2F;h3&gt;
&lt;p&gt;As we can see from the slightly horrible maths expression we used above, a Naive
Bayes just multiplies together a whole bunch of probabilities. This problem can
be made much easier for computers if we pre-build our probabilities, a process
known as &lt;em&gt;training&lt;&#x2F;em&gt; our algorithm. This requires a data set of known results - a
“training set” - which helps us build a probability matrix. This has the likely
outcomes (good&#x2F;bad tweet) as rows and the recorded words as columns. The values
in the matrix indicate the conditional probabilities - the chance the word is in
the tweet if it is either good or bad. For instance the following simplified
matrix could exist to determine if a tweet is related to the Star Wars movies:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;|---------|-------|------|
&lt;&#x2F;span&gt;&lt;span&gt;| Word    |  Bad  | Good |
&lt;&#x2F;span&gt;&lt;span&gt;|---------|-------|------|
&lt;&#x2F;span&gt;&lt;span&gt;| Wookie  | 0.56  | 0.03 | 
&lt;&#x2F;span&gt;&lt;span&gt;| Star    | 0.75  | 0.19 |
&lt;&#x2F;span&gt;&lt;span&gt;| Wars    | 0.79  | 0.32 |
&lt;&#x2F;span&gt;&lt;span&gt;| Ireland | 0.04  | 0.13 |
&lt;&#x2F;span&gt;&lt;span&gt;|---------|-------|------|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reading across, we can see that the probability the tweet contains the word
“wookie” given it is bad (i.e. related to Star Wars) is 0.56 or 56%. This matrix
is quite small, and in a real life situation would likely contain thousands of
columns. Storing and traversing this efficiently is quite a complex task!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-does-a-training-data-set-look-like&quot;&gt;What does a training data set look like?&lt;&#x2F;h3&gt;
&lt;p&gt;To train our Naive Bayes classifier we need some kind of learning data set. This
would contain as many tweets as we could find and a flag to indicate which of
these is considered “bad”. As I don’t really want to upload and work with a data
set filled with despicable words and phrases, we will continue with our example
of detecting if our tweets are related to the Star Wars movies. For instance the
following (made up) tweets are considered Star Wars related:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Luke Skywalker is not MY father&lt;br &#x2F;&gt;
Darth Vader spotted in the Dagobah system&lt;br &#x2F;&gt;
My Jedi mind tricks are amazing - just got a pay rise&lt;br &#x2F;&gt;
Episode 1 is horrendous&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Whilst the following would not be related:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;My coffee tastes like bilge water&lt;br &#x2F;&gt;
It’s raining cats and dogs&lt;br &#x2F;&gt;
Sometimes I look at the stars and cry&lt;br &#x2F;&gt;
New satellites are taking war to the stars&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;From looking at some of these made up examples, it is clear that this problem is
more difficult than first thought. For instance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Should the tweet about “Jedi mind tricks” be considered to be about Star Wars?
Its referring to Star Wars but is not directly related&lt;&#x2F;li&gt;
&lt;li&gt;without context, how do we know if “Episode 1 is horrendous” is Star Wars
based?&lt;&#x2F;li&gt;
&lt;li&gt;Other tweets such as the last one talk about “star” and “wars” but are not
related to “Star Wars” - only by reading the context and proximity of words
can we work out whether this tweet should count&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a weakness of the “bag of words” approach we are using here, and can
easily lead to “false positives” - where we incorrectly identify a tweet as
“Star Warsy” - or “false negatives” - where we say a tweet is not related to
Star Wars when it is. Whilst a percentage of false positives is probably
unavoidable, the objective is to improve the accuracy as much as possible so
that these false classifications are the exception rather than the rule. In
general a larger training dataset will make the classifier more likely to
correctly group our tweets.&lt;&#x2F;p&gt;
&lt;p&gt;The training set should be as large as possible but also as close to “reality”
as possible. For instance, a review of the equations above show that the final
classification is also dependent on the probability that a tweet is good or bad&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$P(y)$. This means that we should ensure the dataset is representative of real
life data - if we increase the proportion of bad tweets in our training dataset
then we increase the likelihood the algorithm will classify a tweet as bad.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gathering-the-data&quot;&gt;Gathering the data&lt;&#x2F;h3&gt;
&lt;p&gt;In a real life situation we would probably need to gather thousands of tweets,
manually classify each one and then split this data into training and testing
data sets. This task would be quite time intensive. Luckily for a demonstration
like this we can create a basic twitter API script in Python to do a good
approximation of this task for us. There are quite a few different twitter APIs
written in Python, but the one that seemed to work the best for me was &lt;code&gt;tweepy&lt;&#x2F;code&gt;. I
installed this in the usual way (&lt;code&gt;pip install tweepy&lt;&#x2F;code&gt;) and then wrote some very
simple code to search for tweets.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tweepy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;API &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;TweepyApi, OAuthHandler
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_tweets&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    auth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OAuthHandler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.consumer_key,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.consumer_secret
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    auth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_access_token&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.access_token_key,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.access_token_secret
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;api = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TweepyApi&lt;&#x2F;span&gt;&lt;span&gt;(auth)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;result = api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt;=search, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;=count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;en&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[x.text.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ascii&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;result]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;MY_SETTINGS&lt;&#x2F;code&gt; is a dictionary I imported from another file with my API
credentials - so that they are hidden from github. To get 20 tweets about star
wars, I can run the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;star_wars_tweets = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search_tweets&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;star wars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes care of the bad tweets. To get the “good” tweets, we need a wide
sampling of random tweets. I played around with the streaming &lt;code&gt;sample()&lt;&#x2F;code&gt; API but
found that no matter what I did it denied my credentials - maybe I’m missing
something obvious? In the end I just decided to get some tweets for a few
unrelated topics such as “emberjs”, “nba”, “superbowl”, “science” and “bieber”.
Whilst this data set will be definition be incomplete (and reduce accuracy) its
a simple way to get enough data for a proof of concept.&lt;&#x2F;p&gt;
&lt;p&gt;By wrapping this code in a class and adding some helper functions I was able to
generate several hundred good tweets and 200 bad tweets in very short order. I
could repeat this process (after a short break to allow new tweets to
accumulate) to get another bunch of test data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-the-classifier&quot;&gt;Building the classifier&lt;&#x2F;h3&gt;
&lt;p&gt;The next step was to build the classifier itself. Lets jump straight into some
code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sklearn.feature_extraction.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;CountVectorizer, TfidfTransformer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sklearn.naive_bayes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;MultinomialNB
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expected&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Teaches the classifier based on the data set passed in the constructor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# use a utility function to load the data set and expected results (0 = good, 1 = bad)
&lt;&#x2F;span&gt;&lt;span&gt;    raw_data, expected = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load_dataset&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# STEP 1: vectorise the text
&lt;&#x2F;span&gt;&lt;span&gt;    vectoriser = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CountVectorizer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lowercase&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip_accents&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unicode&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.vectoriser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit_transform&lt;&#x2F;span&gt;&lt;span&gt;(raw_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# STEP 2: Apply &amp;quot;Term Frequency times Inverse Document Frequency&amp;quot; methodology
&lt;&#x2F;span&gt;&lt;span&gt;    transformer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TfidfTransformer&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transformer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit_transform&lt;&#x2F;span&gt;&lt;span&gt;(res)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# STEP 3: use a multinomial classifier to generate probabilities
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.classifier = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MultinomialNB&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit&lt;&#x2F;span&gt;&lt;span&gt;(res, expected)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;scikit-learn&lt;&#x2F;code&gt;, building a classifier is very simple, and only three main
steps were required.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We ‘vectorise’ the text using a &lt;code&gt;CountVectorizer&lt;&#x2F;code&gt;. In English this means that
we count the number of times each word appears in the tweets and create a
dictionary with the word as a key and the count as the value.&lt;&#x2F;li&gt;
&lt;li&gt;We ‘transform’ the data using the &lt;code&gt;TfidfTransformer&lt;&#x2F;code&gt;. This is a useful
operation to apply for text analysis - it basically accounts for the fact
that words will be more frequent in longer tweets, and some words are popular
in both “good” and “bad” tweets. Clearly the length issue is not too much of
a problem with tweets given the character limit, but the “idf” part (Inverse
Document Frequency) reduces the impact of words that are common in both types
of tweets.&lt;&#x2F;li&gt;
&lt;li&gt;We train the classifier using a &lt;code&gt;MultinomialNB&lt;&#x2F;code&gt; (Multinomial Naive Bayes)
classifer. This uses our training set to calculate the probability table we
discussed earlier.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;code&gt;load_dataset()&lt;&#x2F;code&gt; method simply takes a text file and generates a list, with
each item being a tweet or a 0&#x2F;1 indicating if it is good or bad. The &lt;code&gt;expected&lt;&#x2F;code&gt;
variable is a &lt;code&gt;numpy&lt;&#x2F;code&gt; array. It is possible to combine the three steps into a
single &lt;code&gt;Pipeline&lt;&#x2F;code&gt;, however I found that it was easier to implement
&lt;code&gt;load_dataset&lt;&#x2F;code&gt; as a generator when I did not - making it easier to parse larger
files.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-the-classifier&quot;&gt;Testing the classifier&lt;&#x2F;h3&gt;
&lt;p&gt;With these 20 or so lines we have built a Naive Bayes classifier. We can test
the classifier (once trained) on a single tweet by doing the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A tweet about Star Wars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting together a quick script made it simple to gather the training and test
data, train the classifier and then run the test data, displaying results.
Running this four times I got:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Tested 120 tweets, got 102 correct (85%)
&lt;&#x2F;span&gt;&lt;span&gt;Tested 120 tweets, got 109 correct (91%)
&lt;&#x2F;span&gt;&lt;span&gt;Tested 120 tweets, got 117 correct (98%)
&lt;&#x2F;span&gt;&lt;span&gt;Tested 120 tweets, got 113 correct (94%)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The number presumably improved where there were more similar tweets in the two
datasets (i.e. if I ran the commands in quick succession then there was more
duplication between the test and training set and hence a higher accuracy).
Despite this, 85-90% seems to be a fairly good accuracy with such a small
training set.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;validating-tweets&quot;&gt;Validating tweets&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;client-side&quot;&gt;Client side?&lt;&#x2F;h3&gt;
&lt;p&gt;Having demonstrated that we can (with relatively good accuracy) classify Star
Wars tweets using Python and &lt;code&gt;scikit-learn&lt;&#x2F;code&gt;, we need to find a way that it could
be integrated with Twitter. One option would be to use a javascript client side
library that would test the tweet as it was typed. This javascript would
undertake the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;“Vectorise” the tweet, breaking into words and counting occurrences&lt;&#x2F;li&gt;
&lt;li&gt;Use a static probability matrix, multiplying the required values to generate
a probability of “good” (!$P(good)$!) and a probability of “bad” $P(bad)$&lt;&#x2F;li&gt;
&lt;li&gt;If $P(good) &amp;gt;= P(bad)$ then the tweet is good, and conversely if $P(bad) &amp;gt;
P(good)$ then the tweet is bad&lt;&#x2F;li&gt;
&lt;li&gt;Display a warning if the tweet is bad&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We can access the probability matrix generated by &lt;code&gt;scikit-learn&lt;&#x2F;code&gt; to save to file
by running&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;classifier.feature_log_prob_
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The big issue here is that for our test simple dataset this array was 2 rows,
773 columns. This was obtained by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;classifier.feature_log_prob_.shape
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once our matrix is stored in an ASCII encoded file, we can estimate how much
download bandwidth it would take up. Assuming 1 byte per character and with each
probability having a length of 12 bytes including punctuation, the simple matrix
generated from our training set above gives us a file size of around 20kB:&lt;&#x2F;p&gt;
&lt;p&gt;$$1\text{ byte}\times 12\text{ characters}\times 2\text{ rows}\times 773\text{ columns} = 18,552\text{ bytes}$$&lt;&#x2F;p&gt;
&lt;p&gt;To perform this operation client side, we would therefore need to download at
least 20kB of probability matrix. Given the emphasis placed on minimising
download amounts, this makes client side validation unlikely to be viable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;server-side&quot;&gt;Server side&lt;&#x2F;h3&gt;
&lt;p&gt;Another approach would be to use a simple web service approach, where the tweet
could be periodically sent to the server and analysed, and the web service could
return “0” if the tweet is classified as good, or “1” if the tweet is bad. This
is pretty similar to the spam detection services offered by companies such as
Askimet. In Python, something like this is very implemented with one of the many
light weight web frameworks such as Tornado or Flask. A flask app which
performed this could be as simple as the following (where the &lt;code&gt;TweetClassifier&lt;&#x2F;code&gt; is
a class implementing our classification code above):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask, request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask_cors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cross_origin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tweet_classifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;TweetClassifier
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;classifier = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TweetClassifier&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isfile&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;train_data.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;):
&lt;&#x2F;span&gt;&lt;span&gt;    classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetch_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;train_data.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;methods&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cross_origin&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_tweet&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    tweet = request.args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tweet&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classify&lt;&#x2F;span&gt;&lt;span&gt;(tweet))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If this was saved in a file called &lt;code&gt;run_server.py&lt;&#x2F;code&gt;, setting up the server would be
as simple as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;python run_server.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code above would set up a &lt;code&gt;route&lt;&#x2F;code&gt;, or a “web page” which would answer &lt;code&gt;GET&lt;&#x2F;code&gt;
requests to the url &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; (e.g. &lt;code&gt;http:&#x2F;&#x2F;127.0.0.1&#x2F;&lt;&#x2F;code&gt;) and return a response with
&lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt;. A simple &lt;code&gt;index.html&lt;&#x2F;code&gt; page (assuming the server is running at
&lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;) would look like the following, using jQuery for the AJAX request:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Check a tweet&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You are an awesome person&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;check_phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Check&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;2.1.0&#x2F;jquery.min.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#check_phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(e) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preventDefault&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ajax&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;                    type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                    url: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                    data: {
&lt;&#x2F;span&gt;&lt;span&gt;                        tweet: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(data, status, xhr) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Visiting the &lt;code&gt;index.html&lt;&#x2F;code&gt; page shows an input box. We can type something in the
box, click the “Check” button, and in a short time either &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt; will be
displayed below the tweet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accuracy&quot;&gt;Accuracy&lt;&#x2F;h2&gt;
&lt;p&gt;Its clear after a little bit of testing that the accuracy depends to a large
extent on the quality of the training data. I tested with about 2,400 tweets as
training data and found that the accuracy was fairly good for items like:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Star Wars Episode 7 being released!&lt;br &#x2F;&gt;
C3PO is a rockstar&lt;br &#x2F;&gt;
Luke Skywalker, I am your father&lt;br &#x2F;&gt;
JJ Abrams directing Episode 7&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However due to the narrowly defined training set (for instance only six or seven
categories were used for “good” tweet data) statements like the following were
false positives due to the amount of discussion about the new Star Wars movies
being made:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Harry Potter Episode 7 is boring&lt;br &#x2F;&gt;
JJ Abrams directed Lost&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Some false negatives were also found due to only 200 “bad” tweets being used:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;3PO is a robot&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Despite these issues, the method produced something that could detect well over
half of Star Wars related tweets that I typed in in only a few hours of work.
Accuracy could be improved by gathering a broader range of random tweets
(presuming that the Twitter streaming API can be made to return anything other
than a 401 response code!) or by cherry picking and searching specific Star Wars
related terms where performance is poor. It is also possible that detecting
abusive tweets could be a little easier given certain words are exceedingly
common in these types of tweets but not in everyday speech.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally the use of N-grams, which are very short phrases could also improve
the algorithm. For instance a tweet could possibly include a phrase such as
“this millennium I want to fly a falcon” and not be related to Star Wars, whilst
a tweet “I like the Millennium Falcon” is far more likely to be related.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effectiveness&quot;&gt;Effectiveness&lt;&#x2F;h2&gt;
&lt;p&gt;The best that could be hoped from a system like this is that it would reduce
“casual” abuse, or at the very least make people think twice before sending a
horrible tweet. For many on the edge of society it is likely that a visual
warning would provide no deterrence whatsoever.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, the performance impact on a high volume site such as Twitter would
be considerable. Something like 400 million tweets a day are made, and for each
one to be passed through an “abuse” web service would require considerable
financial investment in terms of servers, support and so on. A client side
approach is technically feasible but unlikely to work given the large
probability matrix that would need to be downloaded in order for it to work. A
quick bit of research shows that a number of sentiment analysis APIs already
exist on-line, some are listed in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;blog.mashape.com&#x2F;post&#x2F;48757031167&#x2F;list-of-20-sentiment-analysis-apis&quot;&gt;this blog post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, as an investigation of sentiment analysis and Naive Bayes methods
the approach was a success but in terms of making a real dent in on-line abuse,
sadly it seems unlikely to provide any great benefits.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The full source code of the application and the article can be found at
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;twitter_sentiment&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;twitter_sentiment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>An Ember.js beginners tutorial</title>
        <published>2013-09-14T00:00:00+00:00</published>
        <updated>2013-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/an-emberjs-beginners-tutorial/"/>
        <id>https://willhart.io/post/an-emberjs-beginners-tutorial/</id>
        
        <content type="html" xml:base="https://willhart.io/post/an-emberjs-beginners-tutorial/">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;&#x2F;strong&gt; This is a pretty long tutorial! If you just want to see the
finished product you can browse the source code or have a look at a live demo&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Warning 2&lt;&#x2F;strong&gt; - this tutorial was written for Ember 1.0, and is therefore well
out of date.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;how-about-we-start-with-some-questions&quot;&gt;How about we start with some questions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-ember-js&quot;&gt;What is Ember.js?&lt;&#x2F;h3&gt;
&lt;p&gt;Ember.js is a client side javascript library which has been in development for
quite a while. It recently hit the spotlight as the first stable version (1.0.0)
was released.&lt;&#x2F;p&gt;
&lt;p&gt;In a nutshell, Ember helps you create web applications where a lot of the logic
runs in the browser and doesn’t necessarily require server requests to function.
You may also have heard of it in the same breath as javascript libraries like
backbone or angular.&lt;&#x2F;p&gt;
&lt;p&gt;When the user interacts with things like buttons and text boxes on the browser
page, Ember updates the DOM directly and (almost) instantly, showing changes
directly to the user without refreshing the page. If any server requests are
required this can be carried out asynchronously in the background. In effect,
Ember takes over the ‘application’ side of the web, leaving the server to act as
an API engine, serving and saving data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-ember-js&quot;&gt;Why Ember.js?&lt;&#x2F;h3&gt;
&lt;p&gt;There are an increasing number of client side javascript libraries out there, a
few of which I mentioned above. There is also a lot of debate into which one you
should use and whether you should even be using one. Its fair to say that some
of the debates I’ve read recently are a well over the top.&lt;&#x2F;p&gt;
&lt;p&gt;I’m going to avoid this whole issue and simply say that in the past year I’ve
tried a bunch of libraries out there and found that I enjoyed using Ember the
most. It suits my requirements, is relatively easy to use and seems to have a
very structured approach to development within the core team. I think if you
want an application which is easy to write and maintain, responds snappily to
user input and works using data from a REST API you can do a lot worse than
something like Ember. In no way am I trying to claim its the only way to go!&lt;&#x2F;p&gt;
&lt;p&gt;In the end, I suggest you have a go at Ember to see how it works and see if you
like it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-are-ember-applications-structured&quot;&gt;How are Ember applications structured?&lt;&#x2F;h3&gt;
&lt;p&gt;Ember.js applications use an MVC type structure. In this approach you have&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Models&lt;&#x2F;strong&gt; which define the data that is used in an application,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Controllers&lt;&#x2F;strong&gt; which modify, query and edit the data and provide user
interactions, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Views&lt;&#x2F;strong&gt; which display the data and capture user actions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition, Ember uses templates to define how views should look in the
browser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;today-s-application&quot;&gt;Today’s application&lt;&#x2F;h2&gt;
&lt;p&gt;There are a lot of TODO tutorials out in the wild, and I’m certainly not going
to write up another one. What we’re going to build today is something altogether
more exciting, something never before seen in the world of introductory
tutorials. Wait for it… today we are going to build a &lt;strong&gt;DICE ROLLER&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully our Dice Roller is going to show a couple of the interesting Ember
features in an application which does not require a server backend.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For consuming REST APIs, Ember has a data backend known as &lt;code&gt;ember-data&lt;&#x2F;code&gt;. I’ve
never found that this quite matches my requirements so I’ve always rolled my
own. I am unlikely to spend much time discussing this approach as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eviltrout.com&#x2F;2013&#x2F;03&#x2F;23&#x2F;ember-without-data.html&quot;&gt;Evil
Trout&lt;&#x2F;a&gt; has already
done a pretty good job.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So our application needs a few features…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Input the number of dice and the number of sides into a text box (e.g. 3d6)&lt;&#x2F;li&gt;
&lt;li&gt;“Roll” the dice and record the number of results&lt;&#x2F;li&gt;
&lt;li&gt;Draw a pretty (or otherwise) HTML chart of the results&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Simple right? Well this is a beginners tutorial after all! :) This means lots of
things aren’t going to be covered in this tutorial… some of the major Ember
features left out are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How to structure the files for a complex or large application&lt;&#x2F;li&gt;
&lt;li&gt;How to use ember-data&lt;&#x2F;li&gt;
&lt;li&gt;How to roll your own data access&lt;&#x2F;li&gt;
&lt;li&gt;Anything not covered below :)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Despite this I think we are going to cover enough to get somebody new to Ember
on the right track. Enough talk, lets get coding!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;building-the-html&quot;&gt;Building the HTML&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing that needs to be done is to build an HTML file to serve the
application. For starters, this is just a matter of building a basic HTML
document with the jQuery, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.emberjs.com&#x2F;&quot;&gt;Ember&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;handlebarsjs.com&#x2F;&quot;&gt;handlebars&lt;&#x2F;a&gt; scripts included. Handlebars is a
templating language which lets you write out data bound templates that are
rendered into the browser. Create an index.html file and enter the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;An Ember dice roller&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;2.0.3&#x2F;jquery.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;handlebars.js&#x2F;1.0.0&#x2F;handlebars.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ember.js&#x2F;1.0.0&#x2F;ember.prod.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There shouldn’t be anything too exciting here - we are simply setting up a
single HTML file with the standard &lt;code&gt;head&lt;&#x2F;code&gt; and &lt;code&gt;body&lt;&#x2F;code&gt; sections and including some
scripts. Its important that the scripts appear in this order; Ember requires
jQuery and handlebars and will give you errors if the scripts have not been
included before the Ember script.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are running the web page on your hard drive using a file:&#x2F;&#x2F;&#x2F; url, you
may need to put an http: in front of the cdnjs URLs above.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;create-an-application&quot;&gt;Create an application&lt;&#x2F;h3&gt;
&lt;p&gt;So far so good. Now we need to create and load our Ember application. Lets start
by creating a new file, &lt;code&gt;app.js&lt;&#x2F;code&gt; and including it in our HTML document below the
other script tags:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside app.js, write the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_TRANSITIONS: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_BINDINGS: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_VIEW_LOOKUPS: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_STACKTRACE_ON_DEPRECATION: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_VERSION: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    debugMode: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code creates a brand new application using &lt;code&gt;Ember.Application.create()&lt;&#x2F;code&gt;,
calls it Roller and passes it a bunch of variables inside the &lt;code&gt;{}&lt;&#x2F;code&gt;. These
variables are all about debugging information and should probably be set to
&lt;code&gt;false&lt;&#x2F;code&gt; for a production application. However, as we are just getting started with
Ember lets leave them on for now as their output is quite useful.&lt;&#x2F;p&gt;
&lt;p&gt;If you open up &lt;code&gt;index.html&lt;&#x2F;code&gt; in your browser and go to the developer console
(&lt;code&gt;F12&lt;&#x2F;code&gt; in chrome) you should see some messages on the console:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Could not find &amp;quot;application&amp;quot; template or view. Nothing will be rendered Object {fullName: &amp;quot;template:application&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;Could not find &amp;quot;index&amp;quot; template or view. Nothing will be rendered Object {fullName: &amp;quot;template:index&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;Transitioned into &amp;#39;index&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These are debug messages that we asked for in our &lt;code&gt;Application.create&lt;&#x2F;code&gt; call
above. We can see that something is not quite right - Ember can’t find a couple
of templates or views. Its not all bad news though, as Ember has transitioned
into ‘index’. In this case &lt;code&gt;index&lt;&#x2F;code&gt; refers to a &lt;code&gt;Route&lt;&#x2F;code&gt; which we will talk about
more later.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, lets start by fixing some of these log messages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-application-template&quot;&gt;The application template&lt;&#x2F;h3&gt;
&lt;p&gt;Ember uses a lot of convention over configuration. This basically means that
when it goes to a URL, it expects a number of objects to exist with very
specific names. If it doesn’t find these objects, it can often create default
ones.&lt;&#x2F;p&gt;
&lt;p&gt;In this case when we load our application, Ember looks for a handlebars template
called &lt;code&gt;application&lt;&#x2F;code&gt;. This template is loaded for every url or request and wraps
up and displays the entire application. For now, this template can be quite
simple, but when you build a more complex application it can include things like
menus, headers and footers.&lt;&#x2F;p&gt;
&lt;p&gt;Lets write a simple one now. In the body of your index.html file, above the
script tags enter the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Dice Roller&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outlet&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks a lot like HTML, and it basically is. The important things are that
we have specified &lt;code&gt;type=&quot;text&#x2F;x-handlebars&quot;&lt;&#x2F;code&gt; on our script tag, which tells
handlebars that it should compile everything inside the script tags as a
handlebars template. Ember then looks for the attribute &lt;code&gt;id=&quot;application&quot;&lt;&#x2F;code&gt; and
realises that we want this template to be the application template.&lt;&#x2F;p&gt;
&lt;p&gt;Refreshing the page, you should see that the first log message we saw before
should have changed from &lt;code&gt;Could not find &quot;application&quot;&lt;&#x2F;code&gt; to &lt;code&gt;Rendering application with default view&lt;&#x2F;code&gt;, and you should see the heading “Dice Roller” in
your browser window. So we haven’t quite removed any log messages but this new
message is just Ember saying to us “I see you have an application template, but
since you don’t have an application view I’m going to make one for you.” No big
deal, right?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; When you make changes to Ember applications make sure you refresh the
page entirely… sounds obvious but if you click on a link in the Ember
application the application itself doesn’t get updated from the server.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The only strange thing in this template is the &lt;code&gt;{{outlet}}&lt;&#x2F;code&gt; written after our
heading. This is a handlebars tag - the curly braces tell handlebars to do
something with whatever is inside. In this case, an &lt;code&gt;outlet&lt;&#x2F;code&gt; is where our
application can put other views or templates. We can see the effect of this by
creating another template below the application template in our &lt;code&gt;index.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Our content goes here
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save and refresh and you should see that below our heading there is now the text
“our content goes here”. What has just happened?&lt;&#x2F;p&gt;
&lt;p&gt;This is convention over configuration working overtime. Ember has loaded up,
looked for the default application template and rendered it. It has then checked
the URL and realised that its in the &lt;code&gt;index&lt;&#x2F;code&gt; resource (no further URL has been
provided - more on this later) and has looked for the &lt;code&gt;index&lt;&#x2F;code&gt; template. Finding
it, Ember has put the output from this template into the &lt;code&gt;{{outlet}}&lt;&#x2F;code&gt; of the
application template. Simple, right!?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;defining-urls-or-resources&quot;&gt;Defining URLs (or resources)&lt;&#x2F;h3&gt;
&lt;p&gt;You’ll notice that we haven’t actually told Ember about any URLs to provide
yet… its simply guessed that we want an “index” route when we visit
&lt;code&gt;index.html&lt;&#x2F;code&gt; directly and as we haven’t defined one, it has generated one for
us.&lt;&#x2F;p&gt;
&lt;p&gt;“But Will,” I hear you say, “hardly any applications simply use one URL”. How
right you are! Luckily for us, Ember provides a mechanism where complex, nested
and dynamic URLs can be provided. This system is handled by the &lt;code&gt;Router&lt;&#x2F;code&gt; object.
By default Ember generates an index route, and so no further work is required if
we just want a simple resource. In our case we don’t want anything too complex&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Ember you can think of a resource as kind of like the a “page” in static
HTML websites.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Configuring a router is dead simple. At the bottom of your &lt;code&gt;app.js&lt;&#x2F;code&gt; add the
following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it! Refresh your page… errr, nothing has changed. Well behind the
scenes, Ember now knows about our &lt;code&gt;roll&lt;&#x2F;code&gt; URL and if we ask for it will try to
find the &lt;code&gt;roll&lt;&#x2F;code&gt; template. Lets link up this resource in our index view. Where we
previously wrote “Our content goes here” in the index template, replace it with
the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;{{#linkTo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}Start rolling dice!{{&#x2F;linkTo}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The curly braces tell us that this is another handlebars “command”, but what
does it do? Hopefully &lt;code&gt;linkTo&lt;&#x2F;code&gt; is a bit of a give away. This command generates a
link (using an HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; tag to the resource we have called roll, and puts
everything between the &lt;code&gt;{{#linkTo ... }}&lt;&#x2F;code&gt; and &lt;code&gt;{{&#x2F;linkTo}}&lt;&#x2F;code&gt; tags inside the
link. Refresh it and see what happens.&lt;&#x2F;p&gt;
&lt;p&gt;A link appears in the index and we can click it to go to the roll template.
Notice that our address bar now has &lt;code&gt;index.html#&#x2F;roll&lt;&#x2F;code&gt;. This is how Ember knows
which resource to load. Everything after the &lt;code&gt;#&#x2F;&lt;&#x2F;code&gt; is a resource name and we can
see here it is roll which we defined in our resources! For more complex or
nestted resources you may see a link like &lt;code&gt;index.html#&#x2F;roll&#x2F;1&#x2F;my-roll&lt;&#x2F;code&gt;. As long
as you have correctly configured your &lt;code&gt;Router&lt;&#x2F;code&gt;, Ember will know how to handle
this.&lt;&#x2F;p&gt;
&lt;p&gt;You can define custom behaviour for &lt;code&gt;Routes&lt;&#x2F;code&gt; such as &lt;code&gt;roll&lt;&#x2F;code&gt; or &lt;code&gt;index&lt;&#x2F;code&gt; which
lets you load specific data or add some complex redirect behaviour (for instance
you could check if the user is logged in and if required redirect to a login
page).&lt;&#x2F;p&gt;
&lt;p&gt;In our Dice Roller application at the moment, its silly that users have to
navigate to the application then click on a link to start rolling dice. Sure, in
a real world application we might just merge everything in the roll route into
the index route and leave it at that. For the sake of a highly contrived routing
example, lets instead &lt;code&gt;redirect&lt;&#x2F;code&gt; any visits to the &lt;code&gt;index&lt;&#x2F;code&gt; route to the &lt;code&gt;roll&lt;&#x2F;code&gt;
route.&lt;&#x2F;p&gt;
&lt;p&gt;Below your &lt;code&gt;Router.map&lt;&#x2F;code&gt; call in the &lt;code&gt;app.js&lt;&#x2F;code&gt; file, add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IndexRoute &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;transitionTo&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;extend&lt;&#x2F;code&gt; part of &lt;code&gt;Ember.Route.extend&lt;&#x2F;code&gt; simply tells Ember we want to create a
new version of the pre-defined &lt;code&gt;Ember.Route&lt;&#x2F;code&gt; object and add some of our own
logic to it. This is akin to basic class inheritance in languages such as
Python, for instance you may view this as something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyNewRouteClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ember.Route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;my new route methods follow&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you remove the &lt;code&gt;#&#x2F;roll&lt;&#x2F;code&gt; from the URL and refresh, you shoud see that the roll
route is automagically navigated to whenever we try to go to the index. Sweet!
We’ll come back to routes a bit later on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;add-some-user-controls&quot;&gt;Add some user controls&lt;&#x2F;h2&gt;
&lt;p&gt;If you looked at the console when we first created our roll &lt;code&gt;linkTo&lt;&#x2F;code&gt; you would
have noticed that Ember &lt;code&gt;could not find &quot;roll&quot; template or view&lt;&#x2F;code&gt; which is
expected as we haven’t defined one. Lets add one now below the index template in
our &lt;code&gt;index.html&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Enter your required dice roll below, for instance &amp;quot;3d6&amp;quot; will roll three six sided dice.
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Results&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {{#each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        I rolled a dice 
&lt;&#x2F;span&gt;&lt;span&gt;    {{else}}
&lt;&#x2F;span&gt;&lt;span&gt;        No results yet
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;each}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few new things here - the &lt;code&gt;{{input}}&lt;&#x2F;code&gt; and &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; tags.&lt;&#x2F;p&gt;
&lt;p&gt;The input tag is a handlebars &lt;code&gt;helper&lt;&#x2F;code&gt; that Ember provides. This renders an
input tag of type text with the given placeholder. It also uses &lt;code&gt;valueBinding&lt;&#x2F;code&gt;
to let the controller know that it should ensure that the controller property
&lt;code&gt;rollString&lt;&#x2F;code&gt; matches whatever is in the text box at all times. The HTML code
generated by this may look a little like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dice_roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ember-view ember-text-field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great, so what? Well you are right, so far not particularly exciting but stay
tuned!&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; tag does a forEach on the list or array it is provided. In other
words it does whatever is between the &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; and &lt;code&gt;{{else}}&lt;&#x2F;code&gt; once per object
in the given array.&lt;&#x2F;p&gt;
&lt;p&gt;In this case we have a list of some sort called &lt;code&gt;content&lt;&#x2F;code&gt; and for each item in
that list it prints out &lt;code&gt;I rolled a dice&lt;&#x2F;code&gt;. We can access properties of each of
the items in the block by using &lt;code&gt;roll&lt;&#x2F;code&gt;. We also provide an &lt;code&gt;{{else}}&lt;&#x2F;code&gt; block.
This tells handlebars what to show if there are no items in the &lt;code&gt;content&lt;&#x2F;code&gt; list.&lt;&#x2F;p&gt;
&lt;p&gt;If you refresh the page you will see the input box and text rendered but not
much else. Thats because we haven’t hooked up any logic or models to the
application yet. Lets do this now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-some-models&quot;&gt;Adding some models&lt;&#x2F;h2&gt;
&lt;p&gt;Our model is going to be very simple, and just define a dice result and a count.
In your &lt;code&gt;app.js&lt;&#x2F;code&gt; file, add the following up near the top, but just after the &lt;code&gt;var Roller&lt;&#x2F;code&gt; declaration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    diceNumber: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    totalRolls: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    numberOfRolls: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;proportion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;totalRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;px;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;totalRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a bit of a javascript mouthful but really quite straight forward. Once
again we are calling &lt;code&gt;extend&lt;&#x2F;code&gt; on something Emberish - here the base &lt;code&gt;Object&lt;&#x2F;code&gt; -
and providing some additional information inside the &lt;code&gt;{}&lt;&#x2F;code&gt;. The first three are
simple properties, just some variables that we are storing against this model.&lt;&#x2F;p&gt;
&lt;p&gt;The last declaration - the &lt;code&gt;proportion&lt;&#x2F;code&gt; property - is a bit more complicated but
is where the magic of Ember starts to really show through. Ember &lt;code&gt;properties&lt;&#x2F;code&gt;
are a neat feature that can be used to automatically update the contents of a
model when some other attribute changes. Properties aren’t stored in a database,
but are &lt;em&gt;derived&lt;&#x2F;em&gt; from other attributes of the model itself. In this case, we
can see that after our function we have written&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;totalRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that if on a given model the value of either of &lt;code&gt;totalRolls&lt;&#x2F;code&gt; or
&lt;code&gt;numberOfRolls&lt;&#x2F;code&gt; changes, then the &lt;code&gt;proportion&lt;&#x2F;code&gt; property will be updated. Any
user interface elements which depend on the &lt;code&gt;proportion&lt;&#x2F;code&gt; property (we’ll see how
to manage this later) will be automatically updated!&lt;&#x2F;p&gt;
&lt;p&gt;For added confusion we’ve created a property here that returns a bit of CSS that
we will later &lt;code&gt;bind&lt;&#x2F;code&gt; to our DOM element. In this case it returns a width based
on the percentage of total rolls that this dice number represents.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; The property above uses &lt;code&gt;this.get(&quot;variableName&quot;);&lt;&#x2F;code&gt; to retrieve
properties from the model. In Ember applications we generally need to use this
approach for accessing properties rather than simply &lt;code&gt;this.variableName&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly for setting values we use &lt;code&gt;this.set(&quot;variableName&quot;, value)&lt;&#x2F;code&gt; instead
of &lt;code&gt;this.variableName = value&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;loading-models-into-a-route&quot;&gt;Loading models into a route&lt;&#x2F;h2&gt;
&lt;p&gt;By itself, just declaring a model doesn’t actually do anything. We need to tell
our route how to gather together the required models. This is done by
&lt;code&gt;extend&lt;&#x2F;code&gt;ing the &lt;code&gt;RollRoute&lt;&#x2F;code&gt; in a similar fashion as we did before when we
extended the &lt;code&gt;IndexRoute&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below your &lt;code&gt;IndexRoute&lt;&#x2F;code&gt; declaration in &lt;code&gt;app.js&lt;&#x2F;code&gt;, add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RollRoute &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in a data driven application this could be used 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to get information from a server.  Here we just 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; declare an empty array in memory
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setupController&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We provide two additional methods to the &lt;code&gt;RollRoute&lt;&#x2F;code&gt;, firstly &lt;code&gt;model()&lt;&#x2F;code&gt; which
retrieves (or in this case generates in memory) some models, and a
&lt;code&gt;setupController()&lt;&#x2F;code&gt; method which stores the model information in the controller.
(At the moment our &lt;code&gt;RollController&lt;&#x2F;code&gt; is auto-generated by Ember as we haven’t
defined one).&lt;&#x2F;p&gt;
&lt;p&gt;Notice we have used the &lt;code&gt;controller.set()&lt;&#x2F;code&gt; method. Here Ember calls
&lt;code&gt;setupController&lt;&#x2F;code&gt; with a reference to the currently loaded controller - in this
case the autogenerated &lt;code&gt;RollController&lt;&#x2F;code&gt; - as well as the model that was loaded
using the &lt;code&gt;model()&lt;&#x2F;code&gt; method defined earlier. The observant amongst you will no
doubt notice that in our &lt;code&gt;roll&lt;&#x2F;code&gt; template above we used &lt;code&gt;{{each roll in content}}&lt;&#x2F;code&gt; which should hopefully start to set a few light bulbs glowing!&lt;&#x2F;p&gt;
&lt;p&gt;Refreshing the page again should show that once again nothing above the surface
has changed. Our text box is still sitting there dumbly and we should be seeing
a “No results yet” output. Just for kicks, lets change our &lt;code&gt;model&lt;&#x2F;code&gt; function from
returning&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to returning&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Refreshing the page and you should see the output change from “No results yet”
to “I rolled a dice I rolled a dice I rolled a dice”. We’ve used
&lt;code&gt;Roller.Roll.create()&lt;&#x2F;code&gt; to create three instances of our model and passed them to
the controller in an array. Ember has then taken the &lt;code&gt;content&lt;&#x2F;code&gt; property we set
on the controller and used it in our view. &lt;strong&gt;Eureka!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you get this then you have followed along correctly so far! Ok, quickly
change it back before somebody gets blinded by Ember’s magnificence.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;connecting-up-actions&quot;&gt;Connecting up actions&lt;&#x2F;h2&gt;
&lt;p&gt;In the last section we accomplished something pretty wonderful. With a few lines
of code we set up a route that loads models into memory and displays them in the
user interface. Lets take it one step further now and generate models on the fly
based on user input.&lt;&#x2F;p&gt;
&lt;p&gt;Coming to the rescue here are Embers &lt;code&gt;actions&lt;&#x2F;code&gt;. These are kind of like event
handlers, in that they link up things like click events on buttons or links to
functions in your controller. Ember does also provide a way to directly handle
DOM events (such as &lt;code&gt;onClick&lt;&#x2F;code&gt;) in views, we’ll cover those right at the end.&lt;&#x2F;p&gt;
&lt;p&gt;To see how this works, we need to actually define a controller. Firstly, however
lets add a little bit to our roll template in &lt;code&gt;index.html&lt;&#x2F;code&gt;. Replace the current
template with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Enter your required dice roll below, for instance &amp;quot;3d6&amp;quot; will roll three six sided dice.
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollDice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}&amp;gt;Roll Dice&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;    {{#if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;if}}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Results&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{#each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll-number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll.diceNumber&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll-result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bindAttr style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll.proportion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}&amp;gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll.numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{else}}
&lt;&#x2F;span&gt;&lt;span&gt;        No results yet
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;each}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see we’ve used an &lt;code&gt;{{#if}}&lt;&#x2F;code&gt; tag (which does exactly what we would
expect) to show errors if any were found - we’ll use this in our controller.
We’ve also improved our output for rolls in the &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; block. We added a
&lt;code&gt;div&lt;&#x2F;code&gt; and two &lt;code&gt;spans&lt;&#x2F;code&gt; to show our values.&lt;&#x2F;p&gt;
&lt;p&gt;We’ve also used a tag &lt;code&gt;{{bindAttr ...}}&lt;&#x2F;code&gt;. This tag lets us bind an attribute of
an HTML tag directly to a property of our model. Here we are using it to set the
width of the &lt;code&gt;&amp;lt;span&amp;gt;&lt;&#x2F;code&gt; element based on the &lt;code&gt;proportion&lt;&#x2F;code&gt; property, which is in
turn based on the percentage of total rolls this number represents. Because
Ember automatically updates the rendered templates whenever the underlying data
changes, if we make changes to &lt;code&gt;content&lt;&#x2F;code&gt; on our controller then the width of
this span will update automatically. Thats neat!&lt;&#x2F;p&gt;
&lt;p&gt;Ok, enough messing about, lets get on to our controller. This will take quite a
bit more code so bear with me for a moment or two. At the bottom of the &lt;code&gt;app.js&lt;&#x2F;code&gt;
file, add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RollController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rollDice&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;= [],
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rnd&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if anything was typed in the text box
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Please fill out the text box!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; split up the string around the &amp;#39;d&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;.length !== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if we had a &amp;quot;d&amp;quot; in our text (i.e. its correctly formatted)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You need to enter a value in the format &amp;#39;xdy&amp;#39;.  &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; then split up and parse the required numbers
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isNaN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls&lt;&#x2F;span&gt;&lt;span&gt;) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isNaN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rolls and sides must be numbers.  &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; generate the dice rolls if we haven&amp;#39;t found any errors
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.length === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; generate all the models
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;                        diceNumber: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        totalRolls: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls
&lt;&#x2F;span&gt;&lt;span&gt;                    }));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now roll all the dice
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; roll a dice
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rnd &lt;&#x2F;span&gt;&lt;span&gt;= Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; increment the required model
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rnd&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;incrementProperty&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; update the content
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; display any errors
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By now we should be starting to become familiar with Embers &lt;code&gt;extend&lt;&#x2F;code&gt; syntax, but
there is a lot more code here than we’ve seen before. This is our application’s
logic, and most of it is to do with error checking.&lt;&#x2F;p&gt;
&lt;p&gt;I’m not going to go into too much detail as its just plain javascript for the
most part, but basically it does the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Gets the input from the text box and checks it is in the right format&lt;&#x2F;li&gt;
&lt;li&gt;Builds a model for each side of the dice&lt;&#x2F;li&gt;
&lt;li&gt;Randomly rolls dice and increments the numberOfRolls attribute for the
correct model by one using the model.incrementProperty(‘property’) method&lt;&#x2F;li&gt;
&lt;li&gt;Sets the content of the controller to our new models and saves any errors
encountered&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now when you type a valid dice roll into the text box and click the Roll Dice
button, you should see some (unformatted) results appearing below. The key
things to note are that we have used &lt;code&gt;this.get()&lt;&#x2F;code&gt; and &lt;code&gt;this.set()&lt;&#x2F;code&gt; to access
properties on the controller. At the end, we have set the &lt;code&gt;content&lt;&#x2F;code&gt; and &lt;code&gt;errors&lt;&#x2F;code&gt;
properties on the controller and these are the same &lt;code&gt;content&lt;&#x2F;code&gt; and &lt;code&gt;errors&lt;&#x2F;code&gt;
properties we reference in our template. Similarly, in our template we set the
&lt;code&gt;id&lt;&#x2F;code&gt; attribute of our &lt;code&gt;{{input}}&lt;&#x2F;code&gt; to &lt;code&gt;rollString&lt;&#x2F;code&gt; and as a result this is
available in our controller using &lt;code&gt;this.get(&quot;rollString&quot;)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can now refresh the page. Try typing the following into the text box and see
what you get:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1d&lt;&#x2F;li&gt;
&lt;li&gt;1d6&lt;&#x2F;li&gt;
&lt;li&gt;2da&lt;&#x2F;li&gt;
&lt;li&gt;adb&lt;&#x2F;li&gt;
&lt;li&gt;$#dfgk34j6&lt;&#x2F;li&gt;
&lt;li&gt;ddd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thats it! We now have a fully functioning - if a little plain - dice rolling
application using Ember. By my count we’ve written about 150 lines of javascript
and HTML, which is not too shabby, although we could cut out a bit by merging
our roll and index controllers as we discussed above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;styling-the-application&quot;&gt;Styling the application&lt;&#x2F;h2&gt;
&lt;p&gt;Until now we have just gone on using the default, ugly HTML styles. We can
easily provide a bit of beauty to our application by just adding a sprinkle of
CSS in the usual way. Into the &lt;code&gt;head&lt;&#x2F;code&gt; tag of your &lt;code&gt;index.html&lt;&#x2F;code&gt;, link up a
stylesheet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;styles.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create styles.css and paste in the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2em&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1px &lt;&#x2F;span&gt;&lt;span&gt;solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#A22&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#A22&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#FDD&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-number &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    display: inline-block;
&lt;&#x2F;span&gt;&lt;span&gt;    margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-number &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    font-weight: bolder;
&lt;&#x2F;span&gt;&lt;span&gt;    min-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-result &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#03C&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    color: white;
&lt;&#x2F;span&gt;&lt;span&gt;    text-align: right;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    font-size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    border: none;
&lt;&#x2F;span&gt;&lt;span&gt;    outline: none;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#EEE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    min-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;350px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cursor:pointer;
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#03C&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    color: white;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our errors are styled, and when we click “Roll Dice” a nice bar graph will
be drawn showing the results. You should see something like the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;an-emberjs-beginners-tutorial&#x2F;dice_roller_screenshot.png&quot; alt=&quot;Ember.js Dice Roller Screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-improvements&quot;&gt;Further Improvements&lt;&#x2F;h2&gt;
&lt;p&gt;One annoying “feature” of this application is that when we want to roll some
dice we have to click “Roll Dice” every time. It would be much nicer if we could
just hit enter when we are happy.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, lets use a custom view which extends Ember’s &lt;code&gt;TextView&lt;&#x2F;code&gt;. At the very
end of our &lt;code&gt;app.js&lt;&#x2F;code&gt; file, insert the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DiceInputField &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;keyDown&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if we pressed the enter key
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCode &lt;&#x2F;span&gt;&lt;span&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; call the controllers &amp;#39;rollDice&amp;#39; function
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This extends the Ember.TextField (which was already being used by the
&lt;code&gt;{{input}}&lt;&#x2F;code&gt; tag). We have also defined a &lt;code&gt;keyDown&lt;&#x2F;code&gt; function, which Ember
automatically binds to the &lt;code&gt;keyDown&lt;&#x2F;code&gt; event of the field. Inside the function it
checks whether we have hit the enter key (key code 13) and if we have it sends
the &lt;code&gt;rollDice&lt;&#x2F;code&gt; action to the controller.&lt;&#x2F;p&gt;
&lt;p&gt;We have to update our template so that it uses this new view. Simply change the
following line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view Roller.DiceInputField valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollDice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Thats it! Hopefully this has given you a fair idea of what is possible in Ember
applications. If you have any comments, corrections or suggestions then feel
free to comment below. Otherwise, get Embering!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C# 5.0 In A Nutshell - Review</title>
        <published>2013-08-28T00:00:00+00:00</published>
        <updated>2013-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/c-50-in-a-nutshell/"/>
        <id>https://willhart.io/post/c-50-in-a-nutshell/</id>
        
        <content type="html" xml:base="https://willhart.io/post/c-50-in-a-nutshell/">&lt;blockquote&gt;
&lt;p&gt;DISCLAIMER: I received this book for free as part of the O’Reilly blogger
review program. I promise this hasn’t changed my opinion :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve been coding a lot more in C# recently as a result of doing it at work and
mocking up some tests for Blitz Logger. Whilst I’m comfortable with the basics
of C#, I came to it from a combination of VB and C and never really had a formal
education in the language.&lt;&#x2F;p&gt;
&lt;p&gt;I therefore decided to have a look at C# 5.0 In a Nutshell as a “desktop”
reference - In effect a digital copy on my phone or PC I can flick through when
I want to know about a specific language feature.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I did when I got the book was have a flick through the contents.
The book seemed fairly comprehensive with most of the language features I knew
about and a couple I didn’t. You’d probably expect this as the book weighs in at
about 1000 pages!&lt;&#x2F;p&gt;
&lt;p&gt;I browsed through the chapter on &lt;code&gt;LINQ to SQL&lt;&#x2F;code&gt; and the one on &lt;code&gt;Reflection&lt;&#x2F;code&gt; and
&lt;code&gt;Metadata&lt;&#x2F;code&gt;. They seemed pretty well written in clear language with lots of short
examples. In the PDF the table of contents is all hyperlinked so you can click
on an item and go directly to the section.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Great,” I thought, “this will be handy!”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then I put the book down and forgot about it for a few months.&lt;&#x2F;p&gt;
&lt;p&gt;You see I had stumbled upon one of the fundamental problems with reference books
in the internet age - what presumably keeps publishing executives up at night -
a book is much harder to use than the internet! When I have a problem its
normally a very specific one. For instance, something along the lines of:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I use &lt;code&gt;BeginInvoke&lt;&#x2F;code&gt; again?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sure I know vaguely what I’m meant to do and how it works but for some reason
the exact syntax never stays in my head. In the time it takes to find the PDF of
the book, open it and somehow search the for &lt;code&gt;BeginInvoke&lt;&#x2F;code&gt; (which I can’t do on my
phone by the way) I could have found three or four possible solutions on
StackOverflow. Books are just so inefficient!&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps things would be different if I had splashed out for a paper copy, but
then again I can’t really see myself putting down the keyboard and mouse and
thumbing through such a weighty tome. If i have a specific question, I want the
answer NOW! (Plus, 1000 pages!! Think of the trees!)&lt;&#x2F;p&gt;
&lt;p&gt;Maybe 10 years ago, this book would have been the bees knees. Its comprehensive,
well written and has a solid index and table of contents which makes searching
relatively easy. I just couldn’t work out how to fit it into my workflow.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>demarcate.js 2 redesign</title>
        <published>2013-08-25T00:00:00+00:00</published>
        <updated>2013-08-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/demarcatejs-2-redesign/"/>
        <id>https://willhart.io/post/demarcatejs-2-redesign/</id>
        
        <content type="html" xml:base="https://willhart.io/post/demarcatejs-2-redesign/">&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;demarcate.js is an “in-place” editor for Markdown that is free and open source.
It is designed to be a text editor which integrated directly into the browser
and lets you edit in a what-you-see-is-what-you-get (WYSIWYG) way. When you are
finished editing - &lt;strong&gt;HEY PRESTO!&lt;&#x2F;strong&gt; - without having to type any Markdown you
have a properly formatted Markdown document. demarcate.js is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;demarcate.js&quot;&gt;available on
github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;issues-with-version-1-x-x&quot;&gt;Issues with version 1.x.x&lt;&#x2F;h2&gt;
&lt;p&gt;demarcate.js was an experiment which grew out of my desire for a browser text
editor that could easily push out Markdown. However version 1.x.x did have some
issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;mobile browsers weren’t supported&lt;&#x2F;li&gt;
&lt;li&gt;the UI was a bit clunky to use&lt;&#x2F;li&gt;
&lt;li&gt;the UI code was a bit ugly&lt;&#x2F;li&gt;
&lt;li&gt;it required jQuery and showdown to operate&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;With this in mind I embarked on a review of demarcate.js.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contenteditable&quot;&gt;contentEditable&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing I decided was that the clunky textarea based editing had to go.
It required a lot of hackish code to resize the &lt;code&gt;textarea&lt;&#x2F;code&gt; based on formatting,
and needed a lot of DOM editing and removal. I decide to use the
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&#x2F;Content_Editable&quot;&gt;contentEditable&lt;&#x2F;a&gt;
feature that virtually all modern browsers
(&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;caniuse.com&#x2F;#search=contenteditable&quot;&gt;http:&#x2F;&#x2F;caniuse.com&#x2F;#search=contenteditable&lt;&#x2F;a&gt;)
support. This allows a much richer UI and through use of a few shortcut keys can
be made to work closely to a “desktop” word processor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modularity&quot;&gt;Modularity&lt;&#x2F;h2&gt;
&lt;p&gt;In working on Blitz Logger recently I’ve had to think a lot about modularity.
One of the upsides of this is that I’ve had a bit more practice. demarcate.js
now exposes a single &lt;code&gt;parse&lt;&#x2F;code&gt; function which is used to convert the HTML DOM into
Markdown. This parser self-registers against the demarcate library and is a
separate object in its own right. This makes it much easier now to override the
Markdown parser with a custom one such as the jQuery based parser from version
1.1.4 or even perhaps a restructured text one?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coming-soon&quot;&gt;Coming Soon&lt;&#x2F;h2&gt;
&lt;p&gt;Demarcate.js 2.0 is nearly ready for release. You can have a look at the develop
branch on github.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Days Ago, a Chrome App</title>
        <published>2013-07-28T00:00:00+00:00</published>
        <updated>2013-07-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/days-ago-chrome-app/"/>
        <id>https://willhart.io/post/days-ago-chrome-app/</id>
        
        <content type="html" xml:base="https://willhart.io/post/days-ago-chrome-app/">&lt;p&gt;Days Ago is a Chrome Application (a new style ‘packaged app’) which you can
install in Chrome and launch from the browser. It lets you type in very simple
“todos”, for instance:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write letter to the bank in 3 days&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This will appear as a task Write letter to bank with a due date of 3 days. Tasks
can then be coloured according to their due dates, and removed when completed.&lt;&#x2F;p&gt;
&lt;p&gt;Days Ago is currently available in the Apps section if you are on the Chrome
Developer channel, or it can be installed by visiting
[https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;jgpkfclnhphhkocokeikoiabmjeejdlf].&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Editing Markdown with Ember.js</title>
        <published>2013-06-21T00:00:00+00:00</published>
        <updated>2013-06-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/editing-markdown-with-emberjs/"/>
        <id>https://willhart.io/post/editing-markdown-with-emberjs/</id>
        
        <content type="html" xml:base="https://willhart.io/post/editing-markdown-with-emberjs/">&lt;p&gt;If you read my rather lengthy &lt;a href=&quot;&#x2F;an-emberjs-beginners-tutorial&quot;&gt;beginning ember.js
tutorial&lt;&#x2F;a&gt; you may have an inkling that I’m
rather taken with the new kid on the block. I recently started thinking of ways
that I could use my demarcate editor in Ember applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-demarcateeditor-view&quot;&gt;The DemarcateEditor view&lt;&#x2F;h2&gt;
&lt;p&gt;The answer turned out to be incredibly simple, thanks to some code from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KasperTidemann&#x2F;ember-contenteditable-view&#x2F;blob&#x2F;master&#x2F;ember-contenteditable-view.js&quot;&gt;Kasper
Tidemann&lt;&#x2F;a&gt;.
By adding only a couple of lines, I’ve taken Kasper’s code and turned it into a
demarcate backed WYSIWYG Markdown editor. You can see the &lt;del&gt;live demo&lt;&#x2F;del&gt; (no
longer available) and as usual, the source is on
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;ember_demarcate_adapter_example&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; At the moment you need to be on the develop branch of demarcate to
access 2.0 features.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To make the &lt;code&gt;contenteditable&lt;&#x2F;code&gt; view demarcate enabled, I had to change two lines of
code. In the &lt;code&gt;didInsertElement&lt;&#x2F;code&gt; I added a line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;demarcate&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;enable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which simply takes the view’s DOM wrapper and enables it as a demarcate editor.
To parse the DOM tree into markdown when the contents of the view’s &lt;code&gt;div&lt;&#x2F;code&gt; changes,
I added a call to &lt;code&gt;Ember.run.debounce&lt;&#x2F;code&gt; in the &lt;code&gt;keyUp&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;debounce&lt;&#x2F;span&gt;&lt;span&gt;({&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;component&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;component&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;demarcate&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Ember.run.debounce&lt;&#x2F;code&gt; is quite a nifty little Ember function. “Debouncing” is
a common theme in microcontroller hardware design. It refers to the real life
effect where pushing a button may actually result in a rapidly oscillating or
“bouncing” electrical signal. This needs to be smoothed or “debounced” so that
the micro-controller only reacts to a button being pushed once.&lt;&#x2F;p&gt;
&lt;p&gt;In this case, as parsing a large HTML DOM into markdown may take a bit of
effort, we don’t want to do this every time the user presses a key. The &lt;code&gt;debounce&lt;&#x2F;code&gt;
method basically sets a timer (in this case for 1000 milliseconds) and restarts
the timer if the function is called again during the timeout period. In other
words, the call to &lt;code&gt;debounce&lt;&#x2F;code&gt; in this case makes &lt;code&gt;demarcate.parse()&lt;&#x2F;code&gt; wait for a
pause in &lt;code&gt;keyPress&lt;&#x2F;code&gt; events longer than 1 second.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-demo-application&quot;&gt;A demo application&lt;&#x2F;h2&gt;
&lt;p&gt;Creating a demo application requires only a few lines of code. First I create an
Ember application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I also define an Application controller:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ApplicationController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ObjectController&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    editorHTML: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;h1&amp;gt;Instructions&amp;lt;&#x2F;h1&amp;gt;Edit &amp;lt;strong&amp;gt;your&amp;lt;&#x2F;strong&amp;gt; document here, and &amp;lt;i&amp;gt;see&amp;lt;&#x2F;i&amp;gt; the Markdown appear  next door &amp;amp;gt;&amp;amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    markdown: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;# Instructions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Edit your **document** here, and *see* the Markdown appear next door &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has two properties - &lt;code&gt;editorHTML&lt;&#x2F;code&gt; which will be bound to the the current
HTML of the contenteditable, and &lt;code&gt;markdown&lt;&#x2F;code&gt; which will be bound to the parsed
markdown of the contenteditable. Here, I’ve hard coded the HTML and markdown
strings to initialise the values. In real life you will probably have Markdown
stored in a database and will use something like &lt;code&gt;showdown.js&lt;&#x2F;code&gt; or your backend’s
Markdown parser to build up the HTML.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, to make the HTML and markdown render correctly (and safely) in the
browser, a little handlebars helper is required. This just makes the text safe
(strips tags) and converts newlines to &lt;code&gt;&amp;lt;br&amp;gt;&lt;&#x2F;code&gt; tags.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Handlebars&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerBoundHelper&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;breaklines&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Handlebars&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;escapeExpression&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;gm&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;br&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new Ember.Handlebars.SafeString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All we need then is a template in our index.html:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;x-handlebars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div class=&amp;quot;editor&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{view Ember.DemarcateEditor valueBinding=&amp;quot;editorHTML&amp;quot; markdownBinding=&amp;quot;markdown&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div class=&amp;quot;output-wrapper&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div class=&amp;quot;markdown&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{breaklines markdown}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div class=&amp;quot;html&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{breaklines editorHTML}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This just includes the &lt;code&gt;Ember.DemarcateEditor&lt;&#x2F;code&gt; view in the template (which is
defined in a separate file) and then outputs the HTML and markdown in the view
for comparison. Of course some CSS is required so it doesn’t look too horrible.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; that for the view I’ve included markdownBinding=“markdown”. This is
because the value of the contenteditable is it’s HTML, so a separate binding
is used for the markdown output.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;building-an-ember-component&quot;&gt;Building an Ember.Component&lt;&#x2F;h2&gt;
&lt;p&gt;If you listen to the Ember experts talk - for instance &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=zC7o1YkmkG0&quot;&gt;this video on
Components&lt;&#x2F;a&gt; - then Ember’s
Components are the future. Basically they are reusable bits of interface which
provide a simple interface for binding data and responding to events. We can
convert our DemarcateEditor view into an Ember.Component quite easily.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, we need to add a template to our &lt;code&gt;index.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;x-handlebars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components&#x2F;demarcate-editor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{editorHTML}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fairly trivial bit of code simply creates a template (note the
&lt;code&gt;components&#x2F;&lt;&#x2F;code&gt; in front of the ID, which tells Ember its a component template)
and outputs the &lt;code&gt;editorHTML&lt;&#x2F;code&gt; variable using a Handlebars tag. Next we need to
update our &lt;code&gt;application&lt;&#x2F;code&gt; template so that it imports the Component rather than
the View. This turns out to be quite simple as well.&lt;&#x2F;p&gt;
&lt;p&gt;Replace the line&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DemarcateEditor valueBinding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;editorHTML&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markdownBinding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with the line&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;demarcate&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;editor value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;editorHTML markdown&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ember recognises that the &lt;code&gt;{{demarcate-editor ...}}&lt;&#x2F;code&gt; tag is a reference to a
&lt;code&gt;DemarcateEditorComponent&lt;&#x2F;code&gt; object. It also realises that we want a template with
ID &lt;code&gt;components&#x2F;demarcate-editor&lt;&#x2F;code&gt; to render the component. The &lt;code&gt;value&lt;&#x2F;code&gt; and
&lt;code&gt;markdown&lt;&#x2F;code&gt; attributes are bindings to variables on the controller scope, even
though we don’t have the &lt;code&gt;Binding&lt;&#x2F;code&gt; keyword which the view requires. In this
case, our Application controller has properties &lt;code&gt;editorHTML&lt;&#x2F;code&gt; and &lt;code&gt;markdown&lt;&#x2F;code&gt;, and
the Component will reference these properties.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; As the properties passed to the component are bound, when the
Component changes the properties then these changes will propogate to any
reference within the template, and also back up in to the controller itself.
Similarly, if another component or the controller changes the property, then
the changes will automatically propogate into the component.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We also need to do is to provide the code behind the component. In this case,
its a simple matter of renaming our view to a component.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DemarcateEditor &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Em&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({ ... });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;becomes&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DemarcateEditorComponent &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Em&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({ ... });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The naming is important - the words must be capitalised, and the last word must
be &lt;code&gt;Component&lt;&#x2F;code&gt;. When searching for the correct class to use, Ember removes the
word &lt;code&gt;Component&lt;&#x2F;code&gt;, replaces each word with its lowercase equivalent and separates
them with dashes. In this instance, &lt;code&gt;DemarcateEditorComponent&lt;&#x2F;code&gt; becomes
&lt;code&gt;demarcate-editor&lt;&#x2F;code&gt; which we used in our template above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;component-vs-view&quot;&gt;Component vs View&lt;&#x2F;h2&gt;
&lt;p&gt;There was little difference between the implementation of an &lt;code&gt;Ember.Component&lt;&#x2F;code&gt;
and an &lt;code&gt;Ember.View&lt;&#x2F;code&gt; and the functionality itself was identical. Both provide a
way to encapsulate particular behaviours in a reusable front-end class. They
make your templates neater and more concise. In addition, the restricted
interface provided by Components makes them easy and predictable to use. Ember’s
Components try to predict the way that the HTML specification will evolve in the
coming years so are a good tool for new applications.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, building an Ember &#x2F; demarcate editor proved to be a piece of cake!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>demarcate.js Markdown Editor</title>
        <published>2013-01-29T00:00:00+00:00</published>
        <updated>2013-01-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/demarcatejs-markdown-editor/"/>
        <id>https://willhart.io/post/demarcatejs-markdown-editor/</id>
        
        <content type="html" xml:base="https://willhart.io/post/demarcatejs-markdown-editor/">&lt;p&gt;demarcate.js is a new open source project to create an in-line or in-place
markdown editor. This allows you to edit an HTML page by clicking on elements
and typing in a box that appears in their place.&lt;&#x2F;p&gt;
&lt;p&gt;The contents of the page can then be retrieved in Markdown encoded text which
can be saved to a database to persist changes.&lt;&#x2F;p&gt;
&lt;p&gt;demarcate.js was designed to become the main editor for &lt;code&gt;textr&lt;&#x2F;code&gt;, an online
publishing service. You can see the source and browse some more demos at the
github page: [https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;demarcate.js].&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HTML5 Game using easel.js</title>
        <published>2012-06-05T00:00:00+00:00</published>
        <updated>2012-06-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/html5-game-using-easeljs/"/>
        <id>https://willhart.io/post/html5-game-using-easeljs/</id>
        
        <content type="html" xml:base="https://willhart.io/post/html5-game-using-easeljs/">&lt;p&gt;As an exercise I recently wrote an HTML5 game using Easel.js, which is a
relatively cool javascript library that helps when working with canvas objects.
Although I did find the easel documents a little confusing to begin with, it
only took a handful of hours before I had a working Connect Four game!&lt;&#x2F;p&gt;
&lt;p&gt;For those with a short attention span, you can &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Connect_Four&quot;&gt;find out what Connect Four
is&lt;&#x2F;a&gt;, view the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;html5-connect4&quot;&gt;source
code&lt;&#x2F;a&gt;, or &lt;del&gt;play the game&lt;&#x2F;del&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;easel.js&lt;&#x2F;code&gt; code is actually a lot simpler than it looks. Basically a
spritesheet is used for the graphics and BitmapAnimation objects are used to
show the particular image on screen. The animations are set to single frames
without repeating.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;html5-game-using-easeljs&#x2F;connect4_spritesheet.png&quot; alt=&quot;Connect Four Spritesheet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A Timer is used to call &lt;code&gt;stage.update()&lt;&#x2F;code&gt; at about 60 frames per second, and then
some mouse event handlers are added for:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Hovering over the top of a row&lt;&#x2F;li&gt;
&lt;li&gt;Clicking on the top of a row to place a disc&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;html5-game-using-easeljs&#x2F;connect4.png&quot; alt=&quot;Connect Four screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally a function had to be written to determine if there was a winner when a
disc was placed. This was done with some basic recursion - have a look at the
&lt;code&gt;checkForWinner()&lt;&#x2F;code&gt; function &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;html5-connect4&#x2F;blob&#x2F;master&#x2F;js&#x2F;connect4.js#L170&quot;&gt;in the source
code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Gradekeep Coursework Management</title>
        <published>2012-04-27T00:00:00+00:00</published>
        <updated>2012-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/gradekeep-coursework-management/"/>
        <id>https://willhart.io/post/gradekeep-coursework-management/</id>
        
        <content type="html" xml:base="https://willhart.io/post/gradekeep-coursework-management/">&lt;p&gt;I’ve recently gone back to uni to get an engineering degree. Its hard work…
many hours of study, constantly learning new things and challenging my brain in
a way that it hasn’t been challenged for nearly a decade. One of the
difficulties I’ve had is keeping track of all the assignments that are due, the
class tests, the lab reports, and so on. So I decided to put together an
assessment tracking tool me and my fellow students could use.&lt;&#x2F;p&gt;
&lt;p&gt;Initially I built a spreadsheet but that didn’t quite cut it. First of all it
was a bit ugly, and secondly it was a pain to keep track of all the classes and
to work out what was due when. So I set about building a little web application
to help me manage my coursework - to keep track of my progress and my scores, to
work out how much of a subject I had completed, and to remind me when something
was due soon. What resulted was GradeKeep!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;&#x2F;h2&gt;
&lt;p&gt;The idea behind GradeKeep is pretty simple. Its an Open Source, online web
application for teachers and students. Its for tracking your progress and
keeping you informed when due dates are approaching.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;List all of your subjects and coursework&#x2F;assignments&lt;&#x2F;li&gt;
&lt;li&gt;Work out when things are due&lt;&#x2F;li&gt;
&lt;li&gt;Keep track of your scores&lt;&#x2F;li&gt;
&lt;li&gt;Keep track of your progress&lt;&#x2F;li&gt;
&lt;li&gt;Get notified when something is due&lt;&#x2F;li&gt;
&lt;li&gt;Share or install template courses with all your subjects&#x2F;coursework already
defined&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;GradeKeep is free and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.github.com&#x2F;mecharius&#x2F;GradeManager&quot;&gt;open source&lt;&#x2F;a&gt; so you are welcome to use it on your own server, modify, fork, make pull requests and so on if you are a Github ninja.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;&#x2F;h2&gt;
&lt;p&gt;Charts from the course dashboard, showing your progress in each subject&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;gradekeep-coursework-management&#x2F;gk_1.png&quot; alt=&quot;Subject Progress&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The subject dashboard - showing assessment weightings, progress and scores&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;gradekeep-coursework-management&#x2F;gk_2.png&quot; alt=&quot;Dashboard Progress&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Various reports are available&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;gradekeep-coursework-management&#x2F;gk_3.png&quot; alt=&quot;Available Reports&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can install an existing course template&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;gradekeep-coursework-management&#x2F;gk_4.png&quot; alt=&quot;Course Templates&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;&#x2F;h2&gt;
&lt;p&gt;The current version is 1.0. This is the first release and has all the basic
functionality. Currently under development for version 2.0 are&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A private API&lt;&#x2F;li&gt;
&lt;li&gt;An Android app&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GasORM Example Application</title>
        <published>2012-04-19T00:00:00+00:00</published>
        <updated>2012-04-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/gasorm-example-application/"/>
        <id>https://willhart.io/post/gasorm-example-application/</id>
        
        <content type="html" xml:base="https://willhart.io/post/gasorm-example-application/">&lt;p&gt;I’ve recently been using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;toopay&#x2F;gas-orm&quot;&gt;GasORM&lt;&#x2F;a&gt; which is a
very neat little Object Relational Mapping (ORM) library for CodeIgniter 2.0+. I
wanted to help out a little bit with this great library so I have written a
little tutorial&lt;&#x2F;p&gt;
&lt;p&gt;This example application is now included as part of the Gas ORM documentation.
It can be found at
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;gasorm-doc.taufanaditya.com&#x2F;example.html&quot;&gt;http:&#x2F;&#x2F;gasorm-doc.taufanaditya.com&#x2F;example.html&lt;&#x2F;a&gt;.
If you are looking for a very simple, efficient and lightweight library for
database interaction then check out GasORM.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Diptrace Hierarchical Schematics</title>
        <published>2012-03-11T00:00:00+00:00</published>
        <updated>2012-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/diptrace-hierarchical-schematics/"/>
        <id>https://willhart.io/post/diptrace-hierarchical-schematics/</id>
        
        <content type="html" xml:base="https://willhart.io/post/diptrace-hierarchical-schematics/">&lt;p&gt;A neat feature of Diptrace is the ability to include “sub-assemblies” as a hierarchy in your schematics. This Diptrace Tutorial runs through creating a hierarchy block and using it in your schematic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=j9pNDn5G7yE&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;diptrace-hierarchical-schematics&#x2F;diptrace_hierarchies_youtubelink.png&quot; alt=&quot;Youtube video link&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Moving away from Arduino</title>
        <published>2012-02-24T00:00:00+00:00</published>
        <updated>2012-02-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/moving-away-from-arduino/"/>
        <id>https://willhart.io/post/moving-away-from-arduino/</id>
        
        <content type="html" xml:base="https://willhart.io/post/moving-away-from-arduino/">&lt;p&gt;Arduinos are great for getting started, they’re easy to use, relatively cheap
and you can find a tonne of information, ideas and support online. For most
people, however, there comes a time when they feel they have outgrown the
Arduino’s capabilities, or want something a bit more flexible, or they just want
to build their own circuits from scratch. Moving away from an Arduino into the
big bad world of “proper” micros can be a bit daunting, so I’ve collected a kind
of (work in progress) top ten list of the things you need to consider when
moving away from the Arduino.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-brand-of-microcontroller&quot;&gt;What brand of microcontroller?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-confusing-bit&quot;&gt;The Confusing Bit&lt;&#x2F;h3&gt;
&lt;p&gt;Any search online about “which microcontroller should I start with” will give
you about a thousand different chips brands, chip types and about twice as many
differing opinions. Where on earth do you start?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-skinny&quot;&gt;The Skinny&lt;&#x2F;h3&gt;
&lt;p&gt;It doesn’t matter - just pick one that looks appealing to you and get on with it!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thats-it&quot;&gt;Thats it?&lt;&#x2F;h3&gt;
&lt;p&gt;Kind of… you can narrow down your search a bit. The most popular micros are
Atmel’s or PICs. There are other brands (i.e. TI make some pretty cheap “dev
boards”) but these are the ones where you will find the most online support and
experience. The Arduino has an Atmel chip inside it, so many people start there,
but I personally chose PIC to start with because … well, I don’t really
remember to be honest!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anything-else-to-read&quot;&gt;Anything else to read?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ladyada.net&#x2F;library&#x2F;picvsavr.html&quot;&gt;Lady Ada Smackdown&lt;&#x2F;a&gt; (PIC vs AVR)&lt;br &#x2F;&gt;
Hmmm… just use google I guess.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;which-microcontroller&quot;&gt;Which microcontroller?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-confusing-bit-1&quot;&gt;The Confusing Bit&lt;&#x2F;h3&gt;
&lt;p&gt;OK, you’ve chosen which brand of microcontroller you would like to use, now to
choose which particular chip! So you visit the manufacturers home page and
there’s a hundred thousand different parts! Where do you start?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-skinny-1&quot;&gt;The Skinny&lt;&#x2F;h3&gt;
&lt;p&gt;Again, it almost doesn’t matter - just pick one that looks appealing to you and
get on with it!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thats-it-1&quot;&gt;Thats it?&lt;&#x2F;h3&gt;
&lt;p&gt;Again, kind of… there are certainly some chips that are better than others. If
you’ve chosen Atmel then its probably worth having a look at the ATmega328 which
is inside the Arduino Uno. If you are looking at a PIC, then something like the
PIC16F628A is a great starting point as it has an internal oscillator (see below
for what that means!) making it dead easy to hook up.&lt;&#x2F;p&gt;
&lt;p&gt;If you know a bit more about what you are doing, then there are online part
selectors which let you put in some parameters and it lists the chips that
match. See the links below.&lt;&#x2F;p&gt;
&lt;p&gt;Another viable option is to check out your favourite electronics store and find
out what they have in stock. Check out the features of the chip online and if
you are happy, just buy it!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anything-else-to-read-1&quot;&gt;Anything else to read?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.atmel.com&#x2F;devices&#x2F;ATMEGA328.aspx&quot;&gt;ATmega328 web page&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.microchip.com&#x2F;wwwproducts&#x2F;Devices.aspx?dDocName=en010210&quot;&gt;PIC16F628A web page&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.microchip.com&#x2F;productselector&#x2F;MCUProductSelector.html&quot;&gt;Microchip Product Selector&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;eeeek-your-datasheet-is-huge&quot;&gt;Eeeek, your datasheet is huge!&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-confusing-bit-2&quot;&gt;The Confusing Bit&lt;&#x2F;h3&gt;
&lt;p&gt;You’ve chosen your chip, put your hard earned down and its arrived in the mail.
Time to jump online and work out to use the silly thing! You browse to the
product home page and click on the “datasheet” link. Up pops a 300 page document
written by a electrical engineer with a PhD in confusing the lights out of you.
What the hell, was that really necessary?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-skinny-2&quot;&gt;The Skinny&lt;&#x2F;h3&gt;
&lt;p&gt;The short answer is yes… (almost) everything you will ever need is in this
document. Read it, print it out, sleep with it under your pillow and you’ll be
fine.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thats-it-2&quot;&gt;Thats it?&lt;&#x2F;h3&gt;
&lt;p&gt;Not really. In reality, there are only a few things that are really important in
a datasheet - you really need to know&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;what registers (see below) the device has and what the different bits do&lt;&#x2F;li&gt;
&lt;li&gt;how to configure the device&lt;&#x2F;li&gt;
&lt;li&gt;what features to turn on or off&lt;&#x2F;li&gt;
&lt;li&gt;what to connect to which pins&lt;&#x2F;li&gt;
&lt;li&gt;how much power to put into the device&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thats all well and good, but where do you find these mysterious things. Well,
er… glad you asked. The best way to find these things is to … (drum roll)
read the datasheet!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anything-else-to-read-2&quot;&gt;Anything else to read?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.atmel.com&#x2F;devices&#x2F;ATMEGA328.aspx&quot;&gt;ATmega328 web page&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.microchip.com&#x2F;wwwproducts&#x2F;Devices.aspx?dDocName=en010210&quot;&gt;PIC16F628A web page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;do-i-need-a-development-board&quot;&gt;Do I need a development board?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-confusing-bit-3&quot;&gt;The Confusing Bit&lt;&#x2F;h3&gt;
&lt;p&gt;Egad, there are more options! I’m ready to go, should I get a development board,
with buttons, LCDs etc, or should I just use a breadboard?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-skinny-3&quot;&gt;The Skinny&lt;&#x2F;h3&gt;
&lt;p&gt;No, it is not compulsory to have a dev board.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thats-it-3&quot;&gt;Thats it?&lt;&#x2F;h3&gt;
&lt;p&gt;Well this one is really up to you. The cheapest and most flexible way is to buy
the individual components from someone like mouser, digikey or farnell and
breadboard a circuit. If you build on a breadboard (or even your own custom PCB)
there is the added advantage of being able to learn more about the hardware at
the same time. You can always use google to find sample circuits (or open source
dev boards) and build those yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Its quite a bit more expensive, but possible simpler and faster to buy a
prebuilt development board from someone like Olimex, Mikro Elektroinica, ebay,
etc. You can select a board with the features you want to learn and the hardware
part is all built for you. Many people would say that you aren’t getting the
full learning experience by doing this and I would tend to agree!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anything-else-to-read-3&quot;&gt;Anything else to read?&lt;&#x2F;h3&gt;
&lt;p&gt;Google is your friend&lt;&#x2F;p&gt;
&lt;h2 id=&quot;do-i-need-to-make-my-own-pcb&quot;&gt;Do I need to make my own PCB?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-confusing-bit-4&quot;&gt;The Confusing Bit&lt;&#x2F;h3&gt;
&lt;p&gt;With the Arduino I only have to plug things in to the pin headers, or into a
shield. With another microcontroller, do I have to make my own PCB?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-skinny-4&quot;&gt;The Skinny&lt;&#x2F;h3&gt;
&lt;p&gt;No, it is not really compulsory to have your own PCB made.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thats-it-4&quot;&gt;Thats it?&lt;&#x2F;h3&gt;
&lt;p&gt;This is a similar answer to the previous question, and it depends on your
application. If you use through-hole components, then you will be able to use a
breadboard to build a working circuit. If you want something more permanent,
then veroboard or perfboard is a good option.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, I like nothing more than to have a custom made PCB fitting perfectly
into the enclosure I designed for it. Here you can either make your own (plenty
of tutorials about that on the internet - I use acetate sheets, a laminator for
toner transfer and ammonium persulphate but there are tonnes of other&#x2F;better
methods around) or get someone like Seeedstudio, iTead Studio, pcb cart etc to
make you a couple of prototypes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anything-else-to-read-4&quot;&gt;Anything else to read?&lt;&#x2F;h3&gt;
&lt;p&gt;Google is your friend&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Diptrace Libraries and Patterns</title>
        <published>2012-02-22T00:00:00+00:00</published>
        <updated>2012-02-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/diptrace-libraries-and-patterns/"/>
        <id>https://willhart.io/post/diptrace-libraries-and-patterns/</id>
        
        <content type="html" xml:base="https://willhart.io/post/diptrace-libraries-and-patterns/">&lt;p&gt;Diptrace makes it really easy to make your own patterns (physical footprints)
and components (electronic footprints) for your designs. There are tonnes of
‘wizard’ options which mean if you can’t find something the library you can be
up and running in a few moments.&lt;&#x2F;p&gt;
&lt;p&gt;In my first foray into video tutorials, I show you my approach to Diptrace
component and pattern libraries&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;bIiXPo-vnRA&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;diptrace-libraries-and-patterns&#x2F;diptrace_libraries_youtubelink.png&quot; alt=&quot;Youtube video link&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SMD Prototype PCB</title>
        <published>2012-02-18T00:00:00+00:00</published>
        <updated>2012-02-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/smd-prototype-pcb/"/>
        <id>https://willhart.io/post/smd-prototype-pcb/</id>
        
        <content type="html" xml:base="https://willhart.io/post/smd-prototype-pcb/">&lt;p&gt;I frequently come up with ideas for projects. If I really like the idea, I draw
up the schematic and then maybe breadboard it. If I think the idea might be
useful I normally try to make something a bit more permanent. This is fine for
through hole devices - a slab of vero board, a couple of components from my
through hole collection and away we go, however it is not so great for SMD
circuits. I decided I needed to build and SMD prototype board.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been enticed into trying out SMD designs, partly because there is a better
range of components, partly because the designs are smaller and mostly because
it’s a new challenge. SMD designs are all well and good, but they makes bread
boarding extremely difficult and more or less require a custom PCB every time
you want to mock up a design. I could make the boards myself, but as I’m
studying full time I don’t have all the time in the world so the decision is
normally to try and buy one. What tends to happen then is I do the sums and
realise that I don’t really need to spend 40 quid to make some transistor logic
gates, and the project gets filed away.&lt;&#x2F;p&gt;
&lt;p&gt;A few days ago it hit me… the thing that’s missing in my life is an SMD
prototype PCB, basically an “SMD breadboard”. After some ebay searching and a
bit of head scratching I realised that there wasn’t much out there that I would
actually like to pay for. So I decided to design one myself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;specification&quot;&gt;Specification&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing I did was sit down and try to work out what I wanted from the PCB. The basic idea is to build an SMD Prototype PCB that can be used flexibly either as a breadboard &#x2F; breakout, or as a PCB in its own right. SMD parts can be soldered to it and prototype circuits built. The eventual design concept I came up with was:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Breadboard compatible&lt;&#x2F;li&gt;
&lt;li&gt;Footprints for several SOIC 300 chips&lt;&#x2F;li&gt;
&lt;li&gt;Prototyping area for through hole components&lt;&#x2F;li&gt;
&lt;li&gt;ICSP and XTAL connectors for one of the SOIC footprints&lt;&#x2F;li&gt;
&lt;li&gt;A place for one 0805 chip on each SOIC pin&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;the-design&quot;&gt;The Design&lt;&#x2F;h2&gt;
&lt;p&gt;With the specification on board, I set about routing the board. I started using
a Schematic and converting this into a PCB, but in the end ditched the schematic
and just worked on the PCB manually. The Rev A design I came up with is shown
below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;smd-prototype-pcb&#x2F;smd_proto_board_1.png&quot; alt=&quot;SMD Prototype Board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I decided to use the 0805 footprints on each SOIC pin as a solder jumper if no
component is required. In practice, this requires either a 0 ohm resistor on the
pad, or a bit of wire as a solder jumper. I also pulled the solder mask back on
the through hole area to match the approach of a copper clad vero board.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;p&gt;The basic idea is to solder your components on the footprint and then hookup
with jumper wire where its needed. I’ve tried to find a balance in the design
between pre wired connections and flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;smd-prototype-pcb&#x2F;soic_dev_breadboard.jpg&quot; alt=&quot;SMD Prototype Board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The image above shows the board with a PIC 28 pin device and a 24 pin 16 channel
LED driver. There is a slight misalignment between the two SOIC sections meaning
it takes a second or two to push it into the breadboard. I’m about to wire this
one up to control the LED matrix via the LED driver.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Svalbard Photography</title>
        <published>2012-01-28T00:00:00+00:00</published>
        <updated>2012-01-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/svalbard-photography/"/>
        <id>https://willhart.io/post/svalbard-photography/</id>
        
        <content type="html" xml:base="https://willhart.io/post/svalbard-photography/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;svalbard-photography&#x2F;svalbard_header.jpg&quot; alt=&quot;The Polar Pioneer, Svalbard 2011&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In August 2011 my wife and I were lucky enough to travel on an Aurora
Expeditions ship - the &lt;em&gt;Polar Pioneer&lt;&#x2F;em&gt; - on a circumnavigation of Spitsbergen.
This was an absolutely unforgettable experience, and we were lucky to travel
parts of the Arctic whilst there is still one to see. We took several thousand
photographs on our trip and have included some of them in this short slide show,
linked below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;gMbyqPFETMk&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;svalbard-photography&#x2F;svalbard_youtube_splash.png&quot; alt=&quot;Svalbard Photograph Slideshow link&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The most incredible thing about being somewhere like the Arctic was the sense of isolation. We only had our little ship for company, and were only connected to the world by a satellite phone which was seldom used by passengers. The result was that we were truly immersed in the wonderful environment, and many of our concerns and stresses from “the world” were completely forgotten. We were left to appreciate the immensity of the Arctic - glaciers that towered over you, arctic deserts stretching to the horizons, and many incredible creatures. Of course our favourite was the polar bears, but we were also lucky enough to see beluga whales, fin whales, walrus and tonnes of birds.&lt;&#x2F;p&gt;
&lt;p&gt;I would highly recommend this kind of small ship cruise to anybody with an interest in the Arctic, or nature, or the spirit of adventure. Aurora also operate some voyages in the Antarctic, and when funds once again allow it we will definitely be considering an Antarctic voyage.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Chez D&#x27;Alert: PIC Countdown Alarm</title>
        <published>2012-01-24T00:00:00+00:00</published>
        <updated>2012-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/chez-dalert-pic-countdown-alarm/"/>
        <id>https://willhart.io/post/chez-dalert-pic-countdown-alarm/</id>
        
        <content type="html" xml:base="https://willhart.io/post/chez-dalert-pic-countdown-alarm/">&lt;p&gt;For my Dad’s 60th birthday, I wanted to make him something a bit special. Dad
spends a fair bit of his spare time in his shed “doing woodwork” and building
some really nice pieces of furniture. However he is a busy man and sometimes
only has a little bit of spare time to plane a few bits of timber, use a
thicknesser or whatever woodworky stuff he does. So I decided the best possible
thing to make would be a PIC countdown Alarm so that he can use his time in the
shed efficiently&lt;&#x2F;p&gt;
&lt;p&gt;As a friend of mine mentioned, he can even use it to time lacquer and stains for
drying and curing, so its not all about getting his nose back to the grindstone
on time!&lt;&#x2F;p&gt;
&lt;p&gt;Thus, the Chez D’Alert (pronounced Shed Alert in Australian) was born, a PIC
based countdown timer with a laser cut body. In this article I’m going to
describe a bit about the design process, and in particular some of the lessons I
learned through the process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-pic-countdown-alarm-design&quot;&gt;The PIC Countdown Alarm Design&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;enclosure&quot;&gt;Enclosure&lt;&#x2F;h3&gt;
&lt;p&gt;Custom laser cut acrylic, designed in SolidWorks and transferred to Inkscape for
laser cutting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;&#x2F;h3&gt;
&lt;p&gt;Four buttons - +1 minute, +15minutes, start&#x2F;stop and reset. Custom software
debounce routine.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;&#x2F;h3&gt;
&lt;p&gt;A seven segment LED display, multiplexed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;electronics&quot;&gt;Electronics&lt;&#x2F;h3&gt;
&lt;p&gt;Main controller board with PIC16F877A. IO board with buttons and displays.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As this was my first properly complex, permanent electronics project I didn’t
try to do anything too flashy. Basically the PIC countdown timer has four
buttons, a seven segment display, a buzzer, some LEDs and a microcontroller to
control it all. You set the time with two buttons, then start&#x2F;stop and reset the
timer using the other two buttons. When the timer runs out, the buzzer beeps and
the LEDs flash.&lt;&#x2F;p&gt;
&lt;p&gt;I put a bit of effort into the enclosure which is basically a laser cut version
of Melbourne’s skyline. I’ve seen quite a few articles and forum discussions
about whether you should design your PCB or enclosure first, however in this
case the enclosure would be custom made, and as size was not a particular issue
I decided to design the schematic and PCB first. The final design had two boards&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;an IO board with buttons and a display, and&lt;&#x2F;li&gt;
&lt;li&gt;a main board with the PIC, buzzer, and most of the passive components.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This was partly because the IO board required very thin traces so I had it
manufactured, but also because it fit better in an enclosure with the buttons
and display slightly elevated.&lt;&#x2F;p&gt;
&lt;p&gt;The original design had a PIC16F628A, however it quickly became apparent that a
board with more IO pins would be a better option. From Rev C of the main board I
switched to a PIC16F877A, mostly because my preferred online hobby store had
them in stock!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-final-product&quot;&gt;The Final Product&lt;&#x2F;h2&gt;
&lt;p&gt;So, after quite a bit of back and forth and a lot of revisions, the final
product was completed. Some photos are shown below, and I hope to have some more
once Dad takes some of it in place (he’s 17,000km away so it takes a while for
the emails to get here).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;chez-dalert-pic-countdown-alarm&#x2F;shed-alert-breadboard.jpg&quot; alt=&quot;Chez D’Alert Breadboard Breadboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;chez-dalert-pic-countdown-alarm&#x2F;shed-alert-revb-board.jpg&quot; alt=&quot;Chez D’Alert RevB Board Rev B Board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;chez-dalert-pic-countdown-alarm&#x2F;shed-alert-revd-board.jpg&quot; alt=&quot;Chez D’Alert RevD Board Rev D Board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There were some issues with the finished design - basically I mucked up in
Solidworks, and as I hadn’t built anything when I sent the enclosure off for
manufacturing, I had the button holes about 10mm from where they should have
been. This was mainly because I had assumed the IO board would be centred on the
main board, but because of the heat sink it was not. The enclosure had to be
“customised” later with a drill and some paper labels which ruined the look a
little bit. The original button labels were laser engraved in and looked quite
professional.&lt;&#x2F;p&gt;
&lt;p&gt;One of the features that I wanted to add was to have flash LEDs when the timer
went off. My idea was to have several colours (I settled on white, blue and red)
with two LEDs of each type that were turned on at the same time. To reduce the
number of pins that were required to drive this, I decided to &lt;a href=&quot;&#x2F;chez-dalert-pic-countdown-alarm&quot;&gt;Charlieplex the
LEDs&lt;&#x2F;a&gt;. The circuit is shown below. Basically
by setting the pins to a combination of +5v, GND or “disconnected” I could turn
on just two LEDs at a time by only using four pins. (On reflection it would have
been better to do this with three pins!)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;chez-dalert-pic-countdown-alarm&#x2F;led_charlieplex.png&quot; alt=&quot;Four Pin LED Charliplex&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The code to run this was fairly simple, basically I used the arrays below to OR
with TRISB and PORTB, setting the pins to the correct mode. You can see the full
working version in the C source code attached below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; uchar LED_TRISB_OR[] =
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00111100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; off
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00000100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; blue
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00100000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; white
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00000000&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; red
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; uchar LED_PORTB_OR[] =
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00000000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; off
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00011000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; blue
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00011000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; white
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00100100&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; red
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-few-gotchas&quot;&gt;A Few Gotchas&lt;&#x2F;h2&gt;
&lt;p&gt;I came across a few gotchas throughout the design which I’ll describe here in
the hope that somebody will find them useful!&lt;&#x2F;p&gt;
&lt;p&gt;I ended with about Revision E of the main board and D of the IO board. The
original Rev A designs had a PIC16F628A, however it quickly became apparent that
a board with more IO pins would be a better option. From Rev C of the main board
I switched to a PIC16F877A. I chose this chip because I was time and budget
constrained, and my local hobby store had them in stock. In reality (and if I
had the ability at this stage to comfortably solder SMD parts) an SMD chip with
a real time clock and “nanowatt” power mode would be a better option.&lt;&#x2F;p&gt;
&lt;p&gt;The main electronics issues I ran across were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ICSP - In the first prototype I forget to add an ICSP to my circuit. Don’t do
this! For a prototype you would be insane not to include this port - it only
needs a few connectors but its impossibly painful to try to debug the software
without it!&lt;&#x2F;li&gt;
&lt;li&gt;I had some issues with RA4 on the PIC16F628A, before I re-read the datasheet
and noticed it was an “open drain”. This mean it can’t really be used for
output unless some additional circuitry is used. The lesson learned here is to
thoroughly read the datasheet before ordering any parts and re-read it again
before soldering!&lt;&#x2F;li&gt;
&lt;li&gt;My PCB manufacturing technique was not perfected, and I had some issues with
traces and ground planes being “smushed” during toner transfer and bridging.
The solution was to buy a laminator to do the toner transfer, and to increase
the isolation in eagles DRC rules. In the case of the IO board I had it
manufactured for me.&lt;&#x2F;li&gt;
&lt;li&gt;Sometimes the PICKIT2 would freeze, all lights on, when attempting to read or
program a chip using ICSP. I eventually worked out that this was because the
software had reset the power voltage from 5V to 2.5V. Setting the voltage to
5v again stopped the PICKIT2 from freezing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;better-luck-next-time&quot;&gt;Better Luck Next Time?&lt;&#x2F;h2&gt;
&lt;p&gt;Without meaning to use Dad’s birthday present as a bit of a guinea pig, it has
kind of turned out that way. The experience has taught me a lot about how to
approach my next design task, and in particular the importance of a thorough
testing &#x2F; prototyping &#x2F; breadboarding stage. The PIC Countdown Alarm turned out
ok, but I could probably have got there in a lot fewer iterations with a bit
more effort in the design phase!&lt;&#x2F;p&gt;
&lt;p&gt;If I were to do the project again, or a similar one, I might do a few things
differently:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;micro-selection&quot;&gt;Micro Selection&lt;&#x2F;h3&gt;
&lt;p&gt;I originally chose the PIC16F628A for the project because I had used this
before, had a few development boards built, and was familiar with the basics. On
reflection, this chip is unsuitable for a number of reasons - firstly it didn’t
have enough IO pins, meaning that an additional shift register was required, but
secondly it is not a low power chip. The final chip I selected does not have the
XLP features of some PIC chips, so is probably not ideal, but was what I could
get a hold of in the time&#x2F;budget I had available. For future projects I would
spend a lot more time selecting an appropriate chip, and would be more likely to
order one from RS or something especially (extremely high shipping costs aside).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;component-types&quot;&gt;Component Types&lt;&#x2F;h3&gt;
&lt;p&gt;I used DIP &#x2F; through-hole components for the design but I think for future
projects I would really like to give SMD components a go as it will give me more
room to route the boards and make smaller PCBs. This will require a bit of
experimentation to make sure the PCB manufacturing accuracy is high enough,
or…&lt;&#x2F;p&gt;
&lt;h3 id=&quot;make-vs-buy-pcbs&quot;&gt;Make vs Buy PCBs&lt;&#x2F;h3&gt;
&lt;p&gt;My original plan was to make the PCB as a way of saving a bit of cash and also
because I felt it would be a bit more “personal”. In the end I think it has cost
me more money from buying materials, remaking and certainly has taken a lot
longer with a poorer quality output. The jury is out on this one!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE FROM 2020 Will&lt;&#x2F;strong&gt; the jury is no longer out on this one, since 2012 an absolute truck
load of low-cost, high-quality PCB prototyping services have emerged&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PIC16F628A TMR0 Interrupts</title>
        <published>2012-01-15T00:00:00+00:00</published>
        <updated>2012-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/pic16f628a-tmr0-interrupts/"/>
        <id>https://willhart.io/post/pic16f628a-tmr0-interrupts/</id>
        
        <content type="html" xml:base="https://willhart.io/post/pic16f628a-tmr0-interrupts/">&lt;p&gt;PIC TMR0 Interrupts, (or any PIC interrupts!) can be very confusing to setup,
but the rewards are well worthwhile! They allow you to have something happen
after a certain period of time, or for some interrupt types, something happens
when a button is pushed or a sensor reads a certain value. This means that the
microcontroller can automatically respond to user input. This article shows how
to set up a PIC16F628 TMR0 Interrupt, using MikroC.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-on-earth-are-interrupts&quot;&gt;What on earth are interrupts?&lt;&#x2F;h2&gt;
&lt;p&gt;An interrupt is basically what it sounds like. It is a piece of code that
interrupts the main program and is executed when asked. Once the interrupt code
is executed, the normal program flow resumes. PIC Interrupts can be based on
PORT values (e.g. if PORTB is high) or on a “timer overflow”.&lt;&#x2F;p&gt;
&lt;p&gt;On the PIC16F628A (and most PICs), a register is set aside to act as a counter.
This basically counts upwards as the microcontroller clock “ticks”. Counters are
commonly “8 bits”, meaning they can count from 0 to 255. When the counter tries
to go past 255, it “overflows” and goes back to 0. If the correct settings are
made in the registers, this triggers the PIC TMR0 Interrupt code to run.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-would-i-use-interrupts&quot;&gt;Why would I use interrupts?&lt;&#x2F;h2&gt;
&lt;p&gt;One way to get the same functionality as an interrupt is to put in some sort of
check in your main loop. Say you want to execute some code when a button is
pressed, in your program loop you could have something similar to the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(BUTTON == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;     execute your &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;interrupt code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code looks fairly simple, but what if you have five buttons, or want
something to be checked on a regular basis (say every second). Or what if your
main loop has some extremely intensive calculations going on which means that
your test of whether the button is pushed or not may only happen every 20
seconds or so? Not a very good user experience!&lt;&#x2F;p&gt;
&lt;p&gt;An interrupt basically allows you to offload this functionality from the program
loop and let the micro hardware work out when the button is pushed or a second
has elapsed. This article focuses on PIC TMR0 interrupts, so if you are
interested in the PORT interrupts, then have a look at the datasheet!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;p&gt;I have broken out the interrupt configuration separately in the code below and
the comments should be fairly self explanatory. Basically we tell the micro what
source to use for its timer interrupts, “scale” the timer and then turn on
interrupts.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;OPTION_REG.T0CS&lt;&#x2F;code&gt; bit sets our source for the &lt;code&gt;TIMER0&lt;&#x2F;code&gt; clock. In this case I
am using the PIC16F628A internal clock and hence I clear (set to 0) this bit.&lt;&#x2F;p&gt;
&lt;p&gt;Recall that most TMR0 registers are 8-bit and can only count up to 255. We can
count the number of overflows in our interrupt code to get a certain time
period, or if we are really clever us the inbuilt prescaler to only call the
interrupt after a certain number of loops. If we set the prescaler to 1:64, like
we have below this means that we are only calling the interrupt every 64 times
that the TMR0 register overflows. The last 3 bits of &lt;code&gt;OPTION_REG&lt;&#x2F;code&gt; on the 628A
control the prescalar, and &lt;code&gt;OPTION_REG.PSA&lt;&#x2F;code&gt; sets what the prescaler is applied
to. We clear &lt;code&gt;OPTION_REG.PSA&lt;&#x2F;code&gt; to turn the prescaler on for TMR0 and set the last
three bits to 1 to set a 1:64 ratio. This can be done in one line with the
following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;OPTION_REG |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we set &lt;code&gt;INTCON.GIE&lt;&#x2F;code&gt; and &lt;code&gt;INTCON.T0IE&lt;&#x2F;code&gt; to enable interrupts globally, and
&lt;code&gt;TMR0&lt;&#x2F;code&gt; in particular.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup_interrupts&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clear the TMR0 register
&lt;&#x2F;span&gt;&lt;span&gt;    TMR0 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set up interrupt registers
&lt;&#x2F;span&gt;&lt;span&gt;    OPTION_REG.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T0CS &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clock source is internal instruction clock
&lt;&#x2F;span&gt;&lt;span&gt;    OPTION_REG.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PSA &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; prescaler assigned to TMR0
&lt;&#x2F;span&gt;&lt;span&gt;    OPTION_REG |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the prescaler to 1:64 scale using an or
&lt;&#x2F;span&gt;&lt;span&gt;    INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GIE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable global interrupts
&lt;&#x2F;span&gt;&lt;span&gt;    INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T0IE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable TMR0 interrupt
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main loop is pretty basic - it sets some standard PIC16F628A configurations,
calls the &lt;code&gt;setup_interrupts()&lt;&#x2F;code&gt; function declared above and then loops forever.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some standard PIC16F628A configuration
&lt;&#x2F;span&gt;&lt;span&gt;     TRISA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span&gt;     TRISB = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; input
&lt;&#x2F;span&gt;&lt;span&gt;     PORTA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set PORTA to off
&lt;&#x2F;span&gt;&lt;span&gt;     CMCON = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; turn off comparators
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; setup interrupts
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setup_interrupts&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; loop forever and ever and ever and ...
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we turn the interrupts on, we also need to define an interrupt function. This
is saved at the “interrupt vector” which is basically the location in memory
where the micro goes when an interrupt is called. This is done with the line
void &lt;code&gt;ISR() iv 0x0004&lt;&#x2F;code&gt; below. This declares an interrupt service routine (ISR)
that is located at interrupt vector &lt;code&gt;0x0004&lt;&#x2F;code&gt; in memory. From there its a
standard function!&lt;&#x2F;p&gt;
&lt;p&gt;Note that its considered poor practice to call functions from within your
interrupt, and if you do want a specific function called its best to set a flag
in your interrupt function and process this somewhere in your main loop. The
interrupt function below basically flips PORTA. This can be used to blink an
LED, sound a buzzer or whatever… Once your interrupt routine has run you need
to restart the timer interrupts. This can be done by clearing &lt;code&gt;INTCON.TMR0IF&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the interrupt vector
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ISR&lt;&#x2F;span&gt;&lt;span&gt;() iv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x0004
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TMR0IF &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;amp;&amp;amp;amp; INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T0IE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        PORTA = ~PORTA;
&lt;&#x2F;span&gt;&lt;span&gt;        INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TMR0IF &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unset the interrupt flag for TMR0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-note-on-clocks&quot;&gt;A note on “clocks”&lt;&#x2F;h2&gt;
&lt;p&gt;One of the things I found most confusing when learning about PIC timers was the
concept of clocks, oscillators, resonators, etc. Why did some micros need an
external crystal oscillator, whilst others didn’t? What was the benefit of
having an external crystal, and what was the difference between a clock and a
crystal?&lt;&#x2F;p&gt;
&lt;p&gt;To cut to the chase, most micros will need some sort of external timing source
to function at all, and those that have this timing source built in are
frequently not very accurate. The best way to find out whether a timing source
is needed is to read the data sheet, but as an example the PIC16F628A has an
internal crystal but the PIC16F877A does not.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Live Electric Vehicle Telemetry Software</title>
        <published>2012-01-14T00:00:00+00:00</published>
        <updated>2012-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/live-telemetry-software/"/>
        <id>https://willhart.io/post/live-telemetry-software/</id>
        
        <content type="html" xml:base="https://willhart.io/post/live-telemetry-software/">&lt;p&gt;As part of my course we can get involved in the Formula Student race team. At my
university this is quite a big deal with three distinct projects - a petrol car,
an electric car and a bespoke twin cylinder engine. I’m working mostly on the
electric car and volunteered myself to update our data logging &#x2F; telemetry
software.&lt;&#x2F;p&gt;
&lt;p&gt;This allows us to record and replay the data in real time from our onboard
CANBus network. Luckily we had existing C++ based CANBus libraries for decoding
the information, and an array of sensors &#x2F; telemetry hardware already on board.
The scope was therefore to build a student run version of something like Pi
Toolbox.&lt;&#x2F;p&gt;
&lt;p&gt;This is important for testing and troubleshooting of the motor and for safety
reasons - our drive is strapped next to some pretty mean batteries and we want
to know if they are getting hot!&lt;&#x2F;p&gt;
&lt;p&gt;This project is ongoing, and is based on a C# desktop application and SQLite
database. Currently we can log decoded CANBus messages and there are
“sparklines” showing all our sensor readings. I’m working on a simple graph
control after having had difficulty finding something lightweight and compatible
with WPF. As it gets more complete I’ll throw up some screenshots!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PIC16F628A Serial Communication</title>
        <published>2012-01-14T00:00:00+00:00</published>
        <updated>2012-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/pic16f628a-serial-communication/"/>
        <id>https://willhart.io/post/pic16f628a-serial-communication/</id>
        
        <content type="html" xml:base="https://willhart.io/post/pic16f628a-serial-communication/">&lt;p&gt;Serial communication is used extensively in electronics projects, and many
microcontrollers come with some form of USART on board. I’m going to describe
here how I got PIC USART serial communication working with a PIC16F628A, and got
the PIC talking to an Arduino Uno. For this I’m using a PICKIT2, my own
PIC16F628A breakout board and MicroC compiler because it has a handy serial
library all built in. If you are using MPLAB or some other development tool, you
can find the locations of the relevant registers in the datasheets for &lt;code&gt;TXSTA&lt;&#x2F;code&gt; and
&lt;code&gt;RCSTA&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;p&gt;The code itself is very simple - most of the setup is done using two registers -
&lt;code&gt;TXSTA&lt;&#x2F;code&gt; and &lt;code&gt;RCSTA&lt;&#x2F;code&gt;. There are three main steps in setting up serial transmission on
the PIC16F628A:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Enable serial communication&lt;&#x2F;li&gt;
&lt;li&gt;Set up the communication mode&lt;&#x2F;li&gt;
&lt;li&gt;Set the baud rate&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The best source of information is (of course) the datasheet, however… to
enable serial communication we set (i.e. make equal to 1) &lt;code&gt;TXSTA.TXEN&lt;&#x2F;code&gt; and
&lt;code&gt;RCSTA.SPEN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We then set to 8 bit mode (there is quite a bit of information in the datasheet
about 9 bit mode, but for this simple example probably not relevant) by clearing
&lt;code&gt;TXSTA.TX9&lt;&#x2F;code&gt; and &lt;code&gt;RCSTA.RX9&lt;&#x2F;code&gt; (i.e. making equal to 0). The 16F628A can run in
either synchronous or asynchronous serial modes, but here we set asynchronous by
clearing &lt;code&gt;TXSTA.SYNC&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some standard PIC16F628A configuration
&lt;&#x2F;span&gt;&lt;span&gt;     TRISA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span&gt;     TRISB = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; input
&lt;&#x2F;span&gt;&lt;span&gt;     PORTA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set PORTA to off
&lt;&#x2F;span&gt;&lt;span&gt;     CMCON = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; turn off comparators by setting the last three bits to 111
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Step 1, enable USART
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TXEN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transmission enabled
&lt;&#x2F;span&gt;&lt;span&gt;     RCSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SPEN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable serial port
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Step 2, Set 8 bit, asynchronous continuous mode
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TX9 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 8 bit transmission
&lt;&#x2F;span&gt;&lt;span&gt;     RCSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RX9 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 8 bit reception
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYNC &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; asynchronous mode
&lt;&#x2F;span&gt;&lt;span&gt;     RCSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CREN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable continuous receive mode
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Step 3, Set the baud rate using the built in baud rate generator
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BRGH &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set baud rate generator high
&lt;&#x2F;span&gt;&lt;span&gt;     SPBRG = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00011001&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the baud rate to 9600kb, Asynchronous mode BTGH=1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initialise the library and wait for it to start
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UART1_Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ok, now some dummy code... (loop forever and ever and ever and ...)
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; just send some information every second
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;     {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UART1_Write_Text&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sending some text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wait one second
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then built a very basic Arduino sketch, from memory (and untested) something
along the lines of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;         Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-happens&quot;&gt;What happens?&lt;&#x2F;h2&gt;
&lt;p&gt;Wire up the RX and TX ports from the PIC16F628A to the TX and RX ports of the
Arduino. Compile the sketch, program the PIC and then open up the Arduino serial
monitor. Every second or so you should see a message appear on the serial
monitor… &lt;code&gt;Sending some text&lt;&#x2F;code&gt;. There you go - your first serial communication!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using software PWM on Arduino</title>
        <published>2012-01-14T00:00:00+00:00</published>
        <updated>2012-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/software-pwm-on-an-arduino/"/>
        <id>https://willhart.io/post/software-pwm-on-an-arduino/</id>
        
        <content type="html" xml:base="https://willhart.io/post/software-pwm-on-an-arduino/">&lt;p&gt;The Arduino Uno has six PWM ports, but not every micro-controller has this many.
In this tutorial I will show you how to implement software PWM. By using a
potentiometer to input a desired level we can then control the brightness of an
LED on another pin.&lt;&#x2F;p&gt;
&lt;p&gt;First of all I’m going to assume you know what PWM is. If you don’t, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pulse-width_modulation&quot;&gt;Wikipedia
is your friend&lt;&#x2F;a&gt;. Basically
PWM uses a digital port to approximate an analog port. It does this by setting a
percentage of a set cycle to HIGH, and the rest to LOW. When this repeats really
fast (say 10,000 times a second) the voltage averages out to somewhere in
between HIGH and LOW. You can set the voltage by determining how much of the
cycle is HIGH and how much is LOW (the duty cycle). Ok, carry on!&lt;&#x2F;p&gt;
&lt;p&gt;The circuit setup is pretty basic. Simply set up a potentiometer between +5v and
GND, and connect the wiper (the middle pin) to an analog input - in this case
analog pin 1 on the Arduino. An LED is then connected to a digital output pin
(digital pin 8), and you can see on the schematic that it is placed after two
Resistance - Capacitor (RC) filters. If you would like to know more about RC
filters, then I recommend you look at EEVBlog
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.eevblog.com&#x2F;2011&#x2F;12&#x2F;07&#x2F;eevblog-225-lab-power-supply-design-part-4-pwm-control&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.eevblog.com&#x2F;2011&#x2F;12&#x2F;07&#x2F;eevblog-225-lab-power-supply-design-part-4-pwm-control&#x2F;&lt;&#x2F;a&gt; - the post that inspired this tutorial! Dave gives quite a bit of information on
RC filters on this post and shows how to use LTSpice to simulate. I highly
recommend you have a look at this video!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;software-pwm-on-an-arduino&#x2F;softwarepwm_schematic-1024x695.png&quot; alt=&quot;Software PWM schematic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may think that my capacitor&#x2F;resistor values area bit strange in the
schematic, well thats because I just grabbed what was at the top of my bits box!
If you were doing this in “production” you would take a lot more care selecting
your values - again, have a look at Dave’s post for more information. You can
see the circuit setup in Fritzing below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;software-pwm-on-an-arduino&#x2F;softwarepwm-circuit_bb-845x1024.png&quot; alt=&quot;SoftwarePWM circuit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And then the following code was used:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* POT controlled software PWM                                *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                                            *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Code written by William Hart, 2011                         *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* http:&#x2F;&#x2F;www.williamhart.info                                *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                                            *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* This is a very simple circuit which uses a potentiometer   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* to set an analog input and then uses this input to drive a *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* PWM signal using a standard (non-PWM) port on the Arduino. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Serial.println(microsecondsToClockCycles(1)); &#x2F;&#x2F; gives a result of 16 clock cycles per microsecond
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; define pins
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;ADJ_PIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Adjustment pin is analog 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PWM_PIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PWM output pin is digital 8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; setup PWM values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PWM_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;300 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PWM Hz, must be greater than 60Hz to avoid delayMicroseconds issues
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;MAX_V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5.00 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the maximum voltage we can output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; cycle_length;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; v_out;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; duty_cycle;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; on_time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; off_time;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; start up serial for debugging
&lt;&#x2F;span&gt;&lt;span&gt;  Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set pin states
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(ADJ_PIN, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, OUTPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; calculate the cycle length
&lt;&#x2F;span&gt;&lt;span&gt;  cycle_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;PWM_FREQ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the length of a single cycle of the PWM signal
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read in the potentiometer value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; val = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;analogRead&lt;&#x2F;span&gt;&lt;span&gt;(ADJ_PIN);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; map the pot value to the PWM value - 0-5V, to two decimal places
&lt;&#x2F;span&gt;&lt;span&gt;  v_out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(val, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  duty_cycle = (v_out&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; MAX_V; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; work out what percentage of the PWM cycle we should set high
&lt;&#x2F;span&gt;&lt;span&gt;  on_time = duty_cycle * cycle_length;
&lt;&#x2F;span&gt;&lt;span&gt;  off_time = cycle_length - on_time;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now set high, then delay for the duty_cycle percentage * cycle_length
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(on_time &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, HIGH);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delayMicroseconds&lt;&#x2F;span&gt;&lt;span&gt;(on_time);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delayMicroseconds&lt;&#x2F;span&gt;&lt;span&gt;(off_time);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Phew, what a lump of code! Once you break it down though, its quite simple. The
basic principle is this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setup : Work out how long our cycle is&lt;&#x2F;li&gt;
&lt;li&gt;Loop:
&lt;ol&gt;
&lt;li&gt;Read the potentiometer value and determine the output voltage we would like&lt;&#x2F;li&gt;
&lt;li&gt;Set the digital port high for the correct portion of the cycle&lt;&#x2F;li&gt;
&lt;li&gt;Set the digital port LOW for the remainder of the cycle&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I use the &lt;code&gt;delayMicroseconds()&lt;&#x2F;code&gt; function from Arduino to time the PWM cycle,
however this has the limitation of being able to delay for a maximum of around
16,000 microseconds. This means that we can’t set value below 61Hz for our PWM
frequency. This could be remedied by a more intelligent use of &lt;code&gt;delay()&lt;&#x2F;code&gt;,
however I leave this as an exercise for you!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Charlieplexing LEDs with Arduino</title>
        <published>2011-12-13T00:00:00+00:00</published>
        <updated>2011-12-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/charlieplexing-leds-with-arduino/"/>
        <id>https://willhart.io/post/charlieplexing-leds-with-arduino/</id>
        
        <content type="html" xml:base="https://willhart.io/post/charlieplexing-leds-with-arduino/">&lt;p&gt;You can never have enough pins on your micro-controller, right? Plug in an LCD
display, a couple of status LEDs and a few sensors and you are already up to
more pins than most entry level micros. Sure, you can plug in a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shift_register&quot;&gt;shift
register&lt;&#x2F;a&gt; like the 8-bit
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ti.com&#x2F;lit&#x2F;ds&#x2F;symlink&#x2F;sn74hc595.pdf&quot;&gt;74HC595&lt;&#x2F;a&gt;, but is that the only
way?&lt;&#x2F;p&gt;
&lt;p&gt;One less common way is to use a technique called
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Charlieplex&quot;&gt;Charlieplexing&lt;&#x2F;a&gt;. You can Charlieplex
a bunch of LEDs from a few Arduino ports, and save those precious ports for
something exciting! In the following tutorial, I’m going to show you how to use
an Arduino and this charlieplexing technique to use 3 output pins to control 6
LEDs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-charlieplexing&quot;&gt;What is Charlieplexing?&lt;&#x2F;h2&gt;
&lt;p&gt;If you have a quick scan of the charlieplex Wiki entry, you can see that this
technique allows you to drive $n^2 - n$ LEDs using only n Arduino pins. What
does that mean? Well in our case we have 3 pins, which will allow us to drive
$3^2 - 3 = 6$ LEDs. This simple technique basically uses the properties of LEDs
being diodes, and therefore only allowing current (within limits of course) to
pass in one direction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-do-i-charlieplex&quot;&gt;How do I Charlieplex?&lt;&#x2F;h2&gt;
&lt;p&gt;A simple LED charlieplex circuit can be setup using my Arduino Uno like the
circuit diagram below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;charlieplexing-leds-with-arduino&#x2F;charlieplex_schematic.png&quot; alt=&quot;Charlieplex Eagle Schematic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plugging into my breadboard gives the following physical circuit - its a bit
messy but take your time and you should see the pattern!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;charlieplexing-leds-with-arduino&#x2F;charlieplex_breadboard.png&quot; alt=&quot;Fritzing Circuit, Charlieplex LEDs on an Arduino&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Basically, the circuit involves setting up three Arduino pins. For each pair of
pins we put two LEDs between them, with on LED being placed in each direction.
(Remember LEDs have an anode and a cathode, usually the longer leg being the +
leg or the anode). The clever bit about the charlieplex technique is recognising
that we can set pins (on the Arduino as well) to one of three states:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;HIGH - usually +5v&lt;&#x2F;li&gt;
&lt;li&gt;LOW - usually 0v&lt;&#x2F;li&gt;
&lt;li&gt;High Impedence - disconnected&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Lets use an example. Have a look at the circuit diagram above. First we set the
Arduino pin 5 to HIGH, pin 6 to High Impedance and pin 7 to LOW (more on how we
do this later). Now, lets follow the current through from pin 5 (note we are
talking about conventional current, not electron flow). We can see that there
are four LEDs connected to this pin - the first two linked to pin 6 and the last
two linked to pin 7. We can ignore two of these LEDs as they are the “wrong way
around” and blocking current flow.&lt;&#x2F;p&gt;
&lt;p&gt;Now recall that we set pin 6 to this high impedance state, which means it is in
effect disconnected. As pin 7 is set to low, we can see that current will flow
along from pin 5, then through the LED connected between pin 5 and pin 7. (This
is the 5th LED along). In this same fashion we can then set one of each of the
three pins to high, low and high impedance to control which LED is switched on.&lt;&#x2F;p&gt;
&lt;p&gt;I have provided some sample Arduino code below to show this in action. Note that
the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.arduino.cc&#x2F;en&#x2F;Reference&#x2F;Constants&quot;&gt;Arduino reference&lt;&#x2F;a&gt; says&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Arduino (Atmega) pins configured as &lt;code&gt;INPUT&lt;&#x2F;code&gt; with &lt;code&gt;pinMode()&lt;&#x2F;code&gt; are said to be in
a high-impedance state.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This means we can just set a pin to input mode using &lt;code&gt;pinMode(pin_number, INPUT);&lt;&#x2F;code&gt; and it will count as disconnected.&lt;&#x2F;p&gt;
&lt;p&gt;I used a form of Charlieplexing on my PIC Countdown Timer to light up three sets
of two LEDs using only four pins. You can see the schematic and some photos
through the link.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Charlieplexing 6 LEDs with 3 Pins  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Code written by William Hart, 2011 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* http:&#x2F;&#x2F;www.williamhart.info        *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Uses 3 pins to power a network of  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 6 LEDs using the charlieplexing    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* technique.                         *&#x2F; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;LED_A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;LED_B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;LED_C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; first set all pins to input, or high impedance
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (not strictly necessary as all pins are inputs by default)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; run through a sample loop, lighting each LED
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in turn and holding for half a second.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, LED_B);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, LED_A);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, LED_A); 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, LED_C);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, LED_C);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, LED_B);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;high_pin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;low_pin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reset all the pins
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reset_pins&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the high and low pins to output
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(high_pin, OUTPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(low_pin, OUTPUT);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set high pin to logic high, low to logic low
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(high_pin, HIGH);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(low_pin,LOW);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reset_pins&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; start by ensuring all pins are at input and low
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, INPUT); 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
