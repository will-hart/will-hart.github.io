<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>William Hart | willhart.io - tutorials</title>
    <subtitle>My little internet home page, full of uninteresting musings and thinking out louds.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://willhart.io/tag/tutorials/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://willhart.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2021-08-29T00:00:00+00:00</updated>
    <id>https://willhart.io/tag/tutorials/atom.xml</id>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 4 - Extending commands</title>
        <published>2021-08-29T00:00:00+00:00</published>
        <updated>2021-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part4/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part4/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part4/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1&lt;&#x2F;a&gt; of this
tutorial series we set up a Tauri and create-react-app app and added a basic
non-functional counter. In &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;part
2&lt;&#x2F;a&gt; we created and invoked
a command for incrementing our counter. In &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;part
3&lt;&#x2F;a&gt; we created and invoked
a command for incrementing our counter.&lt;&#x2F;p&gt;
&lt;p&gt;In this part, we will update our command and hooks to support multiple different
counters indexed by ID.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-concept&quot;&gt;Basic concept&lt;&#x2F;h2&gt;
&lt;p&gt;If you recall from &lt;a href=&quot;&#x2F;post&#x2F;20210830_tauri_create_react_app_tutorial_part3&quot;&gt;part 3 of this
series&lt;&#x2F;a&gt;, the &lt;code&gt;useSWR&lt;&#x2F;code&gt; uses
the first argument as a &lt;code&gt;key&lt;&#x2F;code&gt; to cache queries. The key can be an array, and the
key is passed to the &lt;code&gt;fetcher&lt;&#x2F;code&gt; function as arguments. We’re going to use the key
to store a &lt;code&gt;counterId&lt;&#x2F;code&gt; variable that we can use to maintain separate counters.
We’ll also need to update our commands in the rust code to support an ID.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-our-hook-to-support-counter-ids&quot;&gt;Update our hook to support counter Ids&lt;&#x2F;h2&gt;
&lt;p&gt;We need to update our &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hook in &lt;code&gt;useInvoke.tsx&lt;&#x2F;code&gt; to support this new
requirement. We can start by updating the fetcher to take an &lt;code&gt;id&lt;&#x2F;code&gt; as an
argument:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invokeFetcher &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Record&amp;lt;string, any&amp;gt;, TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: number,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: TArgs
&lt;&#x2F;span&gt;&lt;span&gt;): Promise&amp;lt;TResult&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;, { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main change here is that we are now taking an &lt;code&gt;id&lt;&#x2F;code&gt; as a second argument, and
spreading it into the args sent to the invoke command. We then need to update
our &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hook to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: number,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;: string
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; run the invoke command to get by ID
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an update function
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData&lt;&#x2F;span&gt;&lt;span&gt;: TResult) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;      ), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unchanged
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now pass the &lt;code&gt;id&lt;&#x2F;code&gt; to the hook, which is used as part of the &lt;code&gt;key&lt;&#x2F;code&gt; in
&lt;code&gt;useSWR&lt;&#x2F;code&gt;. In our &lt;code&gt;update&lt;&#x2F;code&gt; function we add the &lt;code&gt;id&lt;&#x2F;code&gt; into the data payload sent to
&lt;code&gt;invoke&lt;&#x2F;code&gt;. Other than that, not a lot has changed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-our-front-end&quot;&gt;Updating our front end&lt;&#x2F;h2&gt;
&lt;p&gt;It would be nice at this point to factor out the &lt;code&gt;Counter&lt;&#x2F;code&gt; into a new component.
This lets us pass the &lt;code&gt;counterId&lt;&#x2F;code&gt; as a prop. Create a new file, &lt;code&gt;Counter.tsx&lt;&#x2F;code&gt;
and add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;useInvoke &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs &lt;&#x2F;span&gt;&lt;span&gt;= { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;= ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId &lt;&#x2F;span&gt;&lt;span&gt;}: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId&lt;&#x2F;span&gt;&lt;span&gt;: number }) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button onClick&lt;&#x2F;span&gt;&lt;span&gt;={() =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs&lt;&#x2F;span&gt;&lt;span&gt;)}&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counterId&lt;&#x2F;span&gt;&lt;span&gt;}: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is basically copied over from our previous implementation inside &lt;code&gt;App.tsx&lt;&#x2F;code&gt;.
Speaking of which, we can now use our &lt;code&gt;Counter&lt;&#x2F;code&gt; component inside &lt;code&gt;App.tsx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;Counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter counterId&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter counterId&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Counter counterId&lt;&#x2F;span&gt;&lt;span&gt;={&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;} &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’re using three counters here, but two of them point to &lt;code&gt;counterId == 1&lt;&#x2F;code&gt;. If
we run the app now it kind of works, the counters with &lt;code&gt;id == 1&lt;&#x2F;code&gt; increment
together and the counter with &lt;code&gt;id == 2&lt;&#x2F;code&gt; increments separately. However you can
see that the two counters are linked, i.e. they’re modifying the same underlying
counter, but only the counters with the same &lt;code&gt;id&lt;&#x2F;code&gt; visually update when the
increment action is invoked.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-the-rust-command&quot;&gt;Updating the rust command&lt;&#x2F;h2&gt;
&lt;p&gt;To fix this, we need to extend our commands in &lt;code&gt;src-tauri&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt;. Here is
the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tauri::{async_runtime::RwLock, State};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;InnerState = RwLock&amp;lt;HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;&amp;#39;_, InnerState&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Incrementing counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, id, delta);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; hashmap = state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; next_value = *hashmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) + delta;
&lt;&#x2F;span&gt;&lt;span&gt;  hashmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(id, next_value);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(next_value)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;&amp;#39;_, InnerState&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Getting counter value for counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, id);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hashmap = state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(*hashmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’re doing quite a bit here. First of all we’ve removed the &lt;code&gt;AtomicI32&lt;&#x2F;code&gt; and
replaced it with a &lt;code&gt;RwLock&amp;lt;HashMap&amp;lt;i32, i32&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. The main condition here is that
our &lt;code&gt;State&lt;&#x2F;code&gt; can be managed across threads. Here we’re using a read-write lock to
make sure that there can be multiple reads but only one write at a time. We also
added a bit more logging so we can see which &lt;code&gt;counterId&lt;&#x2F;code&gt; is being get or set in
the logs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that we’ve used a &lt;code&gt;RwLock&amp;lt;HashMap&amp;gt;&lt;&#x2F;code&gt; here as our state, but in reality
could use any &lt;code&gt;Send + Sync&lt;&#x2F;code&gt; type, i.e. one that supports threading. This might
be a database, or a file store or something like that in a more complex app.
In addition, the inner state type (currently &lt;code&gt;i32&lt;&#x2F;code&gt;) could be anything that
supports &lt;code&gt;serde::Serialize&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We also need to update the way our state is created in the &lt;code&gt;main()&lt;&#x2F;code&gt; function.
Change the line with &lt;code&gt;manage&lt;&#x2F;code&gt; to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; tauri::Builder
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(RwLock::new(HashMap::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;::new()))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point we can also remove a bunch of unused imports in the &lt;code&gt;main.rs&lt;&#x2F;code&gt;
file. If we run the app we can see that the counters behave as we’d expect, each
incrementing separately and the counters using the same ID updating at the same
time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-app&quot;&gt;Building the app&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we are done developing the app, lets build it and see how large the
binary is and how much memory it uses. To build the app,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; tauri build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The build can take a while as the CRA is built and the rust parts are compiled
in release mode. Once it is built we can look in &lt;code&gt;src-tauri&#x2F;target&#x2F;release&lt;&#x2F;code&gt;. In
the &lt;code&gt;bundle&lt;&#x2F;code&gt; folder there is an &lt;code&gt;msi&lt;&#x2F;code&gt; installer we can use, but there should be
a &lt;code&gt;counter-app.exe&lt;&#x2F;code&gt; directly in the &lt;code&gt;release&lt;&#x2F;code&gt; folder. Mine is about 7MB.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;tauri-create-react-app-tutorial-part4&#x2F;tauri-step2-binary.png&quot; alt=&quot;The binary size of the built Tauri app&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If I run the application I can check the memory footprint. (After first clicking
the increment buttons a bunch of times to make sure everything is working!). Its
a fairly slim application, but with basically no CPU and about 50MB of RAM its
perfectly acceptible out of the box.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;tauri-create-react-app-tutorial-part4&#x2F;tauri-step2-resources.png&quot; alt=&quot;The resource usage of the built Tauri app&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;That’s it, our counter tutorial app is complete! In this part we extended our
command here to support counters with different IDs. The code for this
tutorial can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;0f664071e266d45c153efeabf43c09d588c5c907&quot;&gt;here on
github&lt;&#x2F;a&gt;.
Part 3 of the tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;can be found
here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 3 - Commands as hooks</title>
        <published>2021-08-28T00:00:00+00:00</published>
        <updated>2021-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part3/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part3/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part3/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1&lt;&#x2F;a&gt; of this
tutorial series we set up a Tauri and create-react-app app and added a basic
non-functional counter. In &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;part
2&lt;&#x2F;a&gt; we created and invoked
a command for incrementing our counter.&lt;&#x2F;p&gt;
&lt;p&gt;In this part, we will write a generic hook for invoking and updating hook data.
In theory this hook could be reused for both web APIs or invoked commands by
changing the underlying &lt;code&gt;fetcher&lt;&#x2F;code&gt; used by &lt;code&gt;swr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-swr&quot;&gt;What is SWR&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;swr.vercel.app&#x2F;&quot;&gt;SWR&lt;&#x2F;a&gt; stands for “stale while revalidate”, which is a
lightweight HTTP approach to managing requests to an API, caching data to
improve load times and fetching updates in the background. The benefits of the
react hook from the &lt;code&gt;swr&lt;&#x2F;code&gt; package are that it allows us to define queries by a
key, and then easily re-fetch data when we make changes. It also supports
optimistic UI, so in many ways is a simplified &lt;code&gt;@apollo&#x2F;client&lt;&#x2F;code&gt; without
requiring a GraphQL endpoint (although it supports GraphQL).&lt;&#x2F;p&gt;
&lt;p&gt;To install SWR, &lt;strong&gt;first make sure that the Tauri app isn’t running&lt;&#x2F;strong&gt;. Then we
can run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add swr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the SWR library looks something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;code&gt;my&#x2F;api&lt;&#x2F;code&gt; bit is a key that is use to refer to the specific query, while
&lt;code&gt;fetcher&lt;&#x2F;code&gt; is some sort of wrapper over a function that calls the API to fetch
the data. In the case of a web request, it might look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetcher &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: string) -&amp;gt; Promise&amp;lt;any&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;myapi.com&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arguments can be provided to the fetcher by passing an array to the &lt;code&gt;useSWR&lt;&#x2F;code&gt;
hook:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This argument will be passed to the &lt;code&gt;fetcher&lt;&#x2F;code&gt;, and forms part of the &lt;code&gt;key&lt;&#x2F;code&gt; that
uniquely identifies the query within the &lt;code&gt;swr&lt;&#x2F;code&gt; cache. We shouldn’t dynamically
create an object here (i.e. &lt;code&gt;useSWR([&#x27;my&#x2F;api&#x27;, { myId }])&lt;&#x2F;code&gt;) as this can prevent
caching.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-a-fetcher-that-invokes-commands&quot;&gt;Writing a fetcher that invokes commands&lt;&#x2F;h2&gt;
&lt;p&gt;This bit is fairly straightforward. Instead of the key being the URL, here we
can just assume the key is the name of the command we want to run. While we’re
at it, lets make the &lt;code&gt;invokeFetcher&lt;&#x2F;code&gt; generic so we can have a typed response.
Create a new file, &lt;code&gt;useInvoke.ts&lt;&#x2F;code&gt; and add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invokeFetcher &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Record&amp;lt;string, any&amp;gt;, TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: TArgs
&lt;&#x2F;span&gt;&lt;span&gt;): Promise&amp;lt;TResult&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;invokeFetcher&lt;&#x2F;code&gt; has two type parameters, the first &lt;code&gt;TArgs&lt;&#x2F;code&gt; defines the
arguments that are passed to the fetcher, here they must extend &lt;code&gt;Record&amp;lt;string, any&amp;gt;&lt;&#x2F;code&gt;. We also have a &lt;code&gt;TResult&lt;&#x2F;code&gt; type which determines what the invoked command
should return. We don’t attempt any error handling here, this is handled by
&lt;code&gt;swr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-the-fetcher-in-an-swr-hook&quot;&gt;Using the fetcher in an swr hook&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can invoke a command via SWR. In our &lt;code&gt;App.tsx&lt;&#x2F;code&gt; from &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part2&quot;&gt;part
2&lt;&#x2F;a&gt; replace the &lt;code&gt;useEffect&lt;&#x2F;code&gt;
with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useRef&lt;&#x2F;span&gt;&lt;span&gt;({ delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;([&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.current], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number)
&lt;&#x2F;span&gt;&lt;span&gt;}, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does two things - firstly we create a &lt;code&gt;ref&lt;&#x2F;code&gt; to hold our arguments to aid
with caching. Then we call &lt;code&gt;useSWR&lt;&#x2F;code&gt; with the name of the command and our
arguments. Finally we just hook up an effect that updates our counter state
whenever the data updates (we’ll remove this in a later step). We can also leave
the &lt;code&gt;invoke&lt;&#x2F;code&gt; command in the &lt;code&gt;useCallback&lt;&#x2F;code&gt; untouched for now.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the arguments for &lt;code&gt;useSWR&lt;&#x2F;code&gt; are in an object where the name of the fields corresponds to the arguments in the rust command function.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;refactor-our-commands-into-get-set-commands&quot;&gt;Refactor our commands into get&#x2F;set commands&lt;&#x2F;h2&gt;
&lt;p&gt;This works pretty well, but we’re kind of mixing our metaphors with the commands
when we get the inital value. For instance we’re passing a &lt;code&gt;delta&lt;&#x2F;code&gt; of &lt;code&gt;0&lt;&#x2F;code&gt; to get
the current value which seems a little bit weird. Lets refactor our command into
two commands - one to get the current value of the app state, and one to
increment the state by a &lt;code&gt;delta&lt;&#x2F;code&gt;. We can add the &lt;code&gt;get_counter&lt;&#x2F;code&gt; hook quite
easily:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;AtomicI32&amp;gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Getting counter value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::SeqCst))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we also have to make sure we register the new command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in the tauri::Builder in main.rs
&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![increment_counter, get_counter])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now replace all our hooks with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increment &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;useSWR&lt;&#x2F;code&gt; hook now calls &lt;code&gt;get_counter&lt;&#x2F;code&gt;, and then inside the &lt;code&gt;useCallback&lt;&#x2F;code&gt; we
invoke the &lt;code&gt;increment_counter&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Another key difference here is we are now using a “bound &lt;code&gt;mutate&lt;&#x2F;code&gt;” function that
is returned by the &lt;code&gt;useSWR&lt;&#x2F;code&gt; hook. This lets us tell &lt;code&gt;swr&lt;&#x2F;code&gt; it should refetch the
data (in this case, invoke the &lt;code&gt;get_counter&lt;&#x2F;code&gt; command). We also pass the &lt;code&gt;result&lt;&#x2F;code&gt;
to the &lt;code&gt;mutate&lt;&#x2F;code&gt; function so that the &lt;code&gt;counter&lt;&#x2F;code&gt; variable is updated
optimistically, as well as &lt;code&gt;false&lt;&#x2F;code&gt; as a second argument to mutate. Passing false
prevents the &lt;code&gt;get_counter&lt;&#x2F;code&gt; command from being invoked again when &lt;code&gt;mutate&lt;&#x2F;code&gt; is
called. We no longer need to store the &lt;code&gt;counter&lt;&#x2F;code&gt; in state, or update when &lt;code&gt;data&lt;&#x2F;code&gt;
updates so both these hooks have been removed.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this case our &lt;code&gt;increment_counter&lt;&#x2F;code&gt; variable returns the value, however in
some cases we may not want to do this, or perhaps we’ve updated one part of
our data which means another part should be re-fetched. In this case we can
omit the second argument to &lt;code&gt;mutate&lt;&#x2F;code&gt;. If you make this change and run the code
you should see that both “incrementing” and “getting” actions are logged.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;write-a-generic-hook&quot;&gt;Write a generic hook&lt;&#x2F;h2&gt;
&lt;p&gt;Lets refactor the invoke logic into a separate hook. At the bottom of
&lt;code&gt;useInvoke.ts&lt;&#x2F;code&gt;, add a new hook function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;TArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Record&amp;lt;string, any&amp;gt;, TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: TArgs,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;: string
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; run the invoke command
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useSWR&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TResult&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCommand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invokeFetcher
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an update function
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData&lt;&#x2F;span&gt;&lt;span&gt;: TResult) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;, { ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;}), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    fetching: !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a fairly standard react hook which is mostly just the code we had
previously in &lt;code&gt;App.tsx&lt;&#x2F;code&gt; moved over. We first call &lt;code&gt;useSWR&lt;&#x2F;code&gt; with our passed in
command, the arguments and the &lt;code&gt;invokeFetcher&lt;&#x2F;code&gt;. We then create a callback for
invoking the update command and cache it using &lt;code&gt;useCallback&lt;&#x2F;code&gt;. This assumes that
the invoke command also returns the updated data, if it doesn’t then we could
replace the body of the &lt;code&gt;useCallback&lt;&#x2F;code&gt; with something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newData&lt;&#x2F;span&gt;&lt;span&gt;: TResult) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCommand&lt;&#x2F;span&gt;&lt;span&gt;, { ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mutate&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would automatically refetch the data after the &lt;code&gt;setCommand&lt;&#x2F;code&gt; command is
invoked.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’re assuming here that the &lt;code&gt;args&lt;&#x2F;code&gt; provided to the hook is stable enough to
be used as a key for &lt;code&gt;useSWR&lt;&#x2F;code&gt;. If necessary this can be cached using
&lt;code&gt;useState&lt;&#x2F;code&gt; and compared when &lt;code&gt;args&lt;&#x2F;code&gt; changes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We then need to update our &lt;code&gt;App.tsx&lt;&#x2F;code&gt; to use this new hook. We can replace
everything except the return with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The button in the &lt;code&gt;App&lt;&#x2F;code&gt; component should be updated to use the &lt;code&gt;update&lt;&#x2F;code&gt; function
as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{update}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {counter}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the app reloads, the counter should work as before.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-second-counter&quot;&gt;Adding a second counter&lt;&#x2F;h2&gt;
&lt;p&gt;To check that the hook is sharing data, we can add a second counter that uses
the same data source as the first. Add a second &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hook into &lt;code&gt;App.tsx&lt;&#x2F;code&gt;
below the first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update2 &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInvoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaultArgs&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then update our returned component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when the app reloads there should be two counters. Clicking either increment
button automatically updates both counters! As the &lt;code&gt;args&lt;&#x2F;code&gt; is the same for these
two &lt;code&gt;useInvoke&lt;&#x2F;code&gt; hooks, they use the same data. In the next part of this series
we’ll take a look at how we can use separate counters.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve now built a generic hook that can invoke the command and manage the
update logic for us. The code for this tutorial can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;3dc42b87f00907e4245bd5c47d9d65a7eacc0316&quot;&gt;here on
github&lt;&#x2F;a&gt;.
Part 2 of the tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;can be found
here&lt;&#x2F;a&gt; and part 4 of the
tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210829_tauri_create_react_app_tutorial_part4&quot;&gt;can be found
here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 2 - Commands</title>
        <published>2021-08-27T00:00:00+00:00</published>
        <updated>2021-08-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part2/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part2/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part2/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1&lt;&#x2F;a&gt; of this
tutorial series we set up a Tauri and create-react-app app and added a basic
non-functional counter. We worked out how to run the app with one command and
use the built-in hot reloading to reload the app.&lt;&#x2F;p&gt;
&lt;p&gt;In this part, we will write a basic rust command and invoke it from the client
side to update our counter in the app.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-commands&quot;&gt;What are commands&lt;&#x2F;h2&gt;
&lt;p&gt;Commands are the way that Tauri supports exchanging data and actions between the
web and rust parts of the code base. Tauri provides a JavaScript API for
“invoking” commands in the rust code.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Commands are just rust functions that are registered when the Tauri app is
built.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;writing-a-command&quot;&gt;Writing a command&lt;&#x2F;h2&gt;
&lt;p&gt;Lets start by writing a simple rust command. Open up &lt;code&gt;src-tauri&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt;,
and above the &lt;code&gt;main()&lt;&#x2F;code&gt; function add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::atomic::{AtomicI32, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tauri::State;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State&amp;lt;AtomicI32&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delta&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Incrementing counter by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, delta);
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span&gt;(delta, Ordering::SeqCst) + delta)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve imported a few things to store a thread-safe number, and we’ve created a
function that takes a &lt;code&gt;tauri::State&lt;&#x2F;code&gt; which contains an &lt;code&gt;AtomicI32&lt;&#x2F;code&gt; and a second
argument is a delta which we use to increment our counter. The function is a one
liner which uses &lt;code&gt;fetch_add&lt;&#x2F;code&gt; to update our atomic integer. We then return the
previous value (returned by &lt;code&gt;fetch_add&lt;&#x2F;code&gt; plus the delta).&lt;&#x2F;p&gt;
&lt;p&gt;We then need to update our tauri &lt;code&gt;main()&lt;&#x2F;code&gt; function to insert our state and
register the commands. Update the main function to look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(AtomicI32::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![increment_counter])
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_context!())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error while running tauri application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two new lines are the &lt;code&gt;manage&lt;&#x2F;code&gt; and &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; lines. The first line
tells Tauri to “manage” our state, in this case our atomic integer. The second
line &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; registers our handlers. If we want multiple handlers we
can do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::generate_handler![my_command, another_command, a_third_command]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you look back at your terminal now you should see some activity as the Tauri
app reloads in response to the changes. This is all we need to do to set up the
commands in the backend.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;invoking-the-command-on-the-front-end&quot;&gt;Invoking the command on the front end&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can return to the &lt;code&gt;App.tsx&lt;&#x2F;code&gt; to use (or invoke) our command. We want to
invoke the command when the app first loads to get the current value of the
counter. We can do this with a &lt;code&gt;useEffect&lt;&#x2F;code&gt; before the &lt;code&gt;return&lt;&#x2F;code&gt; in &lt;code&gt;App.tsx&lt;&#x2F;code&gt;. It
should look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;useState &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;invoke &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@tauri-apps&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useState&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number))
&lt;&#x2F;span&gt;&lt;span&gt;  }, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;button&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the app reloads you should see a message in the terminal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Incrementing&lt;&#x2F;span&gt;&lt;span&gt; counter by 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The counter next to the button should also say &lt;code&gt;0&lt;&#x2F;code&gt;, which is the value we set in
the server. We can verify that this number does come from the rust code by
changing line 18 in &lt;code&gt;main.rs&lt;&#x2F;code&gt; from &lt;code&gt;.manage(AtomicI32::from(0))&lt;&#x2F;code&gt; to
&lt;code&gt;.manage(AtomicI32::from(5))&lt;&#x2F;code&gt;. When the app reloads the counter should start on
5.&lt;&#x2F;p&gt;
&lt;p&gt;We now want the counter to update when we hit the “increment” button. We can
create a callback for this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;increment &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useCallback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, { delta: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCounter&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then update the button to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{increment}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;increment&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After reloading click the button. The console should print:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Incrementing&lt;&#x2F;span&gt;&lt;span&gt; counter by 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the counter should increment by 1 for each click!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-errors&quot;&gt;Handling errors&lt;&#x2F;h2&gt;
&lt;p&gt;If the rust function returns an &lt;code&gt;Err(some_string)&lt;&#x2F;code&gt; then this is passed through
to the invoke function on the web side. As &lt;code&gt;invoke&lt;&#x2F;code&gt; is just a promise, this
means we could do something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(...).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;...).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;We now have commands invoked from the web side executing rust code and
handling the result. The code for this tutorial can be found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;f373bf1dbe9a21101e1a2b1cd6b8d8969e94e0b4&quot;&gt;here on
github&lt;&#x2F;a&gt;.
Part 1 of the tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;can be found
here&lt;&#x2F;a&gt; and part 3 of the
tutorial &lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;can be found
here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tauri and Create React App Part 1 - Setup</title>
        <published>2021-08-26T00:00:00+00:00</published>
        <updated>2021-08-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/tauri-create-react-app-tutorial-part1/"/>
        <id>https://willhart.io/post/tauri-create-react-app-tutorial-part1/</id>
        
        <content type="html" xml:base="https://willhart.io/post/tauri-create-react-app-tutorial-part1/">&lt;h2 id=&quot;why-tauri&quot;&gt;Why Tauri&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&quot;&gt;Tauri&lt;&#x2F;a&gt; is a new cross-platform toolset for creating GUI
applications using web technologies. Its a lighter weight alternative to
electron, with low memory usage (a few MB), small binary size (as small as
600kB) and built on newer web stacks than some alternative approaches (i.e.
WebView2 not MSHTML).&lt;&#x2F;p&gt;
&lt;p&gt;Another key advantage for me is that tauri is built in rust, so you can write
your “server-side” logic in rust, and use a simple “command” API to communicate
between the rust backend and the web front end.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the time of writing this, tauri is at version &lt;code&gt;1.0.0-beta&lt;&#x2F;code&gt;, rapidly
approaching its first “official” release. The documentation is still a little
sparse in some respects, so I’m writing this tutorial to share some of my
experiences in setting up a tauri and React app.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;sample-app&quot;&gt;Sample App&lt;&#x2F;h2&gt;
&lt;p&gt;This project is going to demonstrate a small sample App built on a tauri and
React stack. We’re going to build a traditional “counter” app, but this time the
logic will be run in the tauri backend and the front end will just display the
data.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The tutorial assumes a basic knowledge of rust and React.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This tutorial will be broken into a few parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;this part, getting set up with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;&quot;&gt;tauri&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;create-react-app.dev&#x2F;&quot;&gt;create-react-app&lt;&#x2F;a&gt; (CRA),&lt;&#x2F;li&gt;
&lt;li&gt;setting up a simple command that we can call from the front end
[&lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;link&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;wrapping the command in &lt;code&gt;useSWR&lt;&#x2F;code&gt; to make a generic “invoke” hook,
[&lt;a href=&quot;&#x2F;post&#x2F;20210828_tauri_create_react_app_tutorial_part3&quot;&gt;link&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;extending our hook to support multiple counters,
[&lt;a href=&quot;&#x2F;post&#x2F;20210829_tauri_create_react_app_tutorial_part4&quot;&gt;link&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;getting-ready-for-tauri&quot;&gt;Getting ready for tauri&lt;&#x2F;h2&gt;
&lt;p&gt;To start with, we need to install the required dependencies. You’ll need &lt;code&gt;node&lt;&#x2F;code&gt;
and &lt;code&gt;yarn&lt;&#x2F;code&gt; or &lt;code&gt;npm&lt;&#x2F;code&gt; installed, as well as &lt;code&gt;rust&lt;&#x2F;code&gt;. If you aren’t set up already
then tauri provides &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;en&#x2F;docs&#x2F;getting-started&#x2F;setup-linux&quot;&gt;some pretty good platform specific
instructions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are on Windows, make sure you have
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;en&#x2F;docs&#x2F;getting-started&#x2F;setup-windows#4-install-webview2&quot;&gt;WebView2&lt;&#x2F;a&gt;
installed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-with-a-cra-base&quot;&gt;Starting with a CRA base&lt;&#x2F;h2&gt;
&lt;p&gt;We’re going to start by setting up a CRA app in the usual way.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; create react-app counter-app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --template&lt;&#x2F;span&gt;&lt;span&gt; typescript
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the packages are installed and the process finishes, open up the folder in
your IDE of choice.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; counter-app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I like to start with a clean slate, so feel free to delete everything
non-essential from the repo. In this case I deleted:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;App.css&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;App.test.tsx&lt;&#x2F;code&gt;, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;logo.svg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also replaced the contents of &lt;code&gt;App.tsx&lt;&#x2F;code&gt; with the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;button&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Increment&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then start the app to make sure it runs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The simple app should open up in &lt;code&gt;https:&#x2F;&#x2F;localhost:3000&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-tauri&quot;&gt;Adding tauri&lt;&#x2F;h2&gt;
&lt;p&gt;The instructions for integrating tauri &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&#x2F;en&#x2F;docs&#x2F;usage&#x2F;development&#x2F;integration&quot;&gt;can be found
here&lt;&#x2F;a&gt;. Firstly we
need to install the Tauri CLI locally.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span&gt; @tauri-apps&#x2F;cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also want to install the Tauri APIs&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @tauri-apps&#x2F;api
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we initialise Tauri using&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; tauri init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just select all the default options for now. After a few mintues the process
should complete and there should be a separate &lt;code&gt;src-tauri&lt;&#x2F;code&gt; folder where your
Tauri app lives. If you open up &lt;code&gt;src-tauri&#x2F;tauri.conf.json&lt;&#x2F;code&gt; you can see all the
configuration for the Tauri app. One of the key parts for integrating the CRA
app is this bit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;distDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;devPath&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeDevCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeBuildCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how Tauri knows how to run your project in dev, and what to do to build
your project. Update the build config as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;distDir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;devPath&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeDevCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yarn start&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;beforeBuildCommand&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yarn build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will ensure that Tauri runs the &lt;code&gt;yarn start&lt;&#x2F;code&gt; command when you run it in
develop mode, and the &lt;code&gt;yarn build&lt;&#x2F;code&gt; command when you build and bundle the app.&lt;&#x2F;p&gt;
&lt;p&gt;I like to add one more shortcut to the root &lt;code&gt;package.json&lt;&#x2F;code&gt;,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yarn tauri dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now if I want to develop the app in a browser (outside of Tauri) I can run &lt;code&gt;yarn start&lt;&#x2F;code&gt;, and if I want to develop within the Tauri app I can run &lt;code&gt;yarn dev&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If everything has gone to plan at this point you should be able to start the
Tauri app in dev mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It should look something like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;tauri-create-react-app-tutorial-part1&#x2F;tauri-step1.png&quot; alt=&quot;The basic Tauri app window&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Both the web app and the Tauri app reload when changes are made. You can verify
this by editing our &lt;code&gt;App.tsx&lt;&#x2F;code&gt; from &lt;code&gt;&amp;lt;button&amp;gt;Increment&amp;lt;&#x2F;button&amp;gt; 0&lt;&#x2F;code&gt; to
&lt;code&gt;&amp;lt;button&amp;gt;Increment&amp;lt;&#x2F;button&amp;gt; 1&lt;&#x2F;code&gt;. After saving the Tauri app should automatically
update.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The code at this point can be accessed &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-cra-tutorial&#x2F;tree&#x2F;283a4196665c9c014046206fc832c7efb7e31357&quot;&gt;on
github&lt;&#x2F;a&gt;.
Part 2 of the series &lt;a href=&quot;&#x2F;post&#x2F;20210827_tauri_create_react_app_tutorial_part2&quot;&gt;can be found
here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Thesis writing in Markdown - pandemic and pandoc</title>
        <published>2019-05-16T00:00:00+00:00</published>
        <updated>2019-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/thesis-writing-in-markdown-pandoc-and-pandemic/"/>
        <id>https://willhart.io/post/thesis-writing-in-markdown-pandoc-and-pandemic/</id>
        
        <content type="html" xml:base="https://willhart.io/post/thesis-writing-in-markdown-pandoc-and-pandemic/">&lt;p&gt;I’m in the closing stages of my PhD (I hope), and beginning to write up some
chapters. As my PhD is heavy on analysis, data and modelling, I’ve found writing
in Word or LaTeX to have a lot of shortcomings that I’d really like to overcome.
Word is simple to use but citations are a bit clunky and the typography isn’t
particularly nice. On the other hand, LaTeX looks nicer but is a lot more work
to get right. There are also some complications - for instance, what if I just
want to build one chapter at a time?&lt;&#x2F;p&gt;
&lt;p&gt;I guess I’ve been spoiled for choice in the Node &#x2F; Python &#x2F; C# worlds where you
can usually just type yarn build or yarn start and out pops a functional web
app. Is there a similar build system for academic documents? It turns out there
isn’t, at least not a good one, but it isn’t too hard to cobble together a
Frankenstein to do the job.&lt;&#x2F;p&gt;
&lt;p&gt;What features would a build system have? The first step was to work out what
sort of features a thesis build system would have. The core requirements are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Citations and a bibliography&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Variable substitution&lt;&#x2F;strong&gt;, so that analysis results can be exported to JSON
files and then the values automagically inserted in the correct location in
the text,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build up multi-part figures&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Automatic cross references&lt;&#x2F;strong&gt;, I don’t want to have to think about fixing
&lt;code&gt;Figure 6.15&lt;&#x2F;code&gt; when I insert a figure in between, and I want to be able to
reference between chapters even if they are in separate documents,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Single command build&lt;&#x2F;strong&gt;, being able to compile the document with one click
or CLI command&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There are some nice to have features as well:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Write in a plain text language&lt;&#x2F;strong&gt;, i.e. Markdown? as much as possible&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build the entire document or single chapters&lt;&#x2F;strong&gt;, so I can send a chapter to
a supervisor for review&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Various export formats&lt;&#x2F;strong&gt;, so that I can send Word, Markdown, LaTeX or PDF
formats as required&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;wait-doesn-t-this-already-exist&quot;&gt;Wait, doesn’t this already exist?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, yes in a word, &lt;code&gt;pandoc&lt;&#x2F;code&gt; does a lot of these things already. In the list
above there are only a few things that I don’t think pandoc can do out of the
box - building multi-part figures and building entire document or single
chapters (although this could probably be achieved with a batch file or
similar). However managing the different commands required for all the export
formats and options that I want to build would be a bit tricky.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lionel-rigoux&#x2F;pandemic&quot;&gt;&lt;code&gt;pandemic&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which
is a &lt;code&gt;pandoc&lt;&#x2F;code&gt; CLI for building documents from “recipes”. pandemic &lt;code&gt;recipes&lt;&#x2F;code&gt;
allow multiple export formats, and different filter combinations and so on per
recipe. It also has &lt;code&gt;prehooks&lt;&#x2F;code&gt; which let you define CLI commands that should run
before pandoc to either preprocess the document or run side effects.&lt;&#x2F;p&gt;
&lt;p&gt;Once a recipe is defined, pandemic can be used to build up a chapter by running
a single CLI command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pandemic&lt;&#x2F;span&gt;&lt;span&gt; publish manuscript.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or if a particular recipe is required:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pandemic&lt;&#x2F;span&gt;&lt;span&gt; publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; tex manuscript.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cobbling-it-together&quot;&gt;Cobbling it together&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I got a bit medieval and cobbled together what can only be
described as an abomination!&lt;&#x2F;p&gt;
&lt;p&gt;Using PowerShell scripts, pandoc and pandemic I set up a document build system
that converts the raw Markdown documents to LaTeX after running some filters,
copies the files to a build directory, merges all the chapters into a single
document and builds it several times with XeLaTeX. I used a &lt;code&gt;handlebars&lt;&#x2F;code&gt; prehook
for &lt;code&gt;pandemic&lt;&#x2F;code&gt; to swap variables in the form &lt;code&gt;{{{variable_name}}}&lt;&#x2F;code&gt; in the text
from files output by my Jupyter notebooks. I manually run commands for
&lt;code&gt;it-figures&lt;&#x2F;code&gt;, my node library for building multi-part figures on each chapter.&lt;&#x2F;p&gt;
&lt;p&gt;By running a separate command I can output a chapter in a standalone tex file. A
single chapter is built like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BuildChapter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Write-Output &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Building Chapter &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build figures using `it-figures`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\figures
&lt;&#x2F;span&gt;&lt;span&gt;  figures b panels.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build the manuscript
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; ..\
&lt;&#x2F;span&gt;&lt;span&gt;  pandemic publish manuscript.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\_public
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# add a few newlines to the markdown to force a latex break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Add-Content &lt;&#x2F;span&gt;&lt;span&gt;-Path manuscript.build -Value &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;`r`n`r`n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Move-Item &lt;&#x2F;span&gt;&lt;span&gt;-Path manuscript.build -Destination ..\..\.build\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap.md &lt;&#x2F;span&gt;&lt;span&gt;-Force
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-Item &lt;&#x2F;span&gt;&lt;span&gt;-ItemType Directory -Force -Path ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\images
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Copy-Item&lt;&#x2F;span&gt;&lt;span&gt; ..\images\* ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\images\ -Force -Recurse
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-Item &lt;&#x2F;span&gt;&lt;span&gt;-ItemType Directory -Force -Path ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\figures
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Copy-Item&lt;&#x2F;span&gt;&lt;span&gt; ..\figures\* ..\..\.build\.tex\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chap&lt;&#x2F;span&gt;&lt;span&gt;\figures\ -Force -Recurse
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; ..\..\
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the document is built like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;BuildDocument &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chaps&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\.build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  cat $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chaps &lt;&#x2F;span&gt;&lt;span&gt;| pandoc -s --top-level-division=chapter --template ..\template\thesis.tex -f markdown -t latex -F pandoc-crossref -M &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crossrefYaml=..\template\crossref_settings.yaml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; --natbib -o .\.tex\thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; .\.tex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  xelatex -quiet thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;  biber thesis.bcf
&lt;&#x2F;span&gt;&lt;span&gt;  xelatex -quiet thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;  xelatex thesis.tex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Move-Item &lt;&#x2F;span&gt;&lt;span&gt;-Path thesis.pdf -Destination ..\..\thesis.pdf -Force
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Move-Item &lt;&#x2F;span&gt;&lt;span&gt;-Path thesis.tex -Destination ..\..\thesis.tex -Force
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Location&lt;&#x2F;span&gt;&lt;span&gt; ..\..\
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m not sure if this overly complicated approach is a good one, but it lets me
write in Markdown, and automatically update figures and variables in my text if
the analysis changes, and then publish in LaTeX with only a single command. This
is quite satisfying, although if something goes wrong it will probably take
quite a while to sort out.&lt;&#x2F;p&gt;
&lt;p&gt;I’m guessing that before I start getting serious feedback from my supervisors
I’ll probably “eject” from the build system and go back to working in pure
LaTeX. At that point it will be handy to be able to run diffs on the text I get
back from my supervisors without having to convert to and from Markdown.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, at least I’m entertained?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Replacing Electron with C# WebView (Windows Only)</title>
        <published>2018-12-14T00:00:00+00:00</published>
        <updated>2018-12-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/replacing-electron-with-c-sharp-edge-webviews-on-windows/"/>
        <id>https://willhart.io/post/replacing-electron-with-c-sharp-edge-webviews-on-windows/</id>
        
        <content type="html" xml:base="https://willhart.io/post/replacing-electron-with-c-sharp-edge-webviews-on-windows/">&lt;p&gt;For my PhD I keep notes in Markdown documents of the key papers I’ve read. I
recently wrote a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;markdown-browser&#x2F;&quot;&gt;simple rust
application&lt;&#x2F;a&gt; for searching and
rendering these Markdown documents, which are often quite maths heavy. I find it
very useful when writing things up.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;replacing-electron-with-c-sharp-edge-webviews-on-windows&#x2F;markdownbrowser.png&quot; alt=&quot;The markdown browser application used to search MD notes from papers (size: 1302x632px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I originally thought about using electron, but was turned off by the large
number of files an installation includes. I don’t really have an issue with the
RAM or disk space electron requires, although its become a bit of a meme.
Warning, personal preference: I also much prefer the &lt;em&gt;look and feel&lt;&#x2F;em&gt; of web
based interfaces over most “native” interfaces.&lt;&#x2F;p&gt;
&lt;p&gt;To write the application I used the &lt;code&gt;WebView&lt;&#x2F;code&gt; package for Rust, which
unfortunately uses the IE version installed on the computer (IE11 I think).
Writing code for IE and debugging was… challenging? The great thing about Rust
was that it allowed me to build an application that is about 800kb and uses 50MB
of RAM when holding about 300 documents in memory. Having a single application
file was also very nice as it reduced the noise and let me just drop it into the
folder with my notes. On the flip side, I wrote the application in Rust which
was a good learning experience, but required (and requires!) a lot more effort
for me to maintain than something written in JS or C#.&lt;&#x2F;p&gt;
&lt;p&gt;I recently came across a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-au&#x2F;windows&#x2F;communitytoolkit&#x2F;controls&#x2F;wpf-winforms&#x2F;webview&quot;&gt;blog
post&lt;&#x2F;a&gt;
talking about how Microsoft had made Edge available as a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nuget.org&#x2F;packages&#x2F;Microsoft.Toolkit.Wpf.UI.Controls.WebView&quot;&gt;WebView in WPF &#x2F;
WinForms
apps&lt;&#x2F;a&gt;,
where previously it was only available through UWP. Here I’ll describe how I
went about creating, bundling and debugging the Markdown browser in a WPF app
built as a single &lt;code&gt;.exe&lt;&#x2F;code&gt; file, and using an Edge based WebView (which as we now
know will one day run on Chromium, and should be installed on every Win 10
machine!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;I started with a fresh WPF project, and from the package manager console ran:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Install-Package&lt;&#x2F;span&gt;&lt;span&gt; Microsoft.Toolkit.Wpf.UI.Controls.WebView&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Version&lt;&#x2F;span&gt;&lt;span&gt; 5.0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in my &lt;code&gt;MainWindow.xaml&lt;&#x2F;code&gt; I added the namespace&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;XML&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-XML &quot;&gt;&lt;code class=&quot;language-XML&quot; data-lang=&quot;XML&quot;&gt;&lt;span&gt;xmlns:WPF=&amp;quot;clr-namespace:Microsoft.Toolkit.Wpf.UI.Controls;assembly=Microsoft.Toolkit.Wpf.UI.Controls.WebView&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and added the control inside the default &lt;code&gt;Grid&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WPF:WebView &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;x:Name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WebView&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;loading-a-local-file&quot;&gt;Loading a local file&lt;&#x2F;h2&gt;
&lt;p&gt;I added a simple &lt;code&gt;index.html&lt;&#x2F;code&gt; file to the project under &lt;code&gt;www&#x2F;index.html&lt;&#x2F;code&gt;. I set the build type to &lt;code&gt;EmbeddedResource&lt;&#x2F;code&gt;. I hooked up a &lt;code&gt;Window.Loaded&lt;&#x2F;code&gt; event which looked like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; e.g.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; using Microsoft.Toolkit.Win32.UI.Controls.Interop.WinRT;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; using System.Linq;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; using System.Reflection;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Window_Loaded&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;, RoutedEventArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assembly&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetExecutingAssembly&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceNames&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Single&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EndsWith&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceStream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileName&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sr &lt;&#x2F;span&gt;&lt;span&gt;= new StreamReader(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ReadToEnd&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WebView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ScriptNotify &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WebView_ScriptNotify&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WebView&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NavigateToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This waits until the &lt;code&gt;window&lt;&#x2F;code&gt; loads, then reads “index.html” from the embedded
&lt;code&gt;index.html&lt;&#x2F;code&gt; file. It then uses the &lt;code&gt;WebView.NavigateToString&lt;&#x2F;code&gt; method to load
the string into the embedded &lt;code&gt;WebView&lt;&#x2F;code&gt; browser.&lt;&#x2F;p&gt;
&lt;p&gt;The line &lt;code&gt;WebView.ScriptNotify += WebView_ScriptNotify&lt;&#x2F;code&gt; adds an event handler so
that the WebView can call into C# code through JavaScript, i.e.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;window.external.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;the string to pass to the C# code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bundling-as-a-single-file&quot;&gt;Bundling as a single file&lt;&#x2F;h2&gt;
&lt;p&gt;The next task was to try to build a single executable file from the WPF
application. This required a bit of googling, but the best method I came across
was &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;4995039&#x2F;233608&quot;&gt;predictably on StackOverflow&lt;&#x2F;a&gt;.
Firstly I closed the solution in VisualStudio and opened the &lt;code&gt;.csproj&lt;&#x2F;code&gt; file in
VSCode. I added the following before the last closing tag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AfterResolveReferences&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ItemGroup&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmbeddedResource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Include&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@(ReferenceCopyLocalPaths)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Condition&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;%(ReferenceCopyLocalPaths.Extension)&amp;#39; == &amp;#39;.dll&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogicalName&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogicalName&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EmbeddedResource&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ItemGroup&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Target&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then added a new &lt;code&gt;Program.cs&lt;&#x2F;code&gt; file, and added the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Program
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STAThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AppDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CurrentDomain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AssemblyResolve &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnResolveAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Assembly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OnResolveAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, ResolveEventArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thisAssembly &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetExecutingAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assemName &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;AssemblyName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dllName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assemName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.dll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thisAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EndsWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dllName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;First&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thisAssembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetManifestResourceStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assembly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; you might want to do some try-catch blocks around the &lt;code&gt;Assembly.Load&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After editing the project settings to use &lt;code&gt;Program.Main&lt;&#x2F;code&gt; as the entry point, the
whole application was bundled inside the &lt;code&gt;.exe&lt;&#x2F;code&gt; file built by VisualStudio!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debugging-edge&quot;&gt;Debugging Edge&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, for debugging the JavaScript I followed &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pspdfkit.com&#x2F;blog&#x2F;2018&#x2F;edge-devtools-uwp&#x2F;&quot;&gt;another blog
post&lt;&#x2F;a&gt; by James Swift. I
downloaded &lt;code&gt;Microsoft Edge DevTools Preview&lt;&#x2F;code&gt; from the Microsoft Store, then in
Internet Explorer I had to find &lt;code&gt;Internet Options &amp;gt; Advanced &amp;gt; Browser&lt;&#x2F;code&gt; and
uncheck two options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Disable script debugging (Internet Explorer)&lt;&#x2F;li&gt;
&lt;li&gt;Disable script debugging (Other)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; that this is through IE11, not Edge (thanks Microsoft).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After doing this I could start up the DevTools preview and run the application
in VS and use the DevTools to debug the embedded WebView.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating a REPL for hacking on a firestore backend</title>
        <published>2018-11-03T00:00:00+00:00</published>
        <updated>2018-11-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/creating-a-repl-for-hacking-on-a-firestore-backend/"/>
        <id>https://willhart.io/post/creating-a-repl-for-hacking-on-a-firestore-backend/</id>
        
        <content type="html" xml:base="https://willhart.io/post/creating-a-repl-for-hacking-on-a-firestore-backend/">&lt;p&gt;When developing firestore based apps (especially for the server) I often find it
a bit tricky to inspect “intermediate” query results, or just to play around
with data, test queries and so on. I found a few admin interfaces but they
generally appear to be for the realtime database and almost universally have no
commits for 1-2 years.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;creating-a-repl-for-hacking-on-a-firestore-backend&#x2F;firestore-repl.png&quot; alt=&quot;A custom firestore REPL running in a node console&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ideally I’d just be able to type commands into a terminal and try queries out.
It turns out using a node repl this is very easy to do. I found some
instructions for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;derickbailey.com&#x2F;2014&#x2F;07&#x2F;02&#x2F;build-your-own-app-specific-repl-for-your-nodejs-app&#x2F;&quot;&gt;building your own
REPL&lt;&#x2F;a&gt;,
and adapted them for firestore admin.&lt;&#x2F;p&gt;
&lt;p&gt;Here is what my REPL looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;repl.ts
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;repl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initFirestoreAdmin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;src&#x2F;initAdmin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; used by my functions to init admin with credentials etc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initFirestoreAdmin&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;firestore&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;  prompt: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fb &amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; I can also save typing by doing things like:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_firestore_user_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or by adding functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withUser &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m coding in typescript, so I also &lt;code&gt;yarn add --dev ts-node&lt;&#x2F;code&gt; so I don’t have to
bother with compiling the ts file. I can then add a script to my &lt;code&gt;package.json&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;...,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;repl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;node_modules&#x2F;.bin&#x2F;ts-node repl.ts&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I can start the repl from the root directory with &lt;code&gt;yarn repl&lt;&#x2F;code&gt;. A prompt appears,
and I can start typing in firestore queries:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get the pages collection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fb &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get a user&amp;#39;s pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fb &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;.size))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this approach you could also pull in any of your application code (for
instance GraphQL resolvers), and have a ready built console application version
for your app.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-async-await&quot;&gt;A note on async&#x2F;await&lt;&#x2F;h2&gt;
&lt;p&gt;By default, the node &lt;code&gt;repl&lt;&#x2F;code&gt; doesn’t support &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt;. It’s available
under a feature flag in node 10+, but doesn’t appear to be available in ts-node
yet. You can provide async functionality by installing
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ownadi&#x2F;async-repl&quot;&gt;async-repl&lt;&#x2F;a&gt; and using it as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; inside repl.ts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stubber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;async-repl&#x2F;stubber&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;set up your repl as above...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;stubber&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replServer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now in your repl you can do the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fb &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firestore&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;documents&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Making game assets using OpenSCAD</title>
        <published>2017-02-12T00:00:00+00:00</published>
        <updated>2017-02-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/game-assets-using-openscad/"/>
        <id>https://willhart.io/post/game-assets-using-openscad/</id>
        
        <content type="html" xml:base="https://willhart.io/post/game-assets-using-openscad/">&lt;p&gt;In my day job, I have a task to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.osapublishing.org&#x2F;abstract.cfm?uri=BGPPM-2018-JTh4A.2&quot;&gt;design some 3D printed parts in a variety of
repeating
patterns&lt;&#x2F;a&gt;,
but with each part being just slightly different. I didn’t really want to mess
about in SolidWorks making them in all sorts of different sizes and then
maintaining them every time the design specs changed. I decided what I really
wanted was a procedural CAD program so I could code the outputs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;header.png&quot; alt=&quot;A preview of what we are going to make in this tutorial (size: 1918x768px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After some messing about I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.openscad.org&#x2F;&quot;&gt;OpenSCAD&lt;&#x2F;a&gt; which is
billed as “the Programmer’s Solid 3D CAD modeller”. Basically you can script 3D
models using basic boolean operations like &lt;code&gt;union&lt;&#x2F;code&gt;, &lt;code&gt;difference&lt;&#x2F;code&gt; and &lt;code&gt;intersect&lt;&#x2F;code&gt;
as well as primitive shapes like &lt;code&gt;cube&lt;&#x2F;code&gt;, &lt;code&gt;cylinder&lt;&#x2F;code&gt; and &lt;code&gt;sphere&lt;&#x2F;code&gt;. The language
allows basic scripting including variables, &lt;code&gt;for&lt;&#x2F;code&gt; and &lt;code&gt;if&lt;&#x2F;code&gt; control statements. A
minimal example is a cube, which you make like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;a_basic_openscad_cube.png&quot; alt=&quot;A basic OpenSCAD box (size: 785x510px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wondered if I could use this as a really simple way to make game assets,
particularly building up a lot of basic shapes very quickly. I think the
technique is naturally suited to making things like castle walls which are
basically a &lt;code&gt;union&lt;&#x2F;code&gt; of lots of primitive shapes. So, lets begin!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blocking-out-the-basic-structure&quot;&gt;Blocking out the basic structure&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, we can block out the structure of our wall. I’ll just specify some
proportions, then use a scale value to &lt;code&gt;scale&lt;&#x2F;code&gt; it up to our preferred size:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are specifying a base wall is 1 unit long, 0.3 units thick and 0.8 units
tall. We also want to scale the whole wall up by 10 units (A “unit” in OpenSCAD
is one millimetre, but that doesn’t really matter here). We can scale and draw
our cube the same was as before, except now we use the variable values instead
of hard coding:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;making-crenelations&quot;&gt;Making crenelations&lt;&#x2F;h2&gt;
&lt;p&gt;The next thing a castle wall needs is crenelation, something for our archers to
hide behind. We need a few variables here…&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;* cren_period;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A diagram may help:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;crennelation_dimensions.png&quot; alt=&quot;The attributes of crenellations&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;period&lt;&#x2F;em&gt; is the length of one “on and off” crenelation, the height is the
height of a crenelation and the duty cycle is the percentage of on vs off of
the crenellations, so &lt;code&gt;0.5&lt;&#x2F;code&gt; here indicates for each period 50% is crenelation
and 50% is air. For simplicity we are going to assume that crenelations are
cubes, so we can define the thickness as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can use a &lt;code&gt;for&lt;&#x2F;code&gt;, &lt;code&gt;translate&lt;&#x2F;code&gt; and &lt;code&gt;cube&lt;&#x2F;code&gt; to draw our crenelations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;(cren_thickness);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first line is just the notation for a &lt;code&gt;for&lt;&#x2F;code&gt; loop in OpenSCAD. It loops from
&lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;wall_length - cren_period&lt;&#x2F;code&gt;, taking steps of &lt;code&gt;cren_period&lt;&#x2F;code&gt;. By default, the
cube will be drawn at &lt;code&gt;(0,0,0)&lt;&#x2F;code&gt;, but actually we want them to be placed on top of
the wall. To achieve this we use a &lt;code&gt;translate&lt;&#x2F;code&gt; statement to wrap our &lt;code&gt;cube&lt;&#x2F;code&gt;
primitive drawing statement. We provide the x, y and z coordinates where we want
our cube to be drawn.&lt;&#x2F;p&gt;
&lt;p&gt;To join the crenelations to our base wall, we can wrap the whole lot in a &lt;code&gt;union&lt;&#x2F;code&gt;
statement. Our model code now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelations
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which produces:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;model_with_crennelation.png&quot; alt=&quot;The first attempt at a castle wall (size: 477x440px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reusing-our-wall&quot;&gt;Reusing our wall&lt;&#x2F;h2&gt;
&lt;p&gt;Now we have a fairly basic castle wall, but it would be really great if we could
draw a bunch of wall really easily. Luckily OpenSCAD provides &lt;code&gt;modules&lt;&#x2F;code&gt;, which are
essentially functions for this purpose. We can wrap our wall drawing code in a
module like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; our wall drawing code from above in here,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; except for the &amp;quot;scale&amp;quot; command
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll also move the &lt;code&gt;scale&lt;&#x2F;code&gt; out of the module, as we want to wrap our entire castle
in this later on, not just wall pieces one at a time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; You can provide function arguments to modules, but for simplicity I’m
just letting modules access the global variables declared at the top of the file&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We can then draw multiple wall segments using a for loop like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;num_walls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;multiple_walls_in_loop.png&quot; alt=&quot;Repeating wall sections using a module (size: 504x314px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We might also want to draw walls at different angles, so lets wrap that code in
a module with a couple of arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only new part here is the &lt;code&gt;rotate&lt;&#x2F;code&gt; command, which rotates everything by the
given x, y and z euler angles. Now we have this command, we can easily draw an
entire enclosed wall inside another module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length,
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is draw four different &lt;code&gt;longWalls&lt;&#x2F;code&gt;, with the correct offsets and
rotations. We can then draw a wall enclosure by writing&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;enclosed_wall.png&quot; alt=&quot;Repeating wall sections to draw a closed wall (size: 641x453px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Phew, that was actually “relatively” easy! Of course that’s only the basics, and
we still would need to export to STL, then do UV unwrapping, texturing and so on
in our modelling program. The main advantage of this kind of approach is that it
is really easy to generate a whole range of different geometry very fast.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; For my day job, I built a command line tool that can generate tonnes
of different geometry and export to STL at once. In the game dev world, this
kind of approach could be used to generate castles of all different sizes in a
batch process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Of course, our castle above lacks a whole lot of things like a gate, a keep and
towers… and it is debatable how useful this technique will be once things get
a lot more complicated, but its an interesting experiment!&lt;&#x2F;p&gt;
&lt;p&gt;Here is something I put together with maybe twenty minutes more effort (you can
see the code for it below):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;castle.png&quot; alt=&quot;An example castle built using OpenSCAD (size: 521x404px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; castle.scad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    walls_to_draw = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DarkGray&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(walls_to_draw);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(y = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;                    x * walls_to_draw * wall_length - x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness,
&lt;&#x2F;span&gt;&lt;span&gt;                    y * walls_to_draw * wall_length - y * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MediumSeaGreen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DarkGoldenrod&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cylinder&lt;&#x2F;span&gt;&lt;span&gt;(h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.5 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height, r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, $fn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Crimson&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;difference&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEntrance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* num_walls * wall_length);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dim_scale&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tower_height&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    dim = dim_scale * wall_thickness;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;difference&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([dim, dim, tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([dim, dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.45 &lt;&#x2F;span&gt;&lt;span&gt;* dim, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.01 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.45 &lt;&#x2F;span&gt;&lt;span&gt;* dim, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.01 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEntrance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_offset&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x = x_offset - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length;
&lt;&#x2F;span&gt;&lt;span&gt;    y = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness;
&lt;&#x2F;span&gt;&lt;span&gt;    z = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, y, z]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x_offset, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cylinder&lt;&#x2F;span&gt;&lt;span&gt;(h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length, $fn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, centre = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(wall_length, wall_height);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cren_length&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cren_z_offset&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : cren_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, cren_z_offset]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; castle_wall.scad
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelations
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A simple static site generator in Python</title>
        <published>2014-03-18T00:00:00+00:00</published>
        <updated>2014-03-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/a-simple-static-site-generator-in-python/"/>
        <id>https://willhart.io/post/a-simple-static-site-generator-in-python/</id>
        
        <content type="html" xml:base="https://willhart.io/post/a-simple-static-site-generator-in-python/">&lt;h2 id=&quot;what-is-a-static-site-generator&quot;&gt;What is a static site generator?&lt;&#x2F;h2&gt;
&lt;p&gt;A static site generator is a bit of code which takes input files, for instance
from Markdown files or from another source on the web, and builds a website from
it. For it to be static, the website is usually just plain HTML. Static site
generators are handy because they remove a lot of the complexity of using a
server based site such as Wordpress or a custom Django blog, and instead let you
just focus on the content. They are better than traditional HTML web pages
because they let you apply templates to style your HTML pages just like any
other server based site.&lt;&#x2F;p&gt;
&lt;p&gt;When I needed to make a manual for the data acquisition system I have been
building, I decided I wanted to write the content in Markdown and use a static
site generator to build the web pages for me. These pages (when ready) can then
be dropped onto a web server or github pages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-make-my-own&quot;&gt;Why make my own?&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve used &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.getpelican.com&#x2F;&quot;&gt;Pelican&lt;&#x2F;a&gt; on a number of sites including
the one you are browsing at the minute, and have found it to be pretty good. Yet
as the software matures they are splintering the code base, putting plugins in
one repository, themes in another and the core site generator in a third. This
means I have to install and maintain three different repositories and bits of
software on my computer to generate a static site. This is a pain. It also means
that since I got it working on my Linux install and haven’t really been bothered
to get it working on my Windows machine, every time I want to update the site I
have to reboot into Linux.&lt;&#x2F;p&gt;
&lt;p&gt;So for the manual I looked around and there are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;staticsitegenerators.net&#x2F;&quot;&gt;a lot of different site
generator options&lt;&#x2F;a&gt; - over 230 to be exact. A
lot of the more popular ones have all the bells and whistles, plugins, command
line tools, test servers, different input formats, you name it. At the end of
the day all I want to do is to take a bunch of Markdown files, convert them into
HTML and spit out a website with the same directory structure as my input files.
Rather than download 230 tools until I found one that worked I just decided to
bake my own.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The source code is available (MIT licensed) &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;9609188&quot;&gt;in this
gist&lt;&#x2F;a&gt; or &lt;a href=&quot;&#x2F;python-static-site-generator&quot;&gt;on my
website&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The generator uses &lt;code&gt;Jinja2&lt;&#x2F;code&gt; for templates and &lt;code&gt;Markdown2&lt;&#x2F;code&gt; for rendering
Markdown. It uses the &lt;code&gt;metadata&lt;&#x2F;code&gt; Markdown extra so that you can specify the
template and any context variables for the template in your Markdown. A Markdown
document with metadata could look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;background-color:#4f5b66;color:#c0c5ce;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;title: My cool article
&lt;&#x2F;span&gt;&lt;span&gt;keywords: article, cool, my, python, ftw
&lt;&#x2F;span&gt;&lt;span&gt;template: index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;# This is a Markdown document
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;There are many like it but this is mine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it - normal Markdown for the most part. If you don’t specify a template in
the metadata then &lt;code&gt;index.html&lt;&#x2F;code&gt; will be used and if you haven’t got an
&lt;code&gt;index.html&lt;&#x2F;code&gt; in your templates folder the script gives up and dies. The
generator relies on a set directory structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;root
&lt;&#x2F;span&gt;&lt;span&gt; |----src
&lt;&#x2F;span&gt;&lt;span&gt; |     |---- # your markdown files in here in any directory structure you like
&lt;&#x2F;span&gt;&lt;span&gt; | 
&lt;&#x2F;span&gt;&lt;span&gt; |----templates
&lt;&#x2F;span&gt;&lt;span&gt; |     |---- # your Jinja2 templates go here
&lt;&#x2F;span&gt;&lt;span&gt; |     |----static
&lt;&#x2F;span&gt;&lt;span&gt; |     |    |---- # CSS files, javascript, etc go in the static folder
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you run the generator it converts all the Markdown files in the &lt;code&gt;src&lt;&#x2F;code&gt;
directory into HTML, applies the correct template from the templates folder and
puts it all in the &lt;code&gt;output&lt;&#x2F;code&gt; folder. It copies the &lt;code&gt;static&lt;&#x2F;code&gt; directory to build as
well so you have your CSS and javascript.&lt;&#x2F;p&gt;
&lt;p&gt;This approach makes it really easy to link between files or insert images. All
you have to do is write the Markdown as you normally would. I add an images
folder to the src folder and throw all my images in there. By setting the
&lt;code&gt;STATIC_DIRS&lt;&#x2F;code&gt; variable in the script I can ensure the images get copied over to
the build directory.&lt;&#x2F;p&gt;
&lt;p&gt;To build a site, assuming you have downloaded the script as &lt;code&gt;build.py&lt;&#x2F;code&gt; you just
run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; python build.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reducing online abuse through sentiment analysis</title>
        <published>2014-01-27T00:00:00+00:00</published>
        <updated>2014-01-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/reducing-online-abuse-through-sentiment-analysis/"/>
        <id>https://willhart.io/post/reducing-online-abuse-through-sentiment-analysis/</id>
        
        <content type="html" xml:base="https://willhart.io/post/reducing-online-abuse-through-sentiment-analysis/">&lt;h2 id=&quot;cleaning-up-twitter&quot;&gt;Cleaning up Twitter&lt;&#x2F;h2&gt;
&lt;p&gt;Recently the issue of on-line abuse has received a lot of play time in the news.
In the UK several prominent female figures were sent death threats through
Twitter after they campaigned to have a female (other than the Queen) on a UK
bank note. Articles such as this one by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.psmag.com&#x2F;navigation&#x2F;health-and-behavior&#x2F;women-arent-welcome-internet-72170&#x2F;&quot;&gt;Pacific Standard
Magazine&lt;&#x2F;a&gt;
present a chilling picture of the state of on-line media and its treatment of
women, and the lack of a clear policy from law enforcement agencies. As a result
of the UK episode two people were arrested and jailed, however many more escaped
without penalty.&lt;&#x2F;p&gt;
&lt;p&gt;The explosion of on-line media has generated a range of compelling, complex and
large scale issues that we have only slowly begun to adapt to. For instance, how
much should Twitter and other social media outlets be required to police what
goes on using their services? In the past phone companies were not held to
account for what people said over the phone lines. However tweets and the
facebook posts are both public and persistent. Does this impose a new burden of
responsibility for these companies? And if there is, what can they actually do
about it?&lt;&#x2F;p&gt;
&lt;p&gt;From wild supposition I would imagine that you can divide the abusers into two
different groups. The first is those who are doing it for “a bit of a laugh”,
without considering the impact it has on the victim. The second group are
potentially conducting this behaviour as as symptom of wider social or mental
issues. The behaviour of the first group is probably open to influence, through
making them aware that what they are doing has both social and legal
consequences. However, the second category of abuser is unlikely to be managed
through actions undertaken by Twitter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-be-done&quot;&gt;What can be done?&lt;&#x2F;h2&gt;
&lt;p&gt;From a technical standpoint, one possible way to “jolt” the first group into
modifying their behaviour is through a visual cue in the browser. Something that
alerts the user if the tweet they have typed (and are about to “send”) appears
to be abusive. For instance, the message could read:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING - the message you have typed appears to be abusive. Your IP address
has been logged and on-line abuse can be a criminal offence.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Upon seeing a message like this, the casual abuser could hopefully be prevented
from hitting the “send” button.&lt;&#x2F;p&gt;
&lt;p&gt;Determining if a tweet is “good” or “bad” falls under a the heading of a
“classification problem”. In these problems a computer must categorise a data
point, usually based on a small and finite number of possible states. In the
case of natural language (i.e. text), this technique is frequently known as
“sentiment analysis”, and is supposedly used by business such as Amazon to
detect the tone of reviews written on their site. This involves an algorithm
which looks over a sentence or slab of text, and tries to work out if the mood
of the text is positive or negative based on the prevalence of certain words or
word patterns. In the remainder of this article I’ll attempt to build a
classifying algorithm for tweets, and see if it could have applicability to
“cleaning up Twitter”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sentiment-analysis&quot;&gt;Sentiment analysis&lt;&#x2F;h2&gt;
&lt;p&gt;The basic approach is often quite simple:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Count the number of times words appear in the text&lt;&#x2F;li&gt;
&lt;li&gt;Work out which words are more common in good or bad text and see if these are
present in our text&lt;&#x2F;li&gt;
&lt;li&gt;See if there are more good or bad words in our text&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The first part involves some basic string manipulation, and is often referred to
as “vectorisation” of text. For short sentences like Tweets (with 160
characters) this would be quite easy to do. One complication may be that the use
of abbreviations and “text speak” (or whatever the kids are calling it these
days) would mean that the number of words that would need to be tracked as good
or bad would grow.&lt;&#x2F;p&gt;
&lt;p&gt;A number of different rules can be applied to perform steps 2 and 3. The most
common of these use some sort of probability theory - for instance the
probability that the word “LeBron” will appear in a tweet if it is about the NBA
can be calculated. Some sort of formula can then be calculated to determine how
likely it is that a tweet is good or bad based on this probabilities. This type
of technique, as we shall see, is usually referred to as some form of &lt;em&gt;Bayesian
classification&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classifying-tweets&quot;&gt;Classifying tweets&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;approach&quot;&gt;Approach&lt;&#x2F;h3&gt;
&lt;p&gt;To perform this task, I decided to use a &lt;em&gt;Naive Bayes&lt;&#x2F;em&gt; approach, which makes
some simplifying assumptions and uses &lt;em&gt;Bayes Rule&lt;&#x2F;em&gt; to mathematically formulate
the problem. In words, we are trying to answer the following question:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the probability the tweet is bad given it has the following words in
it: ….&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The word &lt;em&gt;given&lt;&#x2F;em&gt; has a specific role in probability - for instance
$P(apple|fruit)$ means “the probability we have an apple given we have a fruit”.
If you don’t remember your high school probability - if we are holding an
object, the probability it is an apple rather than any of the other objects in
the universe is, for instance, 0.00001%. However if we are told that what we are
holding is a fruit, the probability that object we are holding is an apple given
we are holding a fruit becomes much higher, say 30% if my fruit bowl is anything
to go by.&lt;&#x2F;p&gt;
&lt;p&gt;The Naive Bayes approach relies on some simple rules to formulate our word
problem above. into mathematical symbols. This could look something like the
following (from the &lt;code&gt;scikit-learn&lt;&#x2F;code&gt; documentation):&lt;&#x2F;p&gt;
&lt;p&gt;$$P(y|x_1, …, x_n) = \frac{P(y)\Pi_{i=1}^nP(x_i|y)}{P(x_1, …, x_n)}$$
​&lt;&#x2F;p&gt;
&lt;p&gt;Where &lt;code&gt;y&lt;&#x2F;code&gt; is the “good”&#x2F;“bad” classification and &lt;code&gt;x&lt;&#x2F;code&gt; variables are the words in
the tweet.&lt;&#x2F;p&gt;
&lt;p&gt;If this is gibberish to you, don’t despair its not really necessary to
understand the maths in detail. All this is saying is that to work out if the
tweet is bad - given the presence of a whole bunch of words - we multiply
together the probability that each of the words is present given the tweet is
known to be bad - $\Pi_{i=1}^nP(x_i|y)$. For instance, words such as &lt;code&gt;the&lt;&#x2F;code&gt; and
&lt;code&gt;you&lt;&#x2F;code&gt; may be equally likely to be present in good or bad tweets, whilst other
words are much more likely to be present in bad tweets alone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;&#x2F;h3&gt;
&lt;p&gt;If our tweet contains the words “Chocolate tastes great”, then the mathematical
formulation would become:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(bad|chocolate,tastes,great)=\frac{P(bad)\times P(chocolate|bad)\times P(tastes|bad)\times P(great|bad)}{P(chocolate,tastes,great)}$$&lt;&#x2F;p&gt;
&lt;p&gt;Where $P(chocolate)$ is the probability the tweet contains the word “chocolate”.
The probability the tweet is good would be given by:&lt;&#x2F;p&gt;
&lt;p&gt;$$P(good|chocolate,tastes,great)=\frac{P(good)\times P(chocolate|good)\times P(tastes|good)\times P(great|good)}{P(chocolate,tastes,great)}$$&lt;&#x2F;p&gt;
&lt;p&gt;To work out if the tweet is good or bad, we can just compare which of these
probability is greater, e.g.&lt;&#x2F;p&gt;
&lt;p&gt;$$P(good|chocolate,tastes,great) &amp;gt; P(bad|chocolate,tastes,great)$$&lt;&#x2F;p&gt;
&lt;p&gt;As the denominator of the fraction is the same on both probabilities, we only
need to compare the top lines of the fraction.&lt;&#x2F;p&gt;
&lt;p&gt;I tend to code in Python given the wide range of libraries available for
scientific computing. Classification problems are no exception, as Python’s
&lt;code&gt;scikit-learn&lt;&#x2F;code&gt; includes Naive Bayes functionality based on the mathematical
formulation above. &lt;code&gt;scikit-learn&lt;&#x2F;code&gt; can be installed by typing into the command
line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install scipy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span&gt; install scikit-learn
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;On Windows I’ve found it easier to use a Python installation such as WinPython
for these kinds of tasks as pip sometimes seems to struggle with building
packages on Windows. On Linux the above should work without a hitch.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;building-a-probability-matrix&quot;&gt;Building a probability matrix&lt;&#x2F;h3&gt;
&lt;p&gt;As we can see from the slightly horrible maths expression we used above, a Naive
Bayes just multiplies together a whole bunch of probabilities. This problem can
be made much easier for computers if we pre-build our probabilities, a process
known as &lt;em&gt;training&lt;&#x2F;em&gt; our algorithm. This requires a data set of known results - a
“training set” - which helps us build a probability matrix. This has the likely
outcomes (good&#x2F;bad tweet) as rows and the recorded words as columns. The values
in the matrix indicate the conditional probabilities - the chance the word is in
the tweet if it is either good or bad. For instance the following simplified
matrix could exist to determine if a tweet is related to the Star Wars movies:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;|---------|-------|------|
&lt;&#x2F;span&gt;&lt;span&gt;| Word    |  Bad  | Good |
&lt;&#x2F;span&gt;&lt;span&gt;|---------|-------|------|
&lt;&#x2F;span&gt;&lt;span&gt;| Wookie  | 0.56  | 0.03 | 
&lt;&#x2F;span&gt;&lt;span&gt;| Star    | 0.75  | 0.19 |
&lt;&#x2F;span&gt;&lt;span&gt;| Wars    | 0.79  | 0.32 |
&lt;&#x2F;span&gt;&lt;span&gt;| Ireland | 0.04  | 0.13 |
&lt;&#x2F;span&gt;&lt;span&gt;|---------|-------|------|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reading across, we can see that the probability the tweet contains the word
“wookie” given it is bad (i.e. related to Star Wars) is 0.56 or 56%. This matrix
is quite small, and in a real life situation would likely contain thousands of
columns. Storing and traversing this efficiently is quite a complex task!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-does-a-training-data-set-look-like&quot;&gt;What does a training data set look like?&lt;&#x2F;h3&gt;
&lt;p&gt;To train our Naive Bayes classifier we need some kind of learning data set. This
would contain as many tweets as we could find and a flag to indicate which of
these is considered “bad”. As I don’t really want to upload and work with a data
set filled with despicable words and phrases, we will continue with our example
of detecting if our tweets are related to the Star Wars movies. For instance the
following (made up) tweets are considered Star Wars related:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Luke Skywalker is not MY father&lt;br &#x2F;&gt;
Darth Vader spotted in the Dagobah system&lt;br &#x2F;&gt;
My Jedi mind tricks are amazing - just got a pay rise&lt;br &#x2F;&gt;
Episode 1 is horrendous&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Whilst the following would not be related:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;My coffee tastes like bilge water&lt;br &#x2F;&gt;
It’s raining cats and dogs&lt;br &#x2F;&gt;
Sometimes I look at the stars and cry&lt;br &#x2F;&gt;
New satellites are taking war to the stars&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;From looking at some of these made up examples, it is clear that this problem is
more difficult than first thought. For instance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Should the tweet about “Jedi mind tricks” be considered to be about Star Wars?
Its referring to Star Wars but is not directly related&lt;&#x2F;li&gt;
&lt;li&gt;without context, how do we know if “Episode 1 is horrendous” is Star Wars
based?&lt;&#x2F;li&gt;
&lt;li&gt;Other tweets such as the last one talk about “star” and “wars” but are not
related to “Star Wars” - only by reading the context and proximity of words
can we work out whether this tweet should count&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a weakness of the “bag of words” approach we are using here, and can
easily lead to “false positives” - where we incorrectly identify a tweet as
“Star Warsy” - or “false negatives” - where we say a tweet is not related to
Star Wars when it is. Whilst a percentage of false positives is probably
unavoidable, the objective is to improve the accuracy as much as possible so
that these false classifications are the exception rather than the rule. In
general a larger training dataset will make the classifier more likely to
correctly group our tweets.&lt;&#x2F;p&gt;
&lt;p&gt;The training set should be as large as possible but also as close to “reality”
as possible. For instance, a review of the equations above show that the final
classification is also dependent on the probability that a tweet is good or bad&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$P(y)$. This means that we should ensure the dataset is representative of real
life data - if we increase the proportion of bad tweets in our training dataset
then we increase the likelihood the algorithm will classify a tweet as bad.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;gathering-the-data&quot;&gt;Gathering the data&lt;&#x2F;h3&gt;
&lt;p&gt;In a real life situation we would probably need to gather thousands of tweets,
manually classify each one and then split this data into training and testing
data sets. This task would be quite time intensive. Luckily for a demonstration
like this we can create a basic twitter API script in Python to do a good
approximation of this task for us. There are quite a few different twitter APIs
written in Python, but the one that seemed to work the best for me was &lt;code&gt;tweepy&lt;&#x2F;code&gt;. I
installed this in the usual way (&lt;code&gt;pip install tweepy&lt;&#x2F;code&gt;) and then wrote some very
simple code to search for tweets.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tweepy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;API &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;TweepyApi, OAuthHandler
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;search_tweets&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    auth = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OAuthHandler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.consumer_key,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.consumer_secret
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    auth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_access_token&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.access_token_key,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MY_SETTINGS&lt;&#x2F;span&gt;&lt;span&gt;.access_token_secret
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;api = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TweepyApi&lt;&#x2F;span&gt;&lt;span&gt;(auth)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;result = api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt;=search, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;=count, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;en&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[x.text.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ascii&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;result]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;MY_SETTINGS&lt;&#x2F;code&gt; is a dictionary I imported from another file with my API
credentials - so that they are hidden from github. To get 20 tweets about star
wars, I can run the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;star_wars_tweets = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;search_tweets&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;star wars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes care of the bad tweets. To get the “good” tweets, we need a wide
sampling of random tweets. I played around with the streaming &lt;code&gt;sample()&lt;&#x2F;code&gt; API but
found that no matter what I did it denied my credentials - maybe I’m missing
something obvious? In the end I just decided to get some tweets for a few
unrelated topics such as “emberjs”, “nba”, “superbowl”, “science” and “bieber”.
Whilst this data set will be definition be incomplete (and reduce accuracy) its
a simple way to get enough data for a proof of concept.&lt;&#x2F;p&gt;
&lt;p&gt;By wrapping this code in a class and adding some helper functions I was able to
generate several hundred good tweets and 200 bad tweets in very short order. I
could repeat this process (after a short break to allow new tweets to
accumulate) to get another bunch of test data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-the-classifier&quot;&gt;Building the classifier&lt;&#x2F;h3&gt;
&lt;p&gt;The next step was to build the classifier itself. Lets jump straight into some
code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sklearn.feature_extraction.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;CountVectorizer, TfidfTransformer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sklearn.naive_bayes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;MultinomialNB
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expected&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Teaches the classifier based on the data set passed in the constructor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# use a utility function to load the data set and expected results (0 = good, 1 = bad)
&lt;&#x2F;span&gt;&lt;span&gt;    raw_data, expected = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load_dataset&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# STEP 1: vectorise the text
&lt;&#x2F;span&gt;&lt;span&gt;    vectoriser = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CountVectorizer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lowercase&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip_accents&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unicode&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.vectoriser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit_transform&lt;&#x2F;span&gt;&lt;span&gt;(raw_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# STEP 2: Apply &amp;quot;Term Frequency times Inverse Document Frequency&amp;quot; methodology
&lt;&#x2F;span&gt;&lt;span&gt;    transformer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TfidfTransformer&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transformer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit_transform&lt;&#x2F;span&gt;&lt;span&gt;(res)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# STEP 3: use a multinomial classifier to generate probabilities
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.classifier = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MultinomialNB&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fit&lt;&#x2F;span&gt;&lt;span&gt;(res, expected)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;scikit-learn&lt;&#x2F;code&gt;, building a classifier is very simple, and only three main
steps were required.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We ‘vectorise’ the text using a &lt;code&gt;CountVectorizer&lt;&#x2F;code&gt;. In English this means that
we count the number of times each word appears in the tweets and create a
dictionary with the word as a key and the count as the value.&lt;&#x2F;li&gt;
&lt;li&gt;We ‘transform’ the data using the &lt;code&gt;TfidfTransformer&lt;&#x2F;code&gt;. This is a useful
operation to apply for text analysis - it basically accounts for the fact
that words will be more frequent in longer tweets, and some words are popular
in both “good” and “bad” tweets. Clearly the length issue is not too much of
a problem with tweets given the character limit, but the “idf” part (Inverse
Document Frequency) reduces the impact of words that are common in both types
of tweets.&lt;&#x2F;li&gt;
&lt;li&gt;We train the classifier using a &lt;code&gt;MultinomialNB&lt;&#x2F;code&gt; (Multinomial Naive Bayes)
classifer. This uses our training set to calculate the probability table we
discussed earlier.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;code&gt;load_dataset()&lt;&#x2F;code&gt; method simply takes a text file and generates a list, with
each item being a tweet or a 0&#x2F;1 indicating if it is good or bad. The &lt;code&gt;expected&lt;&#x2F;code&gt;
variable is a &lt;code&gt;numpy&lt;&#x2F;code&gt; array. It is possible to combine the three steps into a
single &lt;code&gt;Pipeline&lt;&#x2F;code&gt;, however I found that it was easier to implement
&lt;code&gt;load_dataset&lt;&#x2F;code&gt; as a generator when I did not - making it easier to parse larger
files.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-the-classifier&quot;&gt;Testing the classifier&lt;&#x2F;h3&gt;
&lt;p&gt;With these 20 or so lines we have built a Naive Bayes classifier. We can test
the classifier (once trained) on a single tweet by doing the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A tweet about Star Wars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting together a quick script made it simple to gather the training and test
data, train the classifier and then run the test data, displaying results.
Running this four times I got:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Tested 120 tweets, got 102 correct (85%)
&lt;&#x2F;span&gt;&lt;span&gt;Tested 120 tweets, got 109 correct (91%)
&lt;&#x2F;span&gt;&lt;span&gt;Tested 120 tweets, got 117 correct (98%)
&lt;&#x2F;span&gt;&lt;span&gt;Tested 120 tweets, got 113 correct (94%)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The number presumably improved where there were more similar tweets in the two
datasets (i.e. if I ran the commands in quick succession then there was more
duplication between the test and training set and hence a higher accuracy).
Despite this, 85-90% seems to be a fairly good accuracy with such a small
training set.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;validating-tweets&quot;&gt;Validating tweets&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;client-side&quot;&gt;Client side?&lt;&#x2F;h3&gt;
&lt;p&gt;Having demonstrated that we can (with relatively good accuracy) classify Star
Wars tweets using Python and &lt;code&gt;scikit-learn&lt;&#x2F;code&gt;, we need to find a way that it could
be integrated with Twitter. One option would be to use a javascript client side
library that would test the tweet as it was typed. This javascript would
undertake the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;“Vectorise” the tweet, breaking into words and counting occurrences&lt;&#x2F;li&gt;
&lt;li&gt;Use a static probability matrix, multiplying the required values to generate
a probability of “good” (!$P(good)$!) and a probability of “bad” $P(bad)$&lt;&#x2F;li&gt;
&lt;li&gt;If $P(good) &amp;gt;= P(bad)$ then the tweet is good, and conversely if $P(bad) &amp;gt;
P(good)$ then the tweet is bad&lt;&#x2F;li&gt;
&lt;li&gt;Display a warning if the tweet is bad&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We can access the probability matrix generated by &lt;code&gt;scikit-learn&lt;&#x2F;code&gt; to save to file
by running&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;classifier.feature_log_prob_
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The big issue here is that for our test simple dataset this array was 2 rows,
773 columns. This was obtained by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;classifier.feature_log_prob_.shape
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once our matrix is stored in an ASCII encoded file, we can estimate how much
download bandwidth it would take up. Assuming 1 byte per character and with each
probability having a length of 12 bytes including punctuation, the simple matrix
generated from our training set above gives us a file size of around 20kB:&lt;&#x2F;p&gt;
&lt;p&gt;$$1\text{ byte}\times 12\text{ characters}\times 2\text{ rows}\times 773\text{ columns} = 18,552\text{ bytes}$$&lt;&#x2F;p&gt;
&lt;p&gt;To perform this operation client side, we would therefore need to download at
least 20kB of probability matrix. Given the emphasis placed on minimising
download amounts, this makes client side validation unlikely to be viable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;server-side&quot;&gt;Server side&lt;&#x2F;h3&gt;
&lt;p&gt;Another approach would be to use a simple web service approach, where the tweet
could be periodically sent to the server and analysed, and the web service could
return “0” if the tweet is classified as good, or “1” if the tweet is bad. This
is pretty similar to the spam detection services offered by companies such as
Askimet. In Python, something like this is very implemented with one of the many
light weight web frameworks such as Tornado or Flask. A flask app which
performed this could be as simple as the following (where the &lt;code&gt;TweetClassifier&lt;&#x2F;code&gt; is
a class implementing our classification code above):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask, request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask_cors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cross_origin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tweet_classifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;TweetClassifier
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;classifier = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TweetClassifier&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isfile&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;train_data.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;):
&lt;&#x2F;span&gt;&lt;span&gt;    classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetch_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;train_data.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;methods&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cross_origin&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_tweet&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    tweet = request.args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tweet&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(classifier.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classify&lt;&#x2F;span&gt;&lt;span&gt;(tweet))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If this was saved in a file called &lt;code&gt;run_server.py&lt;&#x2F;code&gt;, setting up the server would be
as simple as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;python run_server.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code above would set up a &lt;code&gt;route&lt;&#x2F;code&gt;, or a “web page” which would answer &lt;code&gt;GET&lt;&#x2F;code&gt;
requests to the url &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; (e.g. &lt;code&gt;http:&#x2F;&#x2F;127.0.0.1&#x2F;&lt;&#x2F;code&gt;) and return a response with
&lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt;. A simple &lt;code&gt;index.html&lt;&#x2F;code&gt; page (assuming the server is running at
&lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;) would look like the following, using jQuery for the AJAX request:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Check a tweet&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You are an awesome person&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;check_phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Check&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;2.1.0&#x2F;jquery.min.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#check_phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(e) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;preventDefault&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ajax&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;                    type: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                    url: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;                    data: {
&lt;&#x2F;span&gt;&lt;span&gt;                        tweet: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#phrase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(data, status, xhr) {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                });
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Visiting the &lt;code&gt;index.html&lt;&#x2F;code&gt; page shows an input box. We can type something in the
box, click the “Check” button, and in a short time either &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt; will be
displayed below the tweet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accuracy&quot;&gt;Accuracy&lt;&#x2F;h2&gt;
&lt;p&gt;Its clear after a little bit of testing that the accuracy depends to a large
extent on the quality of the training data. I tested with about 2,400 tweets as
training data and found that the accuracy was fairly good for items like:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Star Wars Episode 7 being released!&lt;br &#x2F;&gt;
C3PO is a rockstar&lt;br &#x2F;&gt;
Luke Skywalker, I am your father&lt;br &#x2F;&gt;
JJ Abrams directing Episode 7&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However due to the narrowly defined training set (for instance only six or seven
categories were used for “good” tweet data) statements like the following were
false positives due to the amount of discussion about the new Star Wars movies
being made:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Harry Potter Episode 7 is boring&lt;br &#x2F;&gt;
JJ Abrams directed Lost&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Some false negatives were also found due to only 200 “bad” tweets being used:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;3PO is a robot&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Despite these issues, the method produced something that could detect well over
half of Star Wars related tweets that I typed in in only a few hours of work.
Accuracy could be improved by gathering a broader range of random tweets
(presuming that the Twitter streaming API can be made to return anything other
than a 401 response code!) or by cherry picking and searching specific Star Wars
related terms where performance is poor. It is also possible that detecting
abusive tweets could be a little easier given certain words are exceedingly
common in these types of tweets but not in everyday speech.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally the use of N-grams, which are very short phrases could also improve
the algorithm. For instance a tweet could possibly include a phrase such as
“this millennium I want to fly a falcon” and not be related to Star Wars, whilst
a tweet “I like the Millennium Falcon” is far more likely to be related.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effectiveness&quot;&gt;Effectiveness&lt;&#x2F;h2&gt;
&lt;p&gt;The best that could be hoped from a system like this is that it would reduce
“casual” abuse, or at the very least make people think twice before sending a
horrible tweet. For many on the edge of society it is likely that a visual
warning would provide no deterrence whatsoever.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, the performance impact on a high volume site such as Twitter would
be considerable. Something like 400 million tweets a day are made, and for each
one to be passed through an “abuse” web service would require considerable
financial investment in terms of servers, support and so on. A client side
approach is technically feasible but unlikely to work given the large
probability matrix that would need to be downloaded in order for it to work. A
quick bit of research shows that a number of sentiment analysis APIs already
exist on-line, some are listed in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;blog.mashape.com&#x2F;post&#x2F;48757031167&#x2F;list-of-20-sentiment-analysis-apis&quot;&gt;this blog post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, as an investigation of sentiment analysis and Naive Bayes methods
the approach was a success but in terms of making a real dent in on-line abuse,
sadly it seems unlikely to provide any great benefits.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The full source code of the application and the article can be found at
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;twitter_sentiment&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;twitter_sentiment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>An Ember.js beginners tutorial</title>
        <published>2013-09-14T00:00:00+00:00</published>
        <updated>2013-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/an-emberjs-beginners-tutorial/"/>
        <id>https://willhart.io/post/an-emberjs-beginners-tutorial/</id>
        
        <content type="html" xml:base="https://willhart.io/post/an-emberjs-beginners-tutorial/">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;&#x2F;strong&gt; This is a pretty long tutorial! If you just want to see the
finished product you can browse the source code or have a look at a live demo&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Warning 2&lt;&#x2F;strong&gt; - this tutorial was written for Ember 1.0, and is therefore well
out of date.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;how-about-we-start-with-some-questions&quot;&gt;How about we start with some questions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-ember-js&quot;&gt;What is Ember.js?&lt;&#x2F;h3&gt;
&lt;p&gt;Ember.js is a client side javascript library which has been in development for
quite a while. It recently hit the spotlight as the first stable version (1.0.0)
was released.&lt;&#x2F;p&gt;
&lt;p&gt;In a nutshell, Ember helps you create web applications where a lot of the logic
runs in the browser and doesn’t necessarily require server requests to function.
You may also have heard of it in the same breath as javascript libraries like
backbone or angular.&lt;&#x2F;p&gt;
&lt;p&gt;When the user interacts with things like buttons and text boxes on the browser
page, Ember updates the DOM directly and (almost) instantly, showing changes
directly to the user without refreshing the page. If any server requests are
required this can be carried out asynchronously in the background. In effect,
Ember takes over the ‘application’ side of the web, leaving the server to act as
an API engine, serving and saving data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-ember-js&quot;&gt;Why Ember.js?&lt;&#x2F;h3&gt;
&lt;p&gt;There are an increasing number of client side javascript libraries out there, a
few of which I mentioned above. There is also a lot of debate into which one you
should use and whether you should even be using one. Its fair to say that some
of the debates I’ve read recently are a well over the top.&lt;&#x2F;p&gt;
&lt;p&gt;I’m going to avoid this whole issue and simply say that in the past year I’ve
tried a bunch of libraries out there and found that I enjoyed using Ember the
most. It suits my requirements, is relatively easy to use and seems to have a
very structured approach to development within the core team. I think if you
want an application which is easy to write and maintain, responds snappily to
user input and works using data from a REST API you can do a lot worse than
something like Ember. In no way am I trying to claim its the only way to go!&lt;&#x2F;p&gt;
&lt;p&gt;In the end, I suggest you have a go at Ember to see how it works and see if you
like it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-are-ember-applications-structured&quot;&gt;How are Ember applications structured?&lt;&#x2F;h3&gt;
&lt;p&gt;Ember.js applications use an MVC type structure. In this approach you have&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Models&lt;&#x2F;strong&gt; which define the data that is used in an application,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Controllers&lt;&#x2F;strong&gt; which modify, query and edit the data and provide user
interactions, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Views&lt;&#x2F;strong&gt; which display the data and capture user actions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition, Ember uses templates to define how views should look in the
browser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;today-s-application&quot;&gt;Today’s application&lt;&#x2F;h2&gt;
&lt;p&gt;There are a lot of TODO tutorials out in the wild, and I’m certainly not going
to write up another one. What we’re going to build today is something altogether
more exciting, something never before seen in the world of introductory
tutorials. Wait for it… today we are going to build a &lt;strong&gt;DICE ROLLER&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully our Dice Roller is going to show a couple of the interesting Ember
features in an application which does not require a server backend.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For consuming REST APIs, Ember has a data backend known as &lt;code&gt;ember-data&lt;&#x2F;code&gt;. I’ve
never found that this quite matches my requirements so I’ve always rolled my
own. I am unlikely to spend much time discussing this approach as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eviltrout.com&#x2F;2013&#x2F;03&#x2F;23&#x2F;ember-without-data.html&quot;&gt;Evil
Trout&lt;&#x2F;a&gt; has already
done a pretty good job.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So our application needs a few features…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Input the number of dice and the number of sides into a text box (e.g. 3d6)&lt;&#x2F;li&gt;
&lt;li&gt;“Roll” the dice and record the number of results&lt;&#x2F;li&gt;
&lt;li&gt;Draw a pretty (or otherwise) HTML chart of the results&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Simple right? Well this is a beginners tutorial after all! :) This means lots of
things aren’t going to be covered in this tutorial… some of the major Ember
features left out are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How to structure the files for a complex or large application&lt;&#x2F;li&gt;
&lt;li&gt;How to use ember-data&lt;&#x2F;li&gt;
&lt;li&gt;How to roll your own data access&lt;&#x2F;li&gt;
&lt;li&gt;Anything not covered below :)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Despite this I think we are going to cover enough to get somebody new to Ember
on the right track. Enough talk, lets get coding!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;building-the-html&quot;&gt;Building the HTML&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing that needs to be done is to build an HTML file to serve the
application. For starters, this is just a matter of building a basic HTML
document with the jQuery, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.emberjs.com&#x2F;&quot;&gt;Ember&lt;&#x2F;a&gt; and
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;handlebarsjs.com&#x2F;&quot;&gt;handlebars&lt;&#x2F;a&gt; scripts included. Handlebars is a
templating language which lets you write out data bound templates that are
rendered into the browser. Create an index.html file and enter the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;An Ember dice roller&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;2.0.3&#x2F;jquery.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;handlebars.js&#x2F;1.0.0&#x2F;handlebars.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;ember.js&#x2F;1.0.0&#x2F;ember.prod.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There shouldn’t be anything too exciting here - we are simply setting up a
single HTML file with the standard &lt;code&gt;head&lt;&#x2F;code&gt; and &lt;code&gt;body&lt;&#x2F;code&gt; sections and including some
scripts. Its important that the scripts appear in this order; Ember requires
jQuery and handlebars and will give you errors if the scripts have not been
included before the Ember script.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are running the web page on your hard drive using a file:&#x2F;&#x2F;&#x2F; url, you
may need to put an http: in front of the cdnjs URLs above.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;create-an-application&quot;&gt;Create an application&lt;&#x2F;h3&gt;
&lt;p&gt;So far so good. Now we need to create and load our Ember application. Lets start
by creating a new file, &lt;code&gt;app.js&lt;&#x2F;code&gt; and including it in our HTML document below the
other script tags:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;javascript&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside app.js, write the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_TRANSITIONS: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_BINDINGS: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_VIEW_LOOKUPS: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_STACKTRACE_ON_DEPRECATION: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    LOG_VERSION: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    debugMode: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code creates a brand new application using &lt;code&gt;Ember.Application.create()&lt;&#x2F;code&gt;,
calls it Roller and passes it a bunch of variables inside the &lt;code&gt;{}&lt;&#x2F;code&gt;. These
variables are all about debugging information and should probably be set to
&lt;code&gt;false&lt;&#x2F;code&gt; for a production application. However, as we are just getting started with
Ember lets leave them on for now as their output is quite useful.&lt;&#x2F;p&gt;
&lt;p&gt;If you open up &lt;code&gt;index.html&lt;&#x2F;code&gt; in your browser and go to the developer console
(&lt;code&gt;F12&lt;&#x2F;code&gt; in chrome) you should see some messages on the console:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Could not find &amp;quot;application&amp;quot; template or view. Nothing will be rendered Object {fullName: &amp;quot;template:application&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;Could not find &amp;quot;index&amp;quot; template or view. Nothing will be rendered Object {fullName: &amp;quot;template:index&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;Transitioned into &amp;#39;index&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These are debug messages that we asked for in our &lt;code&gt;Application.create&lt;&#x2F;code&gt; call
above. We can see that something is not quite right - Ember can’t find a couple
of templates or views. Its not all bad news though, as Ember has transitioned
into ‘index’. In this case &lt;code&gt;index&lt;&#x2F;code&gt; refers to a &lt;code&gt;Route&lt;&#x2F;code&gt; which we will talk about
more later.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, lets start by fixing some of these log messages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-application-template&quot;&gt;The application template&lt;&#x2F;h3&gt;
&lt;p&gt;Ember uses a lot of convention over configuration. This basically means that
when it goes to a URL, it expects a number of objects to exist with very
specific names. If it doesn’t find these objects, it can often create default
ones.&lt;&#x2F;p&gt;
&lt;p&gt;In this case when we load our application, Ember looks for a handlebars template
called &lt;code&gt;application&lt;&#x2F;code&gt;. This template is loaded for every url or request and wraps
up and displays the entire application. For now, this template can be quite
simple, but when you build a more complex application it can include things like
menus, headers and footers.&lt;&#x2F;p&gt;
&lt;p&gt;Lets write a simple one now. In the body of your index.html file, above the
script tags enter the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Dice Roller&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outlet&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks a lot like HTML, and it basically is. The important things are that
we have specified &lt;code&gt;type=&quot;text&#x2F;x-handlebars&quot;&lt;&#x2F;code&gt; on our script tag, which tells
handlebars that it should compile everything inside the script tags as a
handlebars template. Ember then looks for the attribute &lt;code&gt;id=&quot;application&quot;&lt;&#x2F;code&gt; and
realises that we want this template to be the application template.&lt;&#x2F;p&gt;
&lt;p&gt;Refreshing the page, you should see that the first log message we saw before
should have changed from &lt;code&gt;Could not find &quot;application&quot;&lt;&#x2F;code&gt; to &lt;code&gt;Rendering application with default view&lt;&#x2F;code&gt;, and you should see the heading “Dice Roller” in
your browser window. So we haven’t quite removed any log messages but this new
message is just Ember saying to us “I see you have an application template, but
since you don’t have an application view I’m going to make one for you.” No big
deal, right?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; When you make changes to Ember applications make sure you refresh the
page entirely… sounds obvious but if you click on a link in the Ember
application the application itself doesn’t get updated from the server.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The only strange thing in this template is the &lt;code&gt;{{outlet}}&lt;&#x2F;code&gt; written after our
heading. This is a handlebars tag - the curly braces tell handlebars to do
something with whatever is inside. In this case, an &lt;code&gt;outlet&lt;&#x2F;code&gt; is where our
application can put other views or templates. We can see the effect of this by
creating another template below the application template in our &lt;code&gt;index.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Our content goes here
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save and refresh and you should see that below our heading there is now the text
“our content goes here”. What has just happened?&lt;&#x2F;p&gt;
&lt;p&gt;This is convention over configuration working overtime. Ember has loaded up,
looked for the default application template and rendered it. It has then checked
the URL and realised that its in the &lt;code&gt;index&lt;&#x2F;code&gt; resource (no further URL has been
provided - more on this later) and has looked for the &lt;code&gt;index&lt;&#x2F;code&gt; template. Finding
it, Ember has put the output from this template into the &lt;code&gt;{{outlet}}&lt;&#x2F;code&gt; of the
application template. Simple, right!?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;defining-urls-or-resources&quot;&gt;Defining URLs (or resources)&lt;&#x2F;h3&gt;
&lt;p&gt;You’ll notice that we haven’t actually told Ember about any URLs to provide
yet… its simply guessed that we want an “index” route when we visit
&lt;code&gt;index.html&lt;&#x2F;code&gt; directly and as we haven’t defined one, it has generated one for
us.&lt;&#x2F;p&gt;
&lt;p&gt;“But Will,” I hear you say, “hardly any applications simply use one URL”. How
right you are! Luckily for us, Ember provides a mechanism where complex, nested
and dynamic URLs can be provided. This system is handled by the &lt;code&gt;Router&lt;&#x2F;code&gt; object.
By default Ember generates an index route, and so no further work is required if
we just want a simple resource. In our case we don’t want anything too complex&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Ember you can think of a resource as kind of like the a “page” in static
HTML websites.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Configuring a router is dead simple. At the bottom of your &lt;code&gt;app.js&lt;&#x2F;code&gt; add the
following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it! Refresh your page… errr, nothing has changed. Well behind the
scenes, Ember now knows about our &lt;code&gt;roll&lt;&#x2F;code&gt; URL and if we ask for it will try to
find the &lt;code&gt;roll&lt;&#x2F;code&gt; template. Lets link up this resource in our index view. Where we
previously wrote “Our content goes here” in the index template, replace it with
the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;{{#linkTo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}Start rolling dice!{{&#x2F;linkTo}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The curly braces tell us that this is another handlebars “command”, but what
does it do? Hopefully &lt;code&gt;linkTo&lt;&#x2F;code&gt; is a bit of a give away. This command generates a
link (using an HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;&#x2F;code&gt; tag to the resource we have called roll, and puts
everything between the &lt;code&gt;{{#linkTo ... }}&lt;&#x2F;code&gt; and &lt;code&gt;{{&#x2F;linkTo}}&lt;&#x2F;code&gt; tags inside the
link. Refresh it and see what happens.&lt;&#x2F;p&gt;
&lt;p&gt;A link appears in the index and we can click it to go to the roll template.
Notice that our address bar now has &lt;code&gt;index.html#&#x2F;roll&lt;&#x2F;code&gt;. This is how Ember knows
which resource to load. Everything after the &lt;code&gt;#&#x2F;&lt;&#x2F;code&gt; is a resource name and we can
see here it is roll which we defined in our resources! For more complex or
nestted resources you may see a link like &lt;code&gt;index.html#&#x2F;roll&#x2F;1&#x2F;my-roll&lt;&#x2F;code&gt;. As long
as you have correctly configured your &lt;code&gt;Router&lt;&#x2F;code&gt;, Ember will know how to handle
this.&lt;&#x2F;p&gt;
&lt;p&gt;You can define custom behaviour for &lt;code&gt;Routes&lt;&#x2F;code&gt; such as &lt;code&gt;roll&lt;&#x2F;code&gt; or &lt;code&gt;index&lt;&#x2F;code&gt; which
lets you load specific data or add some complex redirect behaviour (for instance
you could check if the user is logged in and if required redirect to a login
page).&lt;&#x2F;p&gt;
&lt;p&gt;In our Dice Roller application at the moment, its silly that users have to
navigate to the application then click on a link to start rolling dice. Sure, in
a real world application we might just merge everything in the roll route into
the index route and leave it at that. For the sake of a highly contrived routing
example, lets instead &lt;code&gt;redirect&lt;&#x2F;code&gt; any visits to the &lt;code&gt;index&lt;&#x2F;code&gt; route to the &lt;code&gt;roll&lt;&#x2F;code&gt;
route.&lt;&#x2F;p&gt;
&lt;p&gt;Below your &lt;code&gt;Router.map&lt;&#x2F;code&gt; call in the &lt;code&gt;app.js&lt;&#x2F;code&gt; file, add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IndexRoute &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;transitionTo&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;extend&lt;&#x2F;code&gt; part of &lt;code&gt;Ember.Route.extend&lt;&#x2F;code&gt; simply tells Ember we want to create a
new version of the pre-defined &lt;code&gt;Ember.Route&lt;&#x2F;code&gt; object and add some of our own
logic to it. This is akin to basic class inheritance in languages such as
Python, for instance you may view this as something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyNewRouteClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ember.Route&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;my new route methods follow&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you remove the &lt;code&gt;#&#x2F;roll&lt;&#x2F;code&gt; from the URL and refresh, you shoud see that the roll
route is automagically navigated to whenever we try to go to the index. Sweet!
We’ll come back to routes a bit later on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;add-some-user-controls&quot;&gt;Add some user controls&lt;&#x2F;h2&gt;
&lt;p&gt;If you looked at the console when we first created our roll &lt;code&gt;linkTo&lt;&#x2F;code&gt; you would
have noticed that Ember &lt;code&gt;could not find &quot;roll&quot; template or view&lt;&#x2F;code&gt; which is
expected as we haven’t defined one. Lets add one now below the index template in
our &lt;code&gt;index.html&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Enter your required dice roll below, for instance &amp;quot;3d6&amp;quot; will roll three six sided dice.
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Results&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {{#each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        I rolled a dice 
&lt;&#x2F;span&gt;&lt;span&gt;    {{else}}
&lt;&#x2F;span&gt;&lt;span&gt;        No results yet
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;each}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few new things here - the &lt;code&gt;{{input}}&lt;&#x2F;code&gt; and &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; tags.&lt;&#x2F;p&gt;
&lt;p&gt;The input tag is a handlebars &lt;code&gt;helper&lt;&#x2F;code&gt; that Ember provides. This renders an
input tag of type text with the given placeholder. It also uses &lt;code&gt;valueBinding&lt;&#x2F;code&gt;
to let the controller know that it should ensure that the controller property
&lt;code&gt;rollString&lt;&#x2F;code&gt; matches whatever is in the text box at all times. The HTML code
generated by this may look a little like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dice_roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ember-view ember-text-field&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great, so what? Well you are right, so far not particularly exciting but stay
tuned!&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; tag does a forEach on the list or array it is provided. In other
words it does whatever is between the &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; and &lt;code&gt;{{else}}&lt;&#x2F;code&gt; once per object
in the given array.&lt;&#x2F;p&gt;
&lt;p&gt;In this case we have a list of some sort called &lt;code&gt;content&lt;&#x2F;code&gt; and for each item in
that list it prints out &lt;code&gt;I rolled a dice&lt;&#x2F;code&gt;. We can access properties of each of
the items in the block by using &lt;code&gt;roll&lt;&#x2F;code&gt;. We also provide an &lt;code&gt;{{else}}&lt;&#x2F;code&gt; block.
This tells handlebars what to show if there are no items in the &lt;code&gt;content&lt;&#x2F;code&gt; list.&lt;&#x2F;p&gt;
&lt;p&gt;If you refresh the page you will see the input box and text rendered but not
much else. Thats because we haven’t hooked up any logic or models to the
application yet. Lets do this now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-some-models&quot;&gt;Adding some models&lt;&#x2F;h2&gt;
&lt;p&gt;Our model is going to be very simple, and just define a dice result and a count.
In your &lt;code&gt;app.js&lt;&#x2F;code&gt; file, add the following up near the top, but just after the &lt;code&gt;var Roller&lt;&#x2F;code&gt; declaration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    diceNumber: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    totalRolls: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    numberOfRolls: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;proportion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;totalRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;px;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;totalRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a bit of a javascript mouthful but really quite straight forward. Once
again we are calling &lt;code&gt;extend&lt;&#x2F;code&gt; on something Emberish - here the base &lt;code&gt;Object&lt;&#x2F;code&gt; -
and providing some additional information inside the &lt;code&gt;{}&lt;&#x2F;code&gt;. The first three are
simple properties, just some variables that we are storing against this model.&lt;&#x2F;p&gt;
&lt;p&gt;The last declaration - the &lt;code&gt;proportion&lt;&#x2F;code&gt; property - is a bit more complicated but
is where the magic of Ember starts to really show through. Ember &lt;code&gt;properties&lt;&#x2F;code&gt;
are a neat feature that can be used to automatically update the contents of a
model when some other attribute changes. Properties aren’t stored in a database,
but are &lt;em&gt;derived&lt;&#x2F;em&gt; from other attributes of the model itself. In this case, we
can see that after our function we have written&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;property&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;totalRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that if on a given model the value of either of &lt;code&gt;totalRolls&lt;&#x2F;code&gt; or
&lt;code&gt;numberOfRolls&lt;&#x2F;code&gt; changes, then the &lt;code&gt;proportion&lt;&#x2F;code&gt; property will be updated. Any
user interface elements which depend on the &lt;code&gt;proportion&lt;&#x2F;code&gt; property (we’ll see how
to manage this later) will be automatically updated!&lt;&#x2F;p&gt;
&lt;p&gt;For added confusion we’ve created a property here that returns a bit of CSS that
we will later &lt;code&gt;bind&lt;&#x2F;code&gt; to our DOM element. In this case it returns a width based
on the percentage of total rolls that this dice number represents.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; The property above uses &lt;code&gt;this.get(&quot;variableName&quot;);&lt;&#x2F;code&gt; to retrieve
properties from the model. In Ember applications we generally need to use this
approach for accessing properties rather than simply &lt;code&gt;this.variableName&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly for setting values we use &lt;code&gt;this.set(&quot;variableName&quot;, value)&lt;&#x2F;code&gt; instead
of &lt;code&gt;this.variableName = value&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;loading-models-into-a-route&quot;&gt;Loading models into a route&lt;&#x2F;h2&gt;
&lt;p&gt;By itself, just declaring a model doesn’t actually do anything. We need to tell
our route how to gather together the required models. This is done by
&lt;code&gt;extend&lt;&#x2F;code&gt;ing the &lt;code&gt;RollRoute&lt;&#x2F;code&gt; in a similar fashion as we did before when we
extended the &lt;code&gt;IndexRoute&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below your &lt;code&gt;IndexRoute&lt;&#x2F;code&gt; declaration in &lt;code&gt;app.js&lt;&#x2F;code&gt;, add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RollRoute &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in a data driven application this could be used 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to get information from a server.  Here we just 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; declare an empty array in memory
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setupController&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We provide two additional methods to the &lt;code&gt;RollRoute&lt;&#x2F;code&gt;, firstly &lt;code&gt;model()&lt;&#x2F;code&gt; which
retrieves (or in this case generates in memory) some models, and a
&lt;code&gt;setupController()&lt;&#x2F;code&gt; method which stores the model information in the controller.
(At the moment our &lt;code&gt;RollController&lt;&#x2F;code&gt; is auto-generated by Ember as we haven’t
defined one).&lt;&#x2F;p&gt;
&lt;p&gt;Notice we have used the &lt;code&gt;controller.set()&lt;&#x2F;code&gt; method. Here Ember calls
&lt;code&gt;setupController&lt;&#x2F;code&gt; with a reference to the currently loaded controller - in this
case the autogenerated &lt;code&gt;RollController&lt;&#x2F;code&gt; - as well as the model that was loaded
using the &lt;code&gt;model()&lt;&#x2F;code&gt; method defined earlier. The observant amongst you will no
doubt notice that in our &lt;code&gt;roll&lt;&#x2F;code&gt; template above we used &lt;code&gt;{{each roll in content}}&lt;&#x2F;code&gt; which should hopefully start to set a few light bulbs glowing!&lt;&#x2F;p&gt;
&lt;p&gt;Refreshing the page again should show that once again nothing above the surface
has changed. Our text box is still sitting there dumbly and we should be seeing
a “No results yet” output. Just for kicks, lets change our &lt;code&gt;model&lt;&#x2F;code&gt; function from
returning&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to returning&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Refreshing the page and you should see the output change from “No results yet”
to “I rolled a dice I rolled a dice I rolled a dice”. We’ve used
&lt;code&gt;Roller.Roll.create()&lt;&#x2F;code&gt; to create three instances of our model and passed them to
the controller in an array. Ember has then taken the &lt;code&gt;content&lt;&#x2F;code&gt; property we set
on the controller and used it in our view. &lt;strong&gt;Eureka!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you get this then you have followed along correctly so far! Ok, quickly
change it back before somebody gets blinded by Ember’s magnificence.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;connecting-up-actions&quot;&gt;Connecting up actions&lt;&#x2F;h2&gt;
&lt;p&gt;In the last section we accomplished something pretty wonderful. With a few lines
of code we set up a route that loads models into memory and displays them in the
user interface. Lets take it one step further now and generate models on the fly
based on user input.&lt;&#x2F;p&gt;
&lt;p&gt;Coming to the rescue here are Embers &lt;code&gt;actions&lt;&#x2F;code&gt;. These are kind of like event
handlers, in that they link up things like click events on buttons or links to
functions in your controller. Ember does also provide a way to directly handle
DOM events (such as &lt;code&gt;onClick&lt;&#x2F;code&gt;) in views, we’ll cover those right at the end.&lt;&#x2F;p&gt;
&lt;p&gt;To see how this works, we need to actually define a controller. Firstly, however
lets add a little bit to our roll template in &lt;code&gt;index.html&lt;&#x2F;code&gt;. Replace the current
template with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;text&#x2F;x-handlebars&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Enter your required dice roll below, for instance &amp;quot;3d6&amp;quot; will roll three six sided dice.
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollDice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}&amp;gt;Roll Dice&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;    {{#if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;if}}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Results&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{#each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll-number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll.diceNumber&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll-result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bindAttr style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roll.proportion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}&amp;gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll.numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{else}}
&lt;&#x2F;span&gt;&lt;span&gt;        No results yet
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;each}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see we’ve used an &lt;code&gt;{{#if}}&lt;&#x2F;code&gt; tag (which does exactly what we would
expect) to show errors if any were found - we’ll use this in our controller.
We’ve also improved our output for rolls in the &lt;code&gt;{{#each}}&lt;&#x2F;code&gt; block. We added a
&lt;code&gt;div&lt;&#x2F;code&gt; and two &lt;code&gt;spans&lt;&#x2F;code&gt; to show our values.&lt;&#x2F;p&gt;
&lt;p&gt;We’ve also used a tag &lt;code&gt;{{bindAttr ...}}&lt;&#x2F;code&gt;. This tag lets us bind an attribute of
an HTML tag directly to a property of our model. Here we are using it to set the
width of the &lt;code&gt;&amp;lt;span&amp;gt;&lt;&#x2F;code&gt; element based on the &lt;code&gt;proportion&lt;&#x2F;code&gt; property, which is in
turn based on the percentage of total rolls this number represents. Because
Ember automatically updates the rendered templates whenever the underlying data
changes, if we make changes to &lt;code&gt;content&lt;&#x2F;code&gt; on our controller then the width of
this span will update automatically. Thats neat!&lt;&#x2F;p&gt;
&lt;p&gt;Ok, enough messing about, lets get on to our controller. This will take quite a
bit more code so bear with me for a moment or two. At the bottom of the &lt;code&gt;app.js&lt;&#x2F;code&gt;
file, add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RollController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rollDice&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;= [],
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rnd&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if anything was typed in the text box
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Please fill out the text box!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; split up the string around the &amp;#39;d&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;.length !== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if we had a &amp;quot;d&amp;quot; in our text (i.e. its correctly formatted)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;You need to enter a value in the format &amp;#39;xdy&amp;#39;.  &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; then split up and parse the required numbers
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roll_parts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isNaN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls&lt;&#x2F;span&gt;&lt;span&gt;) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isNaN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;+= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rolls and sides must be numbers.  &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; generate the dice rolls if we haven&amp;#39;t found any errors
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.length === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; generate all the models
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roll&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;                        diceNumber: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        totalRolls: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls
&lt;&#x2F;span&gt;&lt;span&gt;                    }));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now roll all the dice
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; roll a dice
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rnd &lt;&#x2F;span&gt;&lt;span&gt;= Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;floor&lt;&#x2F;span&gt;&lt;span&gt;(Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sides&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; increment the required model
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rnd&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;incrementProperty&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numberOfRolls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; update the content
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; display any errors
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By now we should be starting to become familiar with Embers &lt;code&gt;extend&lt;&#x2F;code&gt; syntax, but
there is a lot more code here than we’ve seen before. This is our application’s
logic, and most of it is to do with error checking.&lt;&#x2F;p&gt;
&lt;p&gt;I’m not going to go into too much detail as its just plain javascript for the
most part, but basically it does the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Gets the input from the text box and checks it is in the right format&lt;&#x2F;li&gt;
&lt;li&gt;Builds a model for each side of the dice&lt;&#x2F;li&gt;
&lt;li&gt;Randomly rolls dice and increments the numberOfRolls attribute for the
correct model by one using the model.incrementProperty(‘property’) method&lt;&#x2F;li&gt;
&lt;li&gt;Sets the content of the controller to our new models and saves any errors
encountered&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now when you type a valid dice roll into the text box and click the Roll Dice
button, you should see some (unformatted) results appearing below. The key
things to note are that we have used &lt;code&gt;this.get()&lt;&#x2F;code&gt; and &lt;code&gt;this.set()&lt;&#x2F;code&gt; to access
properties on the controller. At the end, we have set the &lt;code&gt;content&lt;&#x2F;code&gt; and &lt;code&gt;errors&lt;&#x2F;code&gt;
properties on the controller and these are the same &lt;code&gt;content&lt;&#x2F;code&gt; and &lt;code&gt;errors&lt;&#x2F;code&gt;
properties we reference in our template. Similarly, in our template we set the
&lt;code&gt;id&lt;&#x2F;code&gt; attribute of our &lt;code&gt;{{input}}&lt;&#x2F;code&gt; to &lt;code&gt;rollString&lt;&#x2F;code&gt; and as a result this is
available in our controller using &lt;code&gt;this.get(&quot;rollString&quot;)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can now refresh the page. Try typing the following into the text box and see
what you get:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1&lt;&#x2F;li&gt;
&lt;li&gt;1d&lt;&#x2F;li&gt;
&lt;li&gt;1d6&lt;&#x2F;li&gt;
&lt;li&gt;2da&lt;&#x2F;li&gt;
&lt;li&gt;adb&lt;&#x2F;li&gt;
&lt;li&gt;$#dfgk34j6&lt;&#x2F;li&gt;
&lt;li&gt;ddd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thats it! We now have a fully functioning - if a little plain - dice rolling
application using Ember. By my count we’ve written about 150 lines of javascript
and HTML, which is not too shabby, although we could cut out a bit by merging
our roll and index controllers as we discussed above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;styling-the-application&quot;&gt;Styling the application&lt;&#x2F;h2&gt;
&lt;p&gt;Until now we have just gone on using the default, ugly HTML styles. We can
easily provide a bit of beauty to our application by just adding a sprinkle of
CSS in the usual way. Into the &lt;code&gt;head&lt;&#x2F;code&gt; tag of your &lt;code&gt;index.html&lt;&#x2F;code&gt;, link up a
stylesheet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;styles.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create styles.css and paste in the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;errors &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2em&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1px &lt;&#x2F;span&gt;&lt;span&gt;solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#A22&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#A22&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#FDD&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-number &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    display: inline-block;
&lt;&#x2F;span&gt;&lt;span&gt;    margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-number &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    font-weight: bolder;
&lt;&#x2F;span&gt;&lt;span&gt;    min-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;roll-result &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#03C&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    color: white;
&lt;&#x2F;span&gt;&lt;span&gt;    text-align: right;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    font-size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    border: none;
&lt;&#x2F;span&gt;&lt;span&gt;    outline: none;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#EEE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    min-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;350px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cursor:pointer;
&lt;&#x2F;span&gt;&lt;span&gt;    background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#03C&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    color: white;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our errors are styled, and when we click “Roll Dice” a nice bar graph will
be drawn showing the results. You should see something like the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;an-emberjs-beginners-tutorial&#x2F;dice_roller_screenshot.png&quot; alt=&quot;Ember.js Dice Roller Screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-improvements&quot;&gt;Further Improvements&lt;&#x2F;h2&gt;
&lt;p&gt;One annoying “feature” of this application is that when we want to roll some
dice we have to click “Roll Dice” every time. It would be much nicer if we could
just hit enter when we are happy.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, lets use a custom view which extends Ember’s &lt;code&gt;TextView&lt;&#x2F;code&gt;. At the very
end of our &lt;code&gt;app.js&lt;&#x2F;code&gt; file, insert the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Roller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DiceInputField &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TextField&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;keyDown&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if we pressed the enter key
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keyCode &lt;&#x2F;span&gt;&lt;span&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; call the controllers &amp;#39;rollDice&amp;#39; function
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;controller&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This extends the Ember.TextField (which was already being used by the
&lt;code&gt;{{input}}&lt;&#x2F;code&gt; tag). We have also defined a &lt;code&gt;keyDown&lt;&#x2F;code&gt; function, which Ember
automatically binds to the &lt;code&gt;keyDown&lt;&#x2F;code&gt; event of the field. Inside the function it
checks whether we have hit the enter key (key code 13) and if we have it sends
the &lt;code&gt;rollDice&lt;&#x2F;code&gt; action to the controller.&lt;&#x2F;p&gt;
&lt;p&gt;We have to update our template so that it uses this new view. Simply change the
following line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;handlebars&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-handlebars &quot;&gt;&lt;code class=&quot;language-handlebars&quot; data-lang=&quot;handlebars&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view Roller.DiceInputField valueBinding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollString&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rollDice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your dice roll, e.g. &amp;#39;3d6&amp;#39; here&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Thats it! Hopefully this has given you a fair idea of what is possible in Ember
applications. If you have any comments, corrections or suggestions then feel
free to comment below. Otherwise, get Embering!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Editing Markdown with Ember.js</title>
        <published>2013-06-21T00:00:00+00:00</published>
        <updated>2013-06-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/editing-markdown-with-emberjs/"/>
        <id>https://willhart.io/post/editing-markdown-with-emberjs/</id>
        
        <content type="html" xml:base="https://willhart.io/post/editing-markdown-with-emberjs/">&lt;p&gt;If you read my rather lengthy &lt;a href=&quot;&#x2F;an-emberjs-beginners-tutorial&quot;&gt;beginning ember.js
tutorial&lt;&#x2F;a&gt; you may have an inkling that I’m
rather taken with the new kid on the block. I recently started thinking of ways
that I could use my demarcate editor in Ember applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-demarcateeditor-view&quot;&gt;The DemarcateEditor view&lt;&#x2F;h2&gt;
&lt;p&gt;The answer turned out to be incredibly simple, thanks to some code from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KasperTidemann&#x2F;ember-contenteditable-view&#x2F;blob&#x2F;master&#x2F;ember-contenteditable-view.js&quot;&gt;Kasper
Tidemann&lt;&#x2F;a&gt;.
By adding only a couple of lines, I’ve taken Kasper’s code and turned it into a
demarcate backed WYSIWYG Markdown editor. You can see the &lt;del&gt;live demo&lt;&#x2F;del&gt; (no
longer available) and as usual, the source is on
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;ember_demarcate_adapter_example&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; At the moment you need to be on the develop branch of demarcate to
access 2.0 features.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To make the &lt;code&gt;contenteditable&lt;&#x2F;code&gt; view demarcate enabled, I had to change two lines of
code. In the &lt;code&gt;didInsertElement&lt;&#x2F;code&gt; I added a line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;demarcate&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;enable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which simply takes the view’s DOM wrapper and enables it as a demarcate editor.
To parse the DOM tree into markdown when the contents of the view’s &lt;code&gt;div&lt;&#x2F;code&gt; changes,
I added a call to &lt;code&gt;Ember.run.debounce&lt;&#x2F;code&gt; in the &lt;code&gt;keyUp&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;debounce&lt;&#x2F;span&gt;&lt;span&gt;({&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;component&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;component&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;demarcate&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Ember.run.debounce&lt;&#x2F;code&gt; is quite a nifty little Ember function. “Debouncing” is
a common theme in microcontroller hardware design. It refers to the real life
effect where pushing a button may actually result in a rapidly oscillating or
“bouncing” electrical signal. This needs to be smoothed or “debounced” so that
the micro-controller only reacts to a button being pushed once.&lt;&#x2F;p&gt;
&lt;p&gt;In this case, as parsing a large HTML DOM into markdown may take a bit of
effort, we don’t want to do this every time the user presses a key. The &lt;code&gt;debounce&lt;&#x2F;code&gt;
method basically sets a timer (in this case for 1000 milliseconds) and restarts
the timer if the function is called again during the timeout period. In other
words, the call to &lt;code&gt;debounce&lt;&#x2F;code&gt; in this case makes &lt;code&gt;demarcate.parse()&lt;&#x2F;code&gt; wait for a
pause in &lt;code&gt;keyPress&lt;&#x2F;code&gt; events longer than 1 second.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-demo-application&quot;&gt;A demo application&lt;&#x2F;h2&gt;
&lt;p&gt;Creating a demo application requires only a few lines of code. First I create an
Ember application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I also define an Application controller:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ApplicationController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ObjectController&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    editorHTML: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;h1&amp;gt;Instructions&amp;lt;&#x2F;h1&amp;gt;Edit &amp;lt;strong&amp;gt;your&amp;lt;&#x2F;strong&amp;gt; document here, and &amp;lt;i&amp;gt;see&amp;lt;&#x2F;i&amp;gt; the Markdown appear  next door &amp;amp;gt;&amp;amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    markdown: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;# Instructions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Edit your **document** here, and *see* the Markdown appear next door &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has two properties - &lt;code&gt;editorHTML&lt;&#x2F;code&gt; which will be bound to the the current
HTML of the contenteditable, and &lt;code&gt;markdown&lt;&#x2F;code&gt; which will be bound to the parsed
markdown of the contenteditable. Here, I’ve hard coded the HTML and markdown
strings to initialise the values. In real life you will probably have Markdown
stored in a database and will use something like &lt;code&gt;showdown.js&lt;&#x2F;code&gt; or your backend’s
Markdown parser to build up the HTML.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, to make the HTML and markdown render correctly (and safely) in the
browser, a little handlebars helper is required. This just makes the text safe
(strips tags) and converts newlines to &lt;code&gt;&amp;lt;br&amp;gt;&lt;&#x2F;code&gt; tags.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Handlebars&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerBoundHelper&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;breaklines&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Handlebars&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;escapeExpression&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;gm&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;br&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new Ember.Handlebars.SafeString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All we need then is a template in our index.html:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;x-handlebars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div class=&amp;quot;editor&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{view Ember.DemarcateEditor valueBinding=&amp;quot;editorHTML&amp;quot; markdownBinding=&amp;quot;markdown&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div class=&amp;quot;output-wrapper&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div class=&amp;quot;markdown&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{breaklines markdown}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;div class=&amp;quot;html&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            {{breaklines editorHTML}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This just includes the &lt;code&gt;Ember.DemarcateEditor&lt;&#x2F;code&gt; view in the template (which is
defined in a separate file) and then outputs the HTML and markdown in the view
for comparison. Of course some CSS is required so it doesn’t look too horrible.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; that for the view I’ve included markdownBinding=“markdown”. This is
because the value of the contenteditable is it’s HTML, so a separate binding
is used for the markdown output.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;building-an-ember-component&quot;&gt;Building an Ember.Component&lt;&#x2F;h2&gt;
&lt;p&gt;If you listen to the Ember experts talk - for instance &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=zC7o1YkmkG0&quot;&gt;this video on
Components&lt;&#x2F;a&gt; - then Ember’s
Components are the future. Basically they are reusable bits of interface which
provide a simple interface for binding data and responding to events. We can
convert our DemarcateEditor view into an Ember.Component quite easily.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, we need to add a template to our &lt;code&gt;index.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;x-handlebars&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;components&#x2F;demarcate-editor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{editorHTML}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fairly trivial bit of code simply creates a template (note the
&lt;code&gt;components&#x2F;&lt;&#x2F;code&gt; in front of the ID, which tells Ember its a component template)
and outputs the &lt;code&gt;editorHTML&lt;&#x2F;code&gt; variable using a Handlebars tag. Next we need to
update our &lt;code&gt;application&lt;&#x2F;code&gt; template so that it imports the Component rather than
the View. This turns out to be quite simple as well.&lt;&#x2F;p&gt;
&lt;p&gt;Replace the line&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;view Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DemarcateEditor valueBinding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;editorHTML&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markdownBinding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with the line&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;demarcate&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;editor value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;editorHTML markdown&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ember recognises that the &lt;code&gt;{{demarcate-editor ...}}&lt;&#x2F;code&gt; tag is a reference to a
&lt;code&gt;DemarcateEditorComponent&lt;&#x2F;code&gt; object. It also realises that we want a template with
ID &lt;code&gt;components&#x2F;demarcate-editor&lt;&#x2F;code&gt; to render the component. The &lt;code&gt;value&lt;&#x2F;code&gt; and
&lt;code&gt;markdown&lt;&#x2F;code&gt; attributes are bindings to variables on the controller scope, even
though we don’t have the &lt;code&gt;Binding&lt;&#x2F;code&gt; keyword which the view requires. In this
case, our Application controller has properties &lt;code&gt;editorHTML&lt;&#x2F;code&gt; and &lt;code&gt;markdown&lt;&#x2F;code&gt;, and
the Component will reference these properties.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; As the properties passed to the component are bound, when the
Component changes the properties then these changes will propogate to any
reference within the template, and also back up in to the controller itself.
Similarly, if another component or the controller changes the property, then
the changes will automatically propogate into the component.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We also need to do is to provide the code behind the component. In this case,
its a simple matter of renaming our view to a component.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ember&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DemarcateEditor &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Em&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;View&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({ ... });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;becomes&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DemarcateEditorComponent &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Em&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extend&lt;&#x2F;span&gt;&lt;span&gt;({ ... });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The naming is important - the words must be capitalised, and the last word must
be &lt;code&gt;Component&lt;&#x2F;code&gt;. When searching for the correct class to use, Ember removes the
word &lt;code&gt;Component&lt;&#x2F;code&gt;, replaces each word with its lowercase equivalent and separates
them with dashes. In this instance, &lt;code&gt;DemarcateEditorComponent&lt;&#x2F;code&gt; becomes
&lt;code&gt;demarcate-editor&lt;&#x2F;code&gt; which we used in our template above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;component-vs-view&quot;&gt;Component vs View&lt;&#x2F;h2&gt;
&lt;p&gt;There was little difference between the implementation of an &lt;code&gt;Ember.Component&lt;&#x2F;code&gt;
and an &lt;code&gt;Ember.View&lt;&#x2F;code&gt; and the functionality itself was identical. Both provide a
way to encapsulate particular behaviours in a reusable front-end class. They
make your templates neater and more concise. In addition, the restricted
interface provided by Components makes them easy and predictable to use. Ember’s
Components try to predict the way that the HTML specification will evolve in the
coming years so are a good tool for new applications.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, building an Ember &#x2F; demarcate editor proved to be a piece of cake!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Diptrace Hierarchical Schematics</title>
        <published>2012-03-11T00:00:00+00:00</published>
        <updated>2012-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/diptrace-hierarchical-schematics/"/>
        <id>https://willhart.io/post/diptrace-hierarchical-schematics/</id>
        
        <content type="html" xml:base="https://willhart.io/post/diptrace-hierarchical-schematics/">&lt;p&gt;A neat feature of Diptrace is the ability to include “sub-assemblies” as a hierarchy in your schematics. This Diptrace Tutorial runs through creating a hierarchy block and using it in your schematic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=j9pNDn5G7yE&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;diptrace-hierarchical-schematics&#x2F;diptrace_hierarchies_youtubelink.png&quot; alt=&quot;Youtube video link&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PIC16F628A TMR0 Interrupts</title>
        <published>2012-01-15T00:00:00+00:00</published>
        <updated>2012-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/pic16f628a-tmr0-interrupts/"/>
        <id>https://willhart.io/post/pic16f628a-tmr0-interrupts/</id>
        
        <content type="html" xml:base="https://willhart.io/post/pic16f628a-tmr0-interrupts/">&lt;p&gt;PIC TMR0 Interrupts, (or any PIC interrupts!) can be very confusing to setup,
but the rewards are well worthwhile! They allow you to have something happen
after a certain period of time, or for some interrupt types, something happens
when a button is pushed or a sensor reads a certain value. This means that the
microcontroller can automatically respond to user input. This article shows how
to set up a PIC16F628 TMR0 Interrupt, using MikroC.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-on-earth-are-interrupts&quot;&gt;What on earth are interrupts?&lt;&#x2F;h2&gt;
&lt;p&gt;An interrupt is basically what it sounds like. It is a piece of code that
interrupts the main program and is executed when asked. Once the interrupt code
is executed, the normal program flow resumes. PIC Interrupts can be based on
PORT values (e.g. if PORTB is high) or on a “timer overflow”.&lt;&#x2F;p&gt;
&lt;p&gt;On the PIC16F628A (and most PICs), a register is set aside to act as a counter.
This basically counts upwards as the microcontroller clock “ticks”. Counters are
commonly “8 bits”, meaning they can count from 0 to 255. When the counter tries
to go past 255, it “overflows” and goes back to 0. If the correct settings are
made in the registers, this triggers the PIC TMR0 Interrupt code to run.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-would-i-use-interrupts&quot;&gt;Why would I use interrupts?&lt;&#x2F;h2&gt;
&lt;p&gt;One way to get the same functionality as an interrupt is to put in some sort of
check in your main loop. Say you want to execute some code when a button is
pressed, in your program loop you could have something similar to the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(BUTTON == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;     execute your &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;interrupt code&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code looks fairly simple, but what if you have five buttons, or want
something to be checked on a regular basis (say every second). Or what if your
main loop has some extremely intensive calculations going on which means that
your test of whether the button is pushed or not may only happen every 20
seconds or so? Not a very good user experience!&lt;&#x2F;p&gt;
&lt;p&gt;An interrupt basically allows you to offload this functionality from the program
loop and let the micro hardware work out when the button is pushed or a second
has elapsed. This article focuses on PIC TMR0 interrupts, so if you are
interested in the PORT interrupts, then have a look at the datasheet!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;p&gt;I have broken out the interrupt configuration separately in the code below and
the comments should be fairly self explanatory. Basically we tell the micro what
source to use for its timer interrupts, “scale” the timer and then turn on
interrupts.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;OPTION_REG.T0CS&lt;&#x2F;code&gt; bit sets our source for the &lt;code&gt;TIMER0&lt;&#x2F;code&gt; clock. In this case I
am using the PIC16F628A internal clock and hence I clear (set to 0) this bit.&lt;&#x2F;p&gt;
&lt;p&gt;Recall that most TMR0 registers are 8-bit and can only count up to 255. We can
count the number of overflows in our interrupt code to get a certain time
period, or if we are really clever us the inbuilt prescaler to only call the
interrupt after a certain number of loops. If we set the prescaler to 1:64, like
we have below this means that we are only calling the interrupt every 64 times
that the TMR0 register overflows. The last 3 bits of &lt;code&gt;OPTION_REG&lt;&#x2F;code&gt; on the 628A
control the prescalar, and &lt;code&gt;OPTION_REG.PSA&lt;&#x2F;code&gt; sets what the prescaler is applied
to. We clear &lt;code&gt;OPTION_REG.PSA&lt;&#x2F;code&gt; to turn the prescaler on for TMR0 and set the last
three bits to 1 to set a 1:64 ratio. This can be done in one line with the
following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;OPTION_REG |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we set &lt;code&gt;INTCON.GIE&lt;&#x2F;code&gt; and &lt;code&gt;INTCON.T0IE&lt;&#x2F;code&gt; to enable interrupts globally, and
&lt;code&gt;TMR0&lt;&#x2F;code&gt; in particular.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup_interrupts&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clear the TMR0 register
&lt;&#x2F;span&gt;&lt;span&gt;    TMR0 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set up interrupt registers
&lt;&#x2F;span&gt;&lt;span&gt;    OPTION_REG.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T0CS &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clock source is internal instruction clock
&lt;&#x2F;span&gt;&lt;span&gt;    OPTION_REG.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PSA &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; prescaler assigned to TMR0
&lt;&#x2F;span&gt;&lt;span&gt;    OPTION_REG |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the prescaler to 1:64 scale using an or
&lt;&#x2F;span&gt;&lt;span&gt;    INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GIE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable global interrupts
&lt;&#x2F;span&gt;&lt;span&gt;    INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T0IE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable TMR0 interrupt
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main loop is pretty basic - it sets some standard PIC16F628A configurations,
calls the &lt;code&gt;setup_interrupts()&lt;&#x2F;code&gt; function declared above and then loops forever.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some standard PIC16F628A configuration
&lt;&#x2F;span&gt;&lt;span&gt;     TRISA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span&gt;     TRISB = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; input
&lt;&#x2F;span&gt;&lt;span&gt;     PORTA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set PORTA to off
&lt;&#x2F;span&gt;&lt;span&gt;     CMCON = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; turn off comparators
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; setup interrupts
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setup_interrupts&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; loop forever and ever and ever and ...
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we turn the interrupts on, we also need to define an interrupt function. This
is saved at the “interrupt vector” which is basically the location in memory
where the micro goes when an interrupt is called. This is done with the line
void &lt;code&gt;ISR() iv 0x0004&lt;&#x2F;code&gt; below. This declares an interrupt service routine (ISR)
that is located at interrupt vector &lt;code&gt;0x0004&lt;&#x2F;code&gt; in memory. From there its a
standard function!&lt;&#x2F;p&gt;
&lt;p&gt;Note that its considered poor practice to call functions from within your
interrupt, and if you do want a specific function called its best to set a flag
in your interrupt function and process this somewhere in your main loop. The
interrupt function below basically flips PORTA. This can be used to blink an
LED, sound a buzzer or whatever… Once your interrupt routine has run you need
to restart the timer interrupts. This can be done by clearing &lt;code&gt;INTCON.TMR0IF&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the interrupt vector
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ISR&lt;&#x2F;span&gt;&lt;span&gt;() iv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x0004
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TMR0IF &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;amp;&amp;amp;amp; INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T0IE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        PORTA = ~PORTA;
&lt;&#x2F;span&gt;&lt;span&gt;        INTCON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TMR0IF &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unset the interrupt flag for TMR0
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-note-on-clocks&quot;&gt;A note on “clocks”&lt;&#x2F;h2&gt;
&lt;p&gt;One of the things I found most confusing when learning about PIC timers was the
concept of clocks, oscillators, resonators, etc. Why did some micros need an
external crystal oscillator, whilst others didn’t? What was the benefit of
having an external crystal, and what was the difference between a clock and a
crystal?&lt;&#x2F;p&gt;
&lt;p&gt;To cut to the chase, most micros will need some sort of external timing source
to function at all, and those that have this timing source built in are
frequently not very accurate. The best way to find out whether a timing source
is needed is to read the data sheet, but as an example the PIC16F628A has an
internal crystal but the PIC16F877A does not.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PIC16F628A Serial Communication</title>
        <published>2012-01-14T00:00:00+00:00</published>
        <updated>2012-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/pic16f628a-serial-communication/"/>
        <id>https://willhart.io/post/pic16f628a-serial-communication/</id>
        
        <content type="html" xml:base="https://willhart.io/post/pic16f628a-serial-communication/">&lt;p&gt;Serial communication is used extensively in electronics projects, and many
microcontrollers come with some form of USART on board. I’m going to describe
here how I got PIC USART serial communication working with a PIC16F628A, and got
the PIC talking to an Arduino Uno. For this I’m using a PICKIT2, my own
PIC16F628A breakout board and MicroC compiler because it has a handy serial
library all built in. If you are using MPLAB or some other development tool, you
can find the locations of the relevant registers in the datasheets for &lt;code&gt;TXSTA&lt;&#x2F;code&gt; and
&lt;code&gt;RCSTA&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;p&gt;The code itself is very simple - most of the setup is done using two registers -
&lt;code&gt;TXSTA&lt;&#x2F;code&gt; and &lt;code&gt;RCSTA&lt;&#x2F;code&gt;. There are three main steps in setting up serial transmission on
the PIC16F628A:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Enable serial communication&lt;&#x2F;li&gt;
&lt;li&gt;Set up the communication mode&lt;&#x2F;li&gt;
&lt;li&gt;Set the baud rate&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The best source of information is (of course) the datasheet, however… to
enable serial communication we set (i.e. make equal to 1) &lt;code&gt;TXSTA.TXEN&lt;&#x2F;code&gt; and
&lt;code&gt;RCSTA.SPEN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We then set to 8 bit mode (there is quite a bit of information in the datasheet
about 9 bit mode, but for this simple example probably not relevant) by clearing
&lt;code&gt;TXSTA.TX9&lt;&#x2F;code&gt; and &lt;code&gt;RCSTA.RX9&lt;&#x2F;code&gt; (i.e. making equal to 0). The 16F628A can run in
either synchronous or asynchronous serial modes, but here we set asynchronous by
clearing &lt;code&gt;TXSTA.SYNC&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some standard PIC16F628A configuration
&lt;&#x2F;span&gt;&lt;span&gt;     TRISA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span&gt;     TRISB = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; input
&lt;&#x2F;span&gt;&lt;span&gt;     PORTA = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set PORTA to off
&lt;&#x2F;span&gt;&lt;span&gt;     CMCON = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; turn off comparators by setting the last three bits to 111
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Step 1, enable USART
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TXEN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; transmission enabled
&lt;&#x2F;span&gt;&lt;span&gt;     RCSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SPEN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable serial port
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Step 2, Set 8 bit, asynchronous continuous mode
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TX9 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 8 bit transmission
&lt;&#x2F;span&gt;&lt;span&gt;     RCSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RX9 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 8 bit reception
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYNC &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; asynchronous mode
&lt;&#x2F;span&gt;&lt;span&gt;     RCSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CREN &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enable continuous receive mode
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Step 3, Set the baud rate using the built in baud rate generator
&lt;&#x2F;span&gt;&lt;span&gt;     TXSTA.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BRGH &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set baud rate generator high
&lt;&#x2F;span&gt;&lt;span&gt;     SPBRG = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;b00011001&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the baud rate to 9600kb, Asynchronous mode BTGH=1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initialise the library and wait for it to start
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UART1_Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ok, now some dummy code... (loop forever and ever and ever and ...)
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; just send some information every second
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;     {
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UART1_Write_Text&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sending some text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wait one second
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then built a very basic Arduino sketch, from memory (and untested) something
along the lines of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;         Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-happens&quot;&gt;What happens?&lt;&#x2F;h2&gt;
&lt;p&gt;Wire up the RX and TX ports from the PIC16F628A to the TX and RX ports of the
Arduino. Compile the sketch, program the PIC and then open up the Arduino serial
monitor. Every second or so you should see a message appear on the serial
monitor… &lt;code&gt;Sending some text&lt;&#x2F;code&gt;. There you go - your first serial communication!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using software PWM on Arduino</title>
        <published>2012-01-14T00:00:00+00:00</published>
        <updated>2012-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/software-pwm-on-an-arduino/"/>
        <id>https://willhart.io/post/software-pwm-on-an-arduino/</id>
        
        <content type="html" xml:base="https://willhart.io/post/software-pwm-on-an-arduino/">&lt;p&gt;The Arduino Uno has six PWM ports, but not every micro-controller has this many.
In this tutorial I will show you how to implement software PWM. By using a
potentiometer to input a desired level we can then control the brightness of an
LED on another pin.&lt;&#x2F;p&gt;
&lt;p&gt;First of all I’m going to assume you know what PWM is. If you don’t, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pulse-width_modulation&quot;&gt;Wikipedia
is your friend&lt;&#x2F;a&gt;. Basically
PWM uses a digital port to approximate an analog port. It does this by setting a
percentage of a set cycle to HIGH, and the rest to LOW. When this repeats really
fast (say 10,000 times a second) the voltage averages out to somewhere in
between HIGH and LOW. You can set the voltage by determining how much of the
cycle is HIGH and how much is LOW (the duty cycle). Ok, carry on!&lt;&#x2F;p&gt;
&lt;p&gt;The circuit setup is pretty basic. Simply set up a potentiometer between +5v and
GND, and connect the wiper (the middle pin) to an analog input - in this case
analog pin 1 on the Arduino. An LED is then connected to a digital output pin
(digital pin 8), and you can see on the schematic that it is placed after two
Resistance - Capacitor (RC) filters. If you would like to know more about RC
filters, then I recommend you look at EEVBlog
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.eevblog.com&#x2F;2011&#x2F;12&#x2F;07&#x2F;eevblog-225-lab-power-supply-design-part-4-pwm-control&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.eevblog.com&#x2F;2011&#x2F;12&#x2F;07&#x2F;eevblog-225-lab-power-supply-design-part-4-pwm-control&#x2F;&lt;&#x2F;a&gt; - the post that inspired this tutorial! Dave gives quite a bit of information on
RC filters on this post and shows how to use LTSpice to simulate. I highly
recommend you have a look at this video!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;software-pwm-on-an-arduino&#x2F;softwarepwm_schematic-1024x695.png&quot; alt=&quot;Software PWM schematic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may think that my capacitor&#x2F;resistor values area bit strange in the
schematic, well thats because I just grabbed what was at the top of my bits box!
If you were doing this in “production” you would take a lot more care selecting
your values - again, have a look at Dave’s post for more information. You can
see the circuit setup in Fritzing below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;software-pwm-on-an-arduino&#x2F;softwarepwm-circuit_bb-845x1024.png&quot; alt=&quot;SoftwarePWM circuit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And then the following code was used:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* POT controlled software PWM                                *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                                            *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Code written by William Hart, 2011                         *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* http:&#x2F;&#x2F;www.williamhart.info                                *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                                            *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* This is a very simple circuit which uses a potentiometer   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* to set an analog input and then uses this input to drive a *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* PWM signal using a standard (non-PWM) port on the Arduino. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Serial.println(microsecondsToClockCycles(1)); &#x2F;&#x2F; gives a result of 16 clock cycles per microsecond
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; define pins
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;ADJ_PIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Adjustment pin is analog 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PWM_PIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PWM output pin is digital 8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; setup PWM values
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;PWM_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;300 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; PWM Hz, must be greater than 60Hz to avoid delayMicroseconds issues
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;MAX_V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5.00 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the maximum voltage we can output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; cycle_length;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; v_out;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; duty_cycle;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; on_time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; off_time;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; start up serial for debugging
&lt;&#x2F;span&gt;&lt;span&gt;  Serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set pin states
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(ADJ_PIN, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, OUTPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; calculate the cycle length
&lt;&#x2F;span&gt;&lt;span&gt;  cycle_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;PWM_FREQ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the length of a single cycle of the PWM signal
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read in the potentiometer value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; val = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;analogRead&lt;&#x2F;span&gt;&lt;span&gt;(ADJ_PIN);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; map the pot value to the PWM value - 0-5V, to two decimal places
&lt;&#x2F;span&gt;&lt;span&gt;  v_out = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(val, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  duty_cycle = (v_out&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; MAX_V; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; work out what percentage of the PWM cycle we should set high
&lt;&#x2F;span&gt;&lt;span&gt;  on_time = duty_cycle * cycle_length;
&lt;&#x2F;span&gt;&lt;span&gt;  off_time = cycle_length - on_time;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now set high, then delay for the duty_cycle percentage * cycle_length
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(on_time &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, HIGH);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delayMicroseconds&lt;&#x2F;span&gt;&lt;span&gt;(on_time);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(PWM_PIN, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delayMicroseconds&lt;&#x2F;span&gt;&lt;span&gt;(off_time);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Phew, what a lump of code! Once you break it down though, its quite simple. The
basic principle is this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Setup : Work out how long our cycle is&lt;&#x2F;li&gt;
&lt;li&gt;Loop:
&lt;ol&gt;
&lt;li&gt;Read the potentiometer value and determine the output voltage we would like&lt;&#x2F;li&gt;
&lt;li&gt;Set the digital port high for the correct portion of the cycle&lt;&#x2F;li&gt;
&lt;li&gt;Set the digital port LOW for the remainder of the cycle&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I use the &lt;code&gt;delayMicroseconds()&lt;&#x2F;code&gt; function from Arduino to time the PWM cycle,
however this has the limitation of being able to delay for a maximum of around
16,000 microseconds. This means that we can’t set value below 61Hz for our PWM
frequency. This could be remedied by a more intelligent use of &lt;code&gt;delay()&lt;&#x2F;code&gt;,
however I leave this as an exercise for you!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Charlieplexing LEDs with Arduino</title>
        <published>2011-12-13T00:00:00+00:00</published>
        <updated>2011-12-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/charlieplexing-leds-with-arduino/"/>
        <id>https://willhart.io/post/charlieplexing-leds-with-arduino/</id>
        
        <content type="html" xml:base="https://willhart.io/post/charlieplexing-leds-with-arduino/">&lt;p&gt;You can never have enough pins on your micro-controller, right? Plug in an LCD
display, a couple of status LEDs and a few sensors and you are already up to
more pins than most entry level micros. Sure, you can plug in a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shift_register&quot;&gt;shift
register&lt;&#x2F;a&gt; like the 8-bit
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ti.com&#x2F;lit&#x2F;ds&#x2F;symlink&#x2F;sn74hc595.pdf&quot;&gt;74HC595&lt;&#x2F;a&gt;, but is that the only
way?&lt;&#x2F;p&gt;
&lt;p&gt;One less common way is to use a technique called
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Charlieplex&quot;&gt;Charlieplexing&lt;&#x2F;a&gt;. You can Charlieplex
a bunch of LEDs from a few Arduino ports, and save those precious ports for
something exciting! In the following tutorial, I’m going to show you how to use
an Arduino and this charlieplexing technique to use 3 output pins to control 6
LEDs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-charlieplexing&quot;&gt;What is Charlieplexing?&lt;&#x2F;h2&gt;
&lt;p&gt;If you have a quick scan of the charlieplex Wiki entry, you can see that this
technique allows you to drive $n^2 - n$ LEDs using only n Arduino pins. What
does that mean? Well in our case we have 3 pins, which will allow us to drive
$3^2 - 3 = 6$ LEDs. This simple technique basically uses the properties of LEDs
being diodes, and therefore only allowing current (within limits of course) to
pass in one direction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-do-i-charlieplex&quot;&gt;How do I Charlieplex?&lt;&#x2F;h2&gt;
&lt;p&gt;A simple LED charlieplex circuit can be setup using my Arduino Uno like the
circuit diagram below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;charlieplexing-leds-with-arduino&#x2F;charlieplex_schematic.png&quot; alt=&quot;Charlieplex Eagle Schematic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plugging into my breadboard gives the following physical circuit - its a bit
messy but take your time and you should see the pattern!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;charlieplexing-leds-with-arduino&#x2F;charlieplex_breadboard.png&quot; alt=&quot;Fritzing Circuit, Charlieplex LEDs on an Arduino&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Basically, the circuit involves setting up three Arduino pins. For each pair of
pins we put two LEDs between them, with on LED being placed in each direction.
(Remember LEDs have an anode and a cathode, usually the longer leg being the +
leg or the anode). The clever bit about the charlieplex technique is recognising
that we can set pins (on the Arduino as well) to one of three states:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;HIGH - usually +5v&lt;&#x2F;li&gt;
&lt;li&gt;LOW - usually 0v&lt;&#x2F;li&gt;
&lt;li&gt;High Impedence - disconnected&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Lets use an example. Have a look at the circuit diagram above. First we set the
Arduino pin 5 to HIGH, pin 6 to High Impedance and pin 7 to LOW (more on how we
do this later). Now, lets follow the current through from pin 5 (note we are
talking about conventional current, not electron flow). We can see that there
are four LEDs connected to this pin - the first two linked to pin 6 and the last
two linked to pin 7. We can ignore two of these LEDs as they are the “wrong way
around” and blocking current flow.&lt;&#x2F;p&gt;
&lt;p&gt;Now recall that we set pin 6 to this high impedance state, which means it is in
effect disconnected. As pin 7 is set to low, we can see that current will flow
along from pin 5, then through the LED connected between pin 5 and pin 7. (This
is the 5th LED along). In this same fashion we can then set one of each of the
three pins to high, low and high impedance to control which LED is switched on.&lt;&#x2F;p&gt;
&lt;p&gt;I have provided some sample Arduino code below to show this in action. Note that
the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.arduino.cc&#x2F;en&#x2F;Reference&#x2F;Constants&quot;&gt;Arduino reference&lt;&#x2F;a&gt; says&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Arduino (Atmega) pins configured as &lt;code&gt;INPUT&lt;&#x2F;code&gt; with &lt;code&gt;pinMode()&lt;&#x2F;code&gt; are said to be in
a high-impedance state.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This means we can just set a pin to input mode using &lt;code&gt;pinMode(pin_number, INPUT);&lt;&#x2F;code&gt; and it will count as disconnected.&lt;&#x2F;p&gt;
&lt;p&gt;I used a form of Charlieplexing on my PIC Countdown Timer to light up three sets
of two LEDs using only four pins. You can see the schematic and some photos
through the link.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Charlieplexing 6 LEDs with 3 Pins  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Code written by William Hart, 2011 *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* http:&#x2F;&#x2F;www.williamhart.info        *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*                                    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Uses 3 pins to power a network of  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 6 LEDs using the charlieplexing    *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* technique.                         *&#x2F; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**************************************&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;LED_A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;LED_B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;LED_C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; first set all pins to input, or high impedance
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (not strictly necessary as all pins are inputs by default)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; run through a sample loop, lighting each LED
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in turn and holding for half a second.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, LED_B);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, LED_A);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, LED_A); 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, LED_C);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, LED_C);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, LED_B);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delay&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_pins&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;high_pin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;low_pin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reset all the pins
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reset_pins&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set the high and low pins to output
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(high_pin, OUTPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(low_pin, OUTPUT);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set high pin to logic high, low to logic low
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(high_pin, HIGH);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(low_pin,LOW);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reset_pins&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; start by ensuring all pins are at input and low
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, INPUT); 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinMode&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, INPUT);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(LED_A, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(LED_B, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digitalWrite&lt;&#x2F;span&gt;&lt;span&gt;(LED_C, LOW);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
