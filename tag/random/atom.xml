<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>William Hart | willhart.io - random</title>
    <subtitle>My little internet home page, full of uninteresting musings and thinking out louds.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://willhart.io/tag/random/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://willhart.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-05-30T00:00:00+00:00</updated>
    <id>https://willhart.io/tag/random/atom.xml</id>
    <entry xml:lang="en">
        <title>Building a basketball video analysis software tool</title>
        <published>2024-05-30T00:00:00+00:00</published>
        <updated>2024-05-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/basketball-analysis-software/"/>
        <id>https://willhart.io/post/basketball-analysis-software/</id>
        
        <content type="html" xml:base="https://willhart.io/post/basketball-analysis-software/">&lt;blockquote&gt;
&lt;p&gt;This is a super long article discussing a tool that has been on my mind for at
least eight years. I’m probably the only one interested in these details, but
it is satisfying for me to document this project as I’m unlikely to release
the source code and it seems my work on the project is coming to an end.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In fiction writing, there is a saying - “show don’t tell”. I think this is also
a great phrase to apply as a youth sports coach. I’ve been coaching junior
basketball for about 25 years now at various levels. Over that time I’ve
noticed a big increase in the level of professionalism and the technical
expertise of coaches.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, twenty years ago video analysis was very rare, but these days
analysing game film with the team can be done routinely, even at the youngest
levels of representative basketball. All our games are now filmed and available
on Youtube or other services. Video analysis is a fantastic tool as a coach to
both highlight areas for improvement and show where players are doing things
well. Often a message only really sinks in for players when they see the
examples (both positive and negative) in game film.&lt;&#x2F;p&gt;
&lt;p&gt;I previously posted about my &lt;a href=&quot;&#x2F;post&#x2F;first-impressions-converting-a-firebase-project-to-graphql&quot;&gt;basketball diagram
software&lt;&#x2F;a&gt;
which I used to write training plans, do scouting reports and diagram plays. In
addition to this tool, I’ve also spent over eight years slowly building a tool
for video analysis, similar to tools from hudl or Catapult. I’m going to
describe a little bit about this tool and how I built it in this post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defining-the-product&quot;&gt;Defining the “product”&lt;&#x2F;h2&gt;
&lt;p&gt;I’m a volunteer coach with my own job and family, and so in addition to having
limited training time, I also want to spend as little time as possible preparing
for video analysis (Yes, I’m aware that I probably spent hundreds of hours
building a software tool to save me minutes of effort).&lt;&#x2F;p&gt;
&lt;p&gt;So about eight years ago I began to develop a software tool that would:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;let me watch a game film (preferably at 1.5x speed),&lt;&#x2F;li&gt;
&lt;li&gt;“tag up” key plays with text, or as specific “events” in the game,&lt;&#x2F;li&gt;
&lt;li&gt;play back the video using the list of tags to jump to key sections,&lt;&#x2F;li&gt;
&lt;li&gt;filter the list of tags so that I can jump to “every time we ran offence X” or
“defence Y”&lt;&#x2F;li&gt;
&lt;li&gt;generate box scores, shot charts, and other stats from the tags.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As the tool evolved I added and removed some other features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Telestrator&quot;&gt;telestrator&lt;&#x2F;a&gt; feature to
playback,&lt;&#x2F;li&gt;
&lt;li&gt;automatically export a filtered set of tags to a “highlights video”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;&#x2F;h2&gt;
&lt;p&gt;I want to highlight up front some of the key challenges I faced while building
this tool, and then discuss later how each implementation attempted to address
them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-the-tagging-problem&quot;&gt;1. The tagging problem&lt;&#x2F;h3&gt;
&lt;p&gt;Strangely enough, one of the trickiest pieces of the project was how to create
the video tags. From the start I wanted to be able to gather more data than just
a plain text “bookmark”. This requires being able to provide a UI that can
select from different basketball actions, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;typical basketball stats like pass, shot, turnover, rebound, etc,&lt;&#x2F;li&gt;
&lt;li&gt;plain text tags at a specific time (“x happened at this time”),&lt;&#x2F;li&gt;
&lt;li&gt;plain text tags across a time span (“y happened at this time, for A seconds”),&lt;&#x2F;li&gt;
&lt;li&gt;add “meta” tags like lineup changes, clock times, clock start&#x2F;stop, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It turns out that each of these potential tags requires different metadata to be
associated with it, for instance a shot may require:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the player that took the shot,&lt;&#x2F;li&gt;
&lt;li&gt;where the shot was taken from (and maybe whether it was a free throw, 2pt or
3pt shot),&lt;&#x2F;li&gt;
&lt;li&gt;whether the shot missed or was made,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;while a metadata tag like a “lineup change” may require a list of players that
went on and a list of players that went off.&lt;&#x2F;p&gt;
&lt;p&gt;This is a complex data modelling problem for strongly typed languages, but it is
even more complex as a UI problem, because different controls need to be
displayed depending on both &lt;em&gt;what&lt;&#x2F;em&gt; tag is being created and &lt;em&gt;which&lt;&#x2F;em&gt; details are
being provided. For most UI frameworks this results in a lot of spaghetti code.&lt;&#x2F;p&gt;
&lt;p&gt;I also wanted to be able to annotate a full set of tags while watching the video
at 1.5x speed. I’ll revisit this challenge more as the article goes on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-the-video-hosting-problem&quot;&gt;2. The video hosting problem&lt;&#x2F;h3&gt;
&lt;p&gt;From the start I had a challenge around how the videos would be made available
to the app and when I was showing them to the players in the video analysis
session. Back when I started mobile data was poor (in Australia) and our
internet speeds didn’t really allow large videos to be uploaded and streamed
reliably. Local files initially seemed like a better option, but that made it
harder to share with other coaches.&lt;&#x2F;p&gt;
&lt;p&gt;Later, once internet speeds improved it became a question of where to host -
either my own cloud media server (expensive and with complex access controls -
these are videos of kids after all) or through an existing hosting site like
youtube. In the end most game film these days ends up on youtube so that became
the logical choice for hosting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-attempt-net-wpf&quot;&gt;First attempt - .NET WPF&lt;&#x2F;h2&gt;
&lt;p&gt;My first attempt was made about eight years ago using a WPF app in C#.
Unfortunately I seem to have lost the source code and all screenshots, but this
was a pretty good first attempt that had tagging and playback of local video
files, showed the tags on the playback progress bar and had a telestrator
functionality.&lt;&#x2F;p&gt;
&lt;p&gt;There were two issues with this implementation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;it was offline only, so it was a bit tricky to share with others,&lt;&#x2F;li&gt;
&lt;li&gt;the tagging interface was very clunky - because of the complexity of the tags
required, it was very difficult in C# to add new tags or to show a custom UI
flow for tagging particular things and adding the relevant metadata. In other
words, the tagging pattern required very stateful UI, which was a bit clumsy
to do in WPF.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To get around the tagging issues I had  brief foray with trying to write the
code in typescript &#x2F; React as a part of the play diagramming tool, but the UI
flow still didn’t sit well and I quickly abandoned the approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;second-attempt-rust-tui&quot;&gt;Second attempt - rust TUI&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;typestate-to-the-rescue&quot;&gt;Typestate to the rescue&lt;&#x2F;h3&gt;
&lt;p&gt;About this time I encountered a language called &lt;code&gt;rust&lt;&#x2F;code&gt;, which you may have heard
of. I pretty quickly fell in love with it (and now use it relatively often in my
day job!). I was playing around with rust for a bunch of tools, but it didn’t
occur to me to try building the video analysis tool in rust until I found the
article by Cliffle on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cliffle.com&#x2F;blog&#x2F;rust-typestate&#x2F;&quot;&gt;type states in
rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;TLDR: the type state approach is sort of like a state machine baked into the
types. In other words, it uses the type system at compile time to ensure only
valid state transitions are available to be called.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As I was reading the article it dawned on me that this was a great model for
tagging videos. The core of the complex user flow could be reduced to a fairly
readable rust enum:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;typestate_implementation_of_tagging.png&quot; alt=&quot;A screenshot of a rust enum showing the typestate pattern used for tagging&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here the variants of the enum are the different states our tagging UI can be in,
for instance setting whether a shot was made or missed, selecting a player, or
selecting a shot location. The &lt;code&gt;VideoTagFactory&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; could then be used to ensure
that &lt;em&gt;only&lt;&#x2F;em&gt; the relevant transitions are available from each “UI state”. It took
a bit of noodling but in short order I’d written up the tagging logic and a rust
“terminal user interface” (TUI) to provide the UI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;syncing-to-video&quot;&gt;Syncing to video&lt;&#x2F;h3&gt;
&lt;p&gt;To manage the video, I worked with local files and used &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.videolan.org&#x2F;VLC_HTTP_requests&#x2F;&quot;&gt;VLC HTTP
requests&lt;&#x2F;a&gt; to control the player.
Overall it was a pretty reliable system, although sometimes VLC would have some
issues buffering when playing youtube videos. I set it up so that I could use
&lt;code&gt;youtube-dl&lt;&#x2F;code&gt; to download videos locally, and configure my tool to accept both a
youtube and local video path, preferring local where available.&lt;&#x2F;p&gt;
&lt;p&gt;This approach &lt;em&gt;immediately&lt;&#x2F;em&gt; felt better. The code was cleaner, the UI just
naturally flowed from the state of the tag, and it was easy to add new tags. I
added a second simpler factory for “text-based” tags, and implemented all the
logic around live box scores. The result looked like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;rust_tui.png&quot; alt=&quot;The rust TUI&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tagging was via keyboard inputs, for instance to add a new shot, I would press
&lt;code&gt;&amp;lt;tab&amp;gt; 2 2 1 4553&amp;lt;enter&amp;gt; y &amp;lt;enter&amp;gt;&lt;&#x2F;code&gt;. Decoding this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;tab&amp;gt;&lt;&#x2F;code&gt; to start a tag&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&lt;&#x2F;code&gt; to select a two-point shot tag&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&lt;&#x2F;code&gt; to select player number 2 in the list as the shooter,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;1&lt;&#x2F;code&gt; to select player number 1 in the list as having assisted the shooter,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;4553&amp;lt;enter&amp;gt;&lt;&#x2F;code&gt; to use a “keypad” system to select where on the court the shot was taken,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;y&lt;&#x2F;code&gt; to say the shot was made.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While this looks a bit complicated, after a few minutes of tagging I could
basically tag in real-time (i.e. at 1x playback speed). Tags were saved in a
local file. I also implemented exporting highlights from a list of filtered
plays using &lt;code&gt;ffmpeg&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;challenge-clock-management&quot;&gt;Challenge: Clock management&lt;&#x2F;h3&gt;
&lt;p&gt;An interesting problem came about with mapping video time to game time. For
instance a video may start a few minutes before the game starts, and in our
timing rules the clock stops on every whistle. This means that in order to track
how many minutes players are playing you need to have a separate concept for
“game time” vs “video time”. Tags are in “video time”, while all of the stats
are in “video time”.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is compounded in that all of our scorers are parents, and its fairly
common for them to forget to start or stop the clock at key moments. Depending
on the angle, there isn’t always a scoreboard visible in the video, so its not
always obvious what the game clock is actually showing!&lt;&#x2F;p&gt;
&lt;p&gt;To solve this I introduced the concept of a “clock sync” tag. This was a tag
that was considered a “source of truth” for the current game time, for instance
&lt;code&gt;03:13 remaining in the third quarter&lt;&#x2F;code&gt;. There were also “clock start” and “clock
stop” tags, and “period start” and “period end” tags which were essentially
fancy clock sync tags.&lt;&#x2F;p&gt;
&lt;p&gt;Between these it was possible to produce a basic algorithm which used the
elapsed video time and the clock management tags to determine the game time.
When a clock sync tag was found, the game clock was updated to match, and
elapsed times for things like lineup combinations and player minutes were
reconciled using some business logic.&lt;&#x2F;p&gt;
&lt;p&gt;Overall this wasn’t a complex problem but took a bit of thinking to get right.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;challenge-sharing&quot;&gt;Challenge: Sharing&lt;&#x2F;h3&gt;
&lt;p&gt;One challenge was that this was not easy to share with non-technical people.
Around this time I wanted to step back a little from coaching so I joined
another coach as their assistant. One of my jobs was tagging the video for
analysis with the team, but I couldn’t hand over a terminal program for them to
use. Instead I ended up building a simple &lt;code&gt;tera&lt;&#x2F;code&gt; template generator to output a
standalone HTML file with an embedded youtube player and list of tags.&lt;&#x2F;p&gt;
&lt;p&gt;This was … ugly, but it worked pretty well. Up until Covid hit and we lost
basically two years to the pandemic. Overall I was fairly happy other than it
feeling a bit too “technical” to run, being a bit slapped together with separate
video and TUI windows, and still only letting me tag at about 1x game speed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;third-attempt-rust-axum-and-next-js&quot;&gt;Third attempt - rust (axum) and Next.js&lt;&#x2F;h2&gt;
&lt;p&gt;I took a couple of year hiatus from the project while Covid messed up our
basketball seasons. When things started to return to normal, I began to get more
and more frustrated by the slightly janky TUI and the awkwardness of sharing
game footage.&lt;&#x2F;p&gt;
&lt;p&gt;If I’m honest I also began to wonder at this point whether I had a “genuine
product” on my hands. If I recall at the time hudl cost hundreds of dollars a
month. There seemed to be a gap in the market for a simpler “semi-pro” service
targeted at representative &#x2F; amateur sports where budgets are typically
non-existent. The main problem at this point was around UX pain points, the TUI
worked great for me (and the four or five other people who prefer a TUI over a
GUI) but wasn’t SaaS-ready.&lt;&#x2F;p&gt;
&lt;p&gt;I began to consider turning the tool into a web app, with some of the features a
SaaS requires like user accounts, sharing, granular permissions and so on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tech-stack&quot;&gt;Tech stack&lt;&#x2F;h3&gt;
&lt;p&gt;After a bit of research I settled on a tech stack for round 3.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;postgresql database hosted on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fly.io&quot;&gt;fly.io&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;rust &#x2F; axum backend hosted on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fly.io&quot;&gt;fly.io&lt;&#x2F;a&gt;, which allowed me to
reuse a bunch of the TUI code,&lt;&#x2F;li&gt;
&lt;li&gt;auth via &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;auth0.com&quot;&gt;auth0&lt;&#x2F;a&gt;, so I could outsource user&#x2F;auth code,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then I picked a few “comfort” options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;react front end using next.js,&lt;&#x2F;li&gt;
&lt;li&gt;CI&#x2F;CD via github actions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;building-a-tagging-language&quot;&gt;Building a tagging “language”&lt;&#x2F;h3&gt;
&lt;p&gt;Initially I started reusing a lot of the typestate logic from the TUI. However
at the time I was skimming through &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;app.thestorygraph.com&#x2F;books&#x2F;10606458-5ea8-499a-9940-ed13667d511a&quot;&gt;Basketball on
Paper&lt;&#x2F;a&gt;,
a book about the use of data and statistics in basketball. I remember seeing a
lot of basic statistical errors in the book, however one really interesting
feature of the book was their way of annotating a game using a series of letters
and numbers. I decided to adapt this to my needs.&lt;&#x2F;p&gt;
&lt;p&gt;For instance the following would be used to describe a complete possession:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;01:11 a 19i 9 19 36d 19i 9 4 29x3- 4rt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be broken down as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;01:11&lt;&#x2F;code&gt; this is the “video time” when the possession started&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;a&lt;&#x2F;code&gt; indicates this is a possession for the away team&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;19i&lt;&#x2F;code&gt; indicates player &lt;code&gt;19&lt;&#x2F;code&gt; from the away team inbounded the ball&lt;&#x2F;li&gt;
&lt;li&gt;There were a series of passes between players &lt;code&gt;9 -&amp;gt; 19 -&amp;gt; 36&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When they caught the ball, player &lt;code&gt;36&lt;&#x2F;code&gt; dribbled, and at some point the ball
when out of bounds (probably deflected, but I don’t record that here).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;19i&lt;&#x2F;code&gt; player 19 inbounded the ball again, and a series of passes followed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;29x3-&lt;&#x2F;code&gt; indicates that player 29 took a shot from “region 3” of the court, and
the &lt;code&gt;-&lt;&#x2F;code&gt; indicates it missed. A &lt;code&gt;+&lt;&#x2F;code&gt; would indicate that the shot was made, and
a &lt;code&gt;++&lt;&#x2F;code&gt; would indicate the shot was made and the player who gave them the ball
should be awarded an assist.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;4r&lt;&#x2F;code&gt; player 4 rebounded the ball (we know this is an offensive rebound
because their team has possession)&lt;&#x2F;li&gt;
&lt;li&gt;the final &lt;code&gt;t&lt;&#x2F;code&gt; indicates that player 4 then turned it over.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is a lot of data packed into this single line, and it can be very compact
and detailed, for instance &lt;code&gt;12 99f36x3++.&lt;&#x2F;code&gt; indicates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;#99 took a 2pt shot from “region 3” which is in the key,&lt;&#x2F;li&gt;
&lt;li&gt;They made the shot and #12 was awarded an assist,&lt;&#x2F;li&gt;
&lt;li&gt;#99 was fouled in the act of shooting by #36 from the other team,&lt;&#x2F;li&gt;
&lt;li&gt;#99 missed the resulting free throw&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I can make text tags by typing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@01:11 Good drive and kick (Bob to Fred)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or a text range tag using&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@01:11 +5 A five second range with a text annotation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I implemented a parser using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;nom&quot;&gt;&lt;code&gt;nom&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and the
React GUI had some logic to pre-fill the video time in the tagging text input. A
typical game has 100-150 lines of this format which includes all possessions,
clock management, lineups, annotations and so on.&lt;&#x2F;p&gt;
&lt;p&gt;An excerpt from an actual game looks like this, and can be imported or exported
from the GUI:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;game_metadata.png&quot; alt=&quot;An extract from a game summary written using the custom tagging DSL&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In terms of UX I’d consider this a “pro” interface - its extremely fast to
annotate and quite natural once you learn the key codes, however has a bit of a
learning curve. For a SaaS product it would still need a more traditional “point
and click” GUI interface.&lt;&#x2F;p&gt;
&lt;p&gt;For the users at least the output was human readable, for instance the input
above would be displayed in the UI by a stream of possession logs like this,
along with a running score:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;game_runsheet.png&quot; alt=&quot;A stream of events for a single game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clicking on a timestamp takes you to that time in the video.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stats-and-analysis&quot;&gt;Stats and analysis&lt;&#x2F;h3&gt;
&lt;p&gt;The great thing about all this rich data and the parser was that it suddenly
became possible to “reduce” over these lines and produce detailed stats by
parsing the game sequence into a vector of “actions”, and then running a
“map-reduce” on those to produce a box score. It was also possible to produce a
quarter by quarter breakdown, see an example:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;box_scores.png&quot; alt=&quot;An example box score&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Short charts can also be produced from the same data:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;shot_charts.png&quot; alt=&quot;An example short chart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It was also possible to compute more interesting statistics, such as the
effectiveness of specific lineups:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;lineups.png&quot; alt=&quot;An example of lineup effectiveness stats for a single game&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of lineups in a junior basketball game because for player
development and well-being its important that everybody plays a decent amount of
minutes. I also implemented some possession statistics, which in many cases
matched my “feel” of the tempo and outcome of the game pretty closely:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;basketball-analysis-software&#x2F;possession_stats.png&quot; alt=&quot;Example possession statistics&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A neat feature of rust was how easy it was to go from a single game box score to
an average across a subset of games or even a season. By implementing the
&lt;code&gt;std::ops::Add&lt;&#x2F;code&gt; trait on the Box Score then this could be done with basically no
code changes in the API.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sharing-games&quot;&gt;Sharing games&lt;&#x2F;h3&gt;
&lt;p&gt;As this version of the analysis software was written using a SaaS model, there
was a fairly basic underlying role-based permission system. This meant it was
easy to create a “shared” link that was essentially a read-only version of the
page. These were enforced at the postgres DB level using row-level permissions
and tested with unit tests (I know, unit tests a side project!?).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;&#x2F;h2&gt;
&lt;p&gt;Developing the analysis tool has been a very rewarding long-term project. I
learned quite a lot out of doing it and got a lot of pleasure out of using it to
analyse a bunch of games. Since I started working on these tools almost a decade
ago, my life has changed a lot. I have my own little people who rely on me,
other hobbies demanding my time, and a job which seems to drain most of my
energy. I’m probably going to have to hang up my coaching boots at the end of
this season, at least until (or if) my own little kids decide to play. Its hard
to keep plugging away at something that I’ll probably no longer have a use for.&lt;&#x2F;p&gt;
&lt;p&gt;There were some features or ideas that I wanted to return to, and who knows -
maybe one day if my kids are playing and I lace up the coaching clipboard again,
I’ll return to these to “save some time”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-proper-tagging-interface&quot;&gt;A proper tagging interface&lt;&#x2F;h3&gt;
&lt;p&gt;The “text-based” tagging interface in the latest iteration of the analysis
software works for me, but if I ever want other people to use it I’d have to
create a proper GUI for tagging. I think a React interface would have the same
limitations as the original C# one in handling the branching tagging interface.
I’d be curious to try something that uses the existing rust typestate backend
for tagging (developed for the TUI) and delivers HTMX to the front end to show
the correct GUI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integration-with-diagramming-software&quot;&gt;Integration with diagramming software&lt;&#x2F;h3&gt;
&lt;p&gt;I also have some really capable play diagramming software, which at the moment
is a separate tool. I think it would be really interesting to merge the two
tools, and in particular I’d love to be able to draw up diagrams right from
within the video analysis software, either as a teaching or a scouting tool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;machine-learning&quot;&gt;Machine learning&lt;&#x2F;h3&gt;
&lt;p&gt;I think the ultimate UI for tagging videos would be… no UI at all! Could we
get machine learning algorithms to tag up the video for us? I’m not 100% on the
AI hype train, but I do think some good old fashioned machine learning tools to
analyse the video would be useful, especially if they could extract highlights
and tags automatically. It would be even cooler if the ML could process the
video and turn it into play diagrams.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.statsperform.com&#x2F;opta-tracking&#x2F;&quot;&gt;I’m&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@kalidrafts&#x2F;exploring-basketball-spacing-through-computer-vision-broadcast-data-cdff8a118c4f&quot;&gt;clearly&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;automating-basketball-highlights-with-object-tracking-b134ce9afec2&quot;&gt;not&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;datahacker.rs&#x2F;005-advanced-computer-vision-basketball-layer-tracking-with-open-cv&#x2F;&quot;&gt;the&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=yJWAtr3kvPU&quot;&gt;first&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.roboflow.com&#x2F;track-football-players&#x2F;&quot;&gt;to&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=XHT2c8jT3Bc&quot;&gt;think&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sketscripter&#x2F;Computer-vision-basketball-court-mapping-and-player-tracking&quot;&gt;of&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;neptune.ai&#x2F;blog&#x2F;dive-into-football-analytics-with-tensorflow-object-detection-api&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think this would be very challenging given the majority of game films in
amateur leagues probably use off the shelf cameras with poor low-light
performance, and the video angle is often very shallow with lots of players or
spectators obscuring the feed. Despite this it would be &lt;em&gt;very&lt;&#x2F;em&gt; cool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;video-hosting&quot;&gt;Video hosting&lt;&#x2F;h3&gt;
&lt;p&gt;Long-term it would be interesting to have a custom video pipeline using some
sort of streaming media server. I looked at a few options for doing this,
including off the shelf things like Cloudflare Stream, but at the end of the day
for a hobby project Youtube is more than enough!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adding comments with utterances</title>
        <published>2022-09-07T00:00:00+00:00</published>
        <updated>2022-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/adding-comments-with-utterances/"/>
        <id>https://willhart.io/post/adding-comments-with-utterances/</id>
        
        <content type="html" xml:base="https://willhart.io/post/adding-comments-with-utterances/">&lt;p&gt;I don’t really know if anybody looks at this blog or finds it useful. There does
seem to be a bit of traffic, and maybe people want to talk about some of the
posts, I dunno.&lt;&#x2F;p&gt;
&lt;p&gt;Previouly I used &lt;code&gt;disqus&lt;&#x2F;code&gt; but it feels a bit heavyweight. So I’m trialling
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;&quot;&gt;https:&#x2F;&#x2F;utteranc.es&#x2F;&lt;&#x2F;a&gt;, which uses github issues for comments. I have no idea if
anybody will write anything, but I assume the people coming here will have a
github account. Let’s see what happens I guess?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Optimising time to interactive, or rewriting my blog... again</title>
        <published>2022-01-22T00:00:00+00:00</published>
        <updated>2022-01-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/rewriting-the-blog-again/"/>
        <id>https://willhart.io/post/rewriting-the-blog-again/</id>
        
        <content type="html" xml:base="https://willhart.io/post/rewriting-the-blog-again/">&lt;p&gt;I seem to have a habit of rewriting this blog every time I get bored, but this time I swear I didn’t do it on purpose! On the plus side, rewriting the blog is a good way to try out new things and different deployment strategies. On the negative side, it often takes over a weekend and I don’t get much else done!&lt;&#x2F;p&gt;
&lt;p&gt;Over time I’ve evolved from &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-simple-static-site-generator-in-python&#x2F;&quot;&gt;a custom static site generator&lt;&#x2F;a&gt;, to a &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;switched-to-ghost&#x2F;&quot;&gt;self-hosted ghost instance&lt;&#x2F;a&gt;, then most recently to &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;recreating-the-blog-in-nextjs&#x2F;&quot;&gt;next.js&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-started-with-lighthouse&quot;&gt;It started with lighthouse&lt;&#x2F;h2&gt;
&lt;p&gt;I posted about my &lt;a href=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;&quot;&gt;CMOS analog clock&lt;&#x2F;a&gt; the other day and on a whim I ran a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;tools&#x2F;lighthouse&quot;&gt;lighthouse&lt;&#x2F;a&gt; report on the site. I was surprised to see this in “mobile” mode:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;rewriting-the-blog-again&#x2F;nextjs_lighthouse.png&quot; alt=&quot;The Lighthouse report for the NextJS blog in “mobile” mode&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The “time to interactive” in particular was a bit of a surprise. On desktop its about 1s, but here its approximately a thousand years. One of the strengths of NextJS is how easy it makes it to do server side rendering (SSR) and server side generation (SSG). I’d spent quite a lot of time messing about with SSG and built it into a custom markdown to SSG pipeline in NextJS. Lighthouse seemed to suggest that bundle size was the big issue. I ran the profiler quickly and I’m definitely not an expert, but with simulating a “Fast 3G” connection and “4x CPU slowdown” the best I could tell was it spent about 3 seconds loading the bundle and another 2 seconds rendering.&lt;&#x2F;p&gt;
&lt;p&gt;I tried a few different things to reduce bundle size, including &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&#x2F;commit&#x2F;af7a0097881aaa3feea5d103c6a547088d28a61c&quot;&gt;replacing some CSS&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&#x2F;commit&#x2F;f302453b4030be5227201a8d7d6c2a521c57d4ab&quot;&gt;dynamically loading components&lt;&#x2F;a&gt; but nothing really made a dent. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&#x2F;commit&#x2F;3097e3fe11f8dc1d5aee51e714daeea8946b2151&quot;&gt;Using Next’s image optimisation&lt;&#x2F;a&gt; was more successful and seemed to make a huge difference to the bandwidth for more image heavy posts, but time to interactive was still fairly low.&lt;&#x2F;p&gt;
&lt;p&gt;These seemed to make a bit of difference in some respects, in particular I think Next’s image optimisation was making a huge difference. Overall time to interactive was still about 4-5 seconds probably due to a decent sized JS bundle and the time spent spinning up the javascript.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;rewriting-the-blog-again&#x2F;nextjs_lighthouse_after_optimisation.png&quot; alt=&quot;The Lighthouse report in “mobile” mode after trying a few different tweaks to bundle size&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;looking-at-zola&quot;&gt;Looking at Zola&lt;&#x2F;h2&gt;
&lt;p&gt;I decided to run a quick proof-of-concept to compare to a pure static site generator. I chose &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;getzola.com&quot;&gt;zola&lt;&#x2F;a&gt;, which is a rust-based static site generator that is quite straighforward to use. Like most rust things, speed seems to be a big consideration and builds are definitely very speedy (this site takes about 300-500ms to build from scratch).&lt;&#x2F;p&gt;
&lt;p&gt;To get started without setting up an entire pipeline, I copied the minified CSS from the NextJS production site and quickly converted a few markdown articles to the Zola format (mostly just changing the front matter to &lt;code&gt;TOML&lt;&#x2F;code&gt;). The lighthouse report for Zola was green across the board.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;rewriting-the-blog-again&#x2F;zola_lighthouse.png&quot; alt=&quot;The first lighthouse report for&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Zola page definitely renders a lot faster, which is a combination of smaller bundle size and not having to spin up the NextJS javascript on the client side. However looking at total downloads things get a bit more interesting. The table below shows the total download size (in MB) for two posts, one very image heavy and one text&#x2F;code heavy.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;NextJS Unoptimised&lt;&#x2F;th&gt;&lt;th&gt;NextJS Optimised&lt;&#x2F;th&gt;&lt;th&gt;Zola&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;CMOS Clock&lt;&#x2F;td&gt;&lt;td&gt;4.6 MB&lt;&#x2F;td&gt;&lt;td&gt;2.1 MB&lt;&#x2F;td&gt;&lt;td&gt;4.1 MB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;NextJS rewrite&lt;&#x2F;td&gt;&lt;td&gt;1 MB&lt;&#x2F;td&gt;&lt;td&gt;1 MB&lt;&#x2F;td&gt;&lt;td&gt;0.006 MB&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Zola absolutely smashes NextJS on text heavy pages, but gets beaten on image-heavy pages thanks to Next’s image optimisation. Zola does have some support for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;image-processing&#x2F;&quot;&gt;optimising images&lt;&#x2F;a&gt; which might be useful in closing the gap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;did-it-make-a-difference&quot;&gt;Did it make a difference?&lt;&#x2F;h2&gt;
&lt;p&gt;Overall I think the Zola website will load and become interactive much faster, but without some serious image optimisation it might not have much benefit for more image-heavy posts. NextJS is a fantastic framework, but in this case where I don’t really need interactivity and I just want to serve HTML blog pages, then I’ll be migrating to Zola.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CMOS analog clock</title>
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/cmos-analog-clock/"/>
        <id>https://willhart.io/post/cmos-analog-clock/</id>
        
        <content type="html" xml:base="https://willhart.io/post/cmos-analog-clock/">&lt;blockquote&gt;
&lt;p&gt;The purpose of this project was to build a large 30cm by 20cm clock using CMOS electronics driven from a 32kHz crystal. The project was a housewarming gift that arrived about four years too late and several IOUs later.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I took inspiration from a number of sources for the analog circuitry, but unfortunately most of those links are lost in the mists of time. The basic principle is to take a 32kHz signal and divide it down to the correct signals using analog ICs, mostly a combination of 74HC4040s and 74HC161s mixed with a series of logic gates (the schematics are included below) and then 74HC238s on the outputs. The circuitry was complicated enough that I breadboarded it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;breadboard.png&quot; alt=&quot;The clock circuitry built on a breadboard prior to ordering the PCBs. (size: 340x411px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This would have gone a lot better if I’d had an oscilloscope or decent logic probe for debugging, but I developed a system of LEDs logic probes and used the Arduino to inject signals at arbitrary frequencies and got there in the end.&lt;&#x2F;p&gt;
&lt;p&gt;Once the clock circuitry was set, it was time to design the layout itself. I wanted something that combined the blocky, industrial vibe of the analog circuitry with softer, more natural lines of timber. Luckily my Dad is very into furniture making, and was very keen to help out by supplying a piece of French Oak he had spare and as much of his highly specialised woodworking skills as I needed. I came up with a design (supported by my design consultant a.k.a. my Wife) with separate “clock” and “main board” sections, each contrasted by rough and clean cuts of the oak.&lt;&#x2F;p&gt;
&lt;p&gt;The digits were small circuit boards mounted on brass standoffs with the cables drilled through the oak. There were twelve, to display 1 hour and 5 minute intervals using LEDs that were mounted on the back of the digit board and shone through slots. Having only a five minute tick may be a detractor for some, but this is as much a piece of wall art as it is a Swiss timepiece and it makes actually building the circuitry somewhat feasible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;digit.png&quot; alt=&quot;A close up of the clock digit, seen mounted on the oak with brass standoffs and a drilled hole for routing cables through. (size: 1386x927px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The main board contained all the clock logic, with the ICs mounted in “industrial” rows, with as much many of the traces as possible routed on the back. At the other end to the ICs was a simple eucalpyt design I drew in inkscape and cut out of the solder mask in Kicad.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;main_board.png&quot; alt=&quot;A close up of the CMOS logic ICs mounted on the rough finished oak board. (size: 790x1036px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall I’m pleased with the design of the clock, and I like the contrast between the electronics and the timber.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;clock.png&quot; alt=&quot;An overall view of the clock. (size: 1600x800px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;&#x2F;h2&gt;
&lt;p&gt;The clock took about three years longer to complete than I’d planned. Partly this was doing the work while spending basically every waking moment working on my PhD, but partly I ran into a few snags that blocked me while I came up with a solution. Overall I feel like I learned an awful lot about analog circuitry, packaging and the challenges of creating a (hopefully) visually appealing but functional PCB design.&lt;&#x2F;p&gt;
&lt;p&gt;The main issues were around routing the cables on the back and having proper connectors that would secure the cables from the back of the main board to the digits. Each digit required a ground and two signal cables, and for some reason I struggled to find appropriate “JST” connectors when I first built the boards. I then spent an awful lot of time playing around with adapter boards, weird pin header connectors and ribbon cables to get some solid connections, before I finally found some premade 3-pin JST cables and SMD headers off ebay.&lt;&#x2F;p&gt;
&lt;p&gt;I also had some issues with assembling the main PCBs. Some of the smaller logic chips were at the limit of my hand soldering ability, and I didn’t yet have a proper heat gun. The board was a bit too large for my regular home reflow methods. This meant a few reworks before I got it right. Luckily as the most expensive components were in the DIP sockets, there wasn’t much wastage in terms of ICs.&lt;&#x2F;p&gt;
&lt;p&gt;This was a very satisfying project to finish up, and not pictured is a CNC cut and laser engraved back plate to guide and constrain the cables on the back. This project was stressful at times, and holds the dubious record of being the only thing that has ever given me an instantaneous migraine!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;schematics&quot;&gt;Schematics&lt;&#x2F;h2&gt;
&lt;p&gt;Below are images of the schematics for the clock circuitry.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Right click and save as or open in a new tab for &lt;em&gt;slightly&lt;&#x2F;em&gt; higher resolution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;schematic_1.png&quot; alt=&quot;Page 1 of the CMOS clock schematics (size: 1492x1049px)&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;cmos-analog-clock&#x2F;schematic_2.png&quot; alt=&quot;Page 2 of the CMOS clock schematics (size: 1506x1054px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Recreating the blog in NextJS</title>
        <published>2020-12-28T00:00:00+00:00</published>
        <updated>2020-12-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/recreating-the-blog-in-nextjs/"/>
        <id>https://willhart.io/post/recreating-the-blog-in-nextjs/</id>
        
        <content type="html" xml:base="https://willhart.io/post/recreating-the-blog-in-nextjs/">&lt;p&gt;Well this &lt;a href=&quot;&#x2F;post&#x2F;switched-to-ghost&quot;&gt;isn’t the first post of this kind&lt;&#x2F;a&gt;,
(note from 2025 Will: I’m about three more rewrites in by now!) but once
again its that time of year when I look at the blog and decide its time to
migrate to a different blog host. The current Ghost blog has been fine but costs
$5&#x2F;month to host. Backups and updates are pretty annoying and the whole thing is
a very manual process.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also I’ve currently forgotten my admin password for Ghost :| As the server
didn’t have an email configuration, I can’t reset the password and so I can’t
post anything new even if I had the inclination!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve been using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;NextJS&lt;&#x2F;a&gt; a lot recently (for work and side
projects) and really like the file based routing and ability to choose between
static, server or client rendered pages. Furthermore automated deploy pipelines
like those supported by NextJS really make life easy. Deployment is just a matter of &lt;code&gt;git push&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Spurred by these advantages I decided to open source the blog and make a
statically generated site using NextJS. The main way this works is by keeping an
array of post URLs, then loading in markdown files based on these URLs to
display. Markdown files use YAML frontmatter to store configuration (author,
date, titles, summaries and so on).&lt;&#x2F;p&gt;
&lt;p&gt;Static generation is enabled in NextJS by specifying the URLs to generate (if
the URLs contain dynamic segments like slugs or IDs) and also specifying a
function that generates the props on the server. For the blog post pages this
looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get a list of post slugs to statically generate. Here 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * pageData contains all the URL slugs. Its hard coded which
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * isn&amp;#39;t ideal, but its not a big burden to keep the list 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * up to date. It&amp;#39;s also easy to filter once the corresponding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * posts are loaded in - for instance to only return posts with
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * a particular tag. As its statically generated, at build time,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * performance isn&amp;#39;t all that important.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getStaticPaths&lt;&#x2F;span&gt;&lt;span&gt;: GetStaticPaths = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    paths: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pageData&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;({ params: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug &lt;&#x2F;span&gt;&lt;span&gt;} })),
&lt;&#x2F;span&gt;&lt;span&gt;    fallback: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * This loads the data for each post - it reads the post slug from the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * parameters and uses the postReader helper to load in the file from
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * disk. The gray-matter YAML parser extracts the front matter and 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * a react-markdown component renders the markdown to file.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Each blog post is statically generated and preloaded when it enters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * the viewport.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getStaticProps&lt;&#x2F;span&gt;&lt;span&gt;: GetStaticProps = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;postReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ props: { ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post &lt;&#x2F;span&gt;&lt;span&gt;} }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The home page, category&#x2F;tags pages and individual post pages are all statically
generated at build time. On the down side, I had to write my own blog template
and migrate all the posts by hand :(&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The repo is at
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;willhart.io&lt;&#x2F;a&gt;.
I don’t really think it will spur me to write more posts, but at least when I do
decide to write something it’s as easy as writing a Markdown document and
committing to git.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Coal powered cars?</title>
        <published>2015-05-09T00:00:00+00:00</published>
        <updated>2015-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/how-green-is-your-electric-car/"/>
        <id>https://willhart.io/post/how-green-is-your-electric-car/</id>
        
        <content type="html" xml:base="https://willhart.io/post/how-green-is-your-electric-car/">&lt;p&gt;You often see “zero emissions” plastered over the backs of electric cars, as if
the energy to run them is magically pulled from the ether. I’m curious about
some of the practical considerations for a large scale adoption of electricity
as a form of energy for road transportation, and what sort of overall impact
this may have on environmental issues.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s try to calculate (on the back of an envelope!) the impact of an imaginary,
immediate and total conversion from petrol and diesel to electric cars.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scale-of-emissions&quot;&gt;Scale of emissions&lt;&#x2F;h2&gt;
&lt;p&gt;Based on statistics released by the UK Climate Change Commission, in 2012 the UK
released about 600 mega tonnes of CO2 (MtCO2) into the atmosphere. Approximately
110Mt was related to surface transport of all kinds&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, including rail,
passenger cars, vans, and freight in trucks&#x2F;lorries&#x2F;HGVs. Private passenger
transport accounts for around 60% of transport related emissions&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; or
around 11% of total CO2 emissions&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. By comparison, electricity
generation emitted around 160MT of CO2 in the same year, or in other words about
two and a half times as much as passenger transport&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-2&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;electric-supply&quot;&gt;Electric supply&lt;&#x2F;h2&gt;
&lt;p&gt;The scale of emissions above suggests that if we were to suddenly replace all
the petrol and diesel cars in the UK with electric vehicles then we could cut
total UK emissions by about 65MtCO2 or 11%. However, in reality this is not the
case as most energy for electric cars comes from the grid…&lt;&#x2F;p&gt;
&lt;p&gt;In England in 2011, almost 80% of that energy is generated by burning fossil
fuels (the figure is less in other countries within the UK)&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Does
moving emissions from an internal combustion engine to a fossil fuel power plant
reduce total emissions at all? Let’s do the rough numbers…&lt;&#x2F;p&gt;
&lt;h2 id=&quot;calculating-the-emissions&quot;&gt;Calculating the emissions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;energy-in-fuels&quot;&gt;Energy in fuels&lt;&#x2F;h3&gt;
&lt;p&gt;Not all fuels are created equal. The reason why petrol and diesel have become so
ubiquitous is that it gives you very good bang for buck - it lets you carry
around a lot of energy in a small tank. For each kg of petrol you burn, you can
theoretically “liberate” 44MJ of energy. For coal and natural gas this value is
around 35MJ&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-5-1&quot;&gt;&lt;a href=&quot;#fn-5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Therefore to produce 44MJ of energy, you could burn 1kg of
“gasoline”, or $\frac{44}{35}=1.25kg$ of natural gas or coal.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;efficiency-of-power-sources&quot;&gt;Efficiency of power sources&lt;&#x2F;h3&gt;
&lt;p&gt;To make this a back of the envelope calculation, we’ll have to ignore
distribution and transmission efficiency and just concentrate on generation
efficiency. A typical internal combustion engine is between 25 and 45%
efficient. This means that to generate 44MJ of energy at the fly wheel (i.e.
before the mechanical losses from the transmission) then we don’t need to burn
1kg of fuel, but actually between $\frac{1}{0.45}=2.2kg$ and
$\frac{1}{0.25}=4.0kg$ of fuel.&lt;&#x2F;p&gt;
&lt;p&gt;A power plant may have higher efficiency in the range of 40-60%, meaning we have
to burn between $\frac{1.25}{0.4}=2.1kg$ and $\frac{1.25}{0.6}=3.1kg$ of fuel&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-6-1&quot;&gt;&lt;a href=&quot;#fn-6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.
To be fair to petrol engines we should factor in the electric car
motor efficiency, which is less than 100%, but luckily much higher than for
petrol engines. We will assume a generous 90% efficiency, meaning that to get
44MJ of energy at the electric motor “flywheel”, we have to burn between 2.3 and
3.4kg of fuel at the power plant.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;co2-emitted-by-fuel&quot;&gt;CO2 emitted by fuel&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, we need to work out how much CO2 is emitted by burning each of these
fuel types. A simplified chemical reaction for petrol combustion is&lt;&#x2F;p&gt;
&lt;p&gt;$$ C_8 H_{18} + 12.5(O_2 + 3.76N_2) \rightarrow 8CO_2 + 9H_2O + 47N_2$$&lt;&#x2F;p&gt;
&lt;p&gt;These units are in mole, but using the atomic weight of the molecules we can
determine from this reaction that for every kg of petrol we burn, we produce
around 3kg of C02&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-7-1&quot;&gt;&lt;a href=&quot;#fn-7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This reaction assumes complete combustion and ignores CO or NOx emissions&lt;&#x2F;p&gt;
&lt;p&gt;Similar values can be worked out for coal and natural gas, but for simplicity
lets use a table which gives kg of CO2 per kg of fuel of 3.3kg&#x2F;kg for petrol,
2.8 for natural gas and 2.3 for coal&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-8-1&quot;&gt;&lt;a href=&quot;#fn-8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore to produce 44MJ of energy from petrol, we would have to release
between $2.2kg \times 3.3kg&#x2F;kg = 7.3kg$ and $4kg\times3.3kg&#x2F;kg = 13.2kg$ of CO2,
depending on the fuel type. (Diesel is typically more efficient at the cost of
higher nitrous oxides, but we’ll assume everything is petrol for now).&lt;&#x2F;p&gt;
&lt;p&gt;Using England’s split of 20.8% of power supplied by low emission sources, 29.2%
by coal and 50% by natural gas&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-2&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, we can calculate the equivalent
emissions for power plant generation at between&lt;&#x2F;p&gt;
&lt;p&gt;$$0.29 \times 2.3kg \times 2.3kg&#x2F;kg + 0.5 \times 2.3kg \times 2.8kg&#x2F;kg = 4.8kg$$&lt;&#x2F;p&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;p&gt;$$0.29 \times 3.4kg \times 2.3kg&#x2F;kg + 0.5 \times 3.4kg \times 2.8kg&#x2F;kg = 7.0kg$$&lt;&#x2F;p&gt;
&lt;p&gt;Comparing the two reveals that burning fossil fuels as opposed to fuel can
result in emissions being reduced to 53-66% of their petrol counterparts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;now-what&quot;&gt;Now what?&lt;&#x2F;h2&gt;
&lt;p&gt;In short, this pretty basic analysis tells us that if we took the 65 MTCO2e from
passenger transport and converted it all to 2011 England electric power, we
would reduce CO2 emissions to between 35 and 44 MTCO2e for passenger transport
under current power generation technology. The reduction would equate to around
5% of total emissions.&lt;&#x2F;p&gt;
&lt;p&gt;In reality, the impact of even total adoption of electric vehicles on CO2
emissions would be small to negligible under current power generation
technologies. Whilst
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.tudelft.nl&#x2F;en&#x2F;current&#x2F;latest-news&#x2F;article&#x2F;detail&#x2F;studenten-breken-wereldrecord-0-100-acceleratie-1&#x2F;&quot;&gt;electric&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;69173273&quot;&gt;vehicles&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.teslamotors.com&#x2F;en_GB&#x2F;models&quot;&gt;are&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.fiaformulae.com&#x2F;&quot;&gt;cool&lt;&#x2F;a&gt;, a far more pressing need is to develop and
commercialise new, cleaner ways of generating electrical energy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes-and-assumptions&quot;&gt;Notes and assumptions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-missing&quot;&gt;What is missing?&lt;&#x2F;h3&gt;
&lt;p&gt;Energy analysis is by definition complex, and calculation CO2 emissions and fuel
economy is even more difficult given the very wide range of factors at play&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-9-1&quot;&gt;&lt;a href=&quot;#fn-9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This analysis is based on operating emissions only - that is the emissions
required to supply the energy to move a vehicle from point A to point B. Factors
like hybrids, regenerative braking, the higher mass of electric vehicles and
potential changes to driver habits are ignored, as are the total lifetime
emissions of vehicles from digging ore out of the ground to end of life
vehicles.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, this analysis completely ignores the exotic metals electric motors
require or the problem of disposing of vast quantities of end of life electric
vehicle batteries.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;CO2 emissions by sector &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.theccc.org.uk&#x2F;charts-data&#x2F;ukemissions-by-sector&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.theccc.org.uk&#x2F;charts-data&#x2F;ukemissions-by-sector&#x2F;&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-1-2&quot;&gt;↩2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;Transport emissions by type, p23 of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;228897&#x2F;7682.pdf&quot;&gt;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;228897&#x2F;7682.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;$\frac{60% \times 110MTCO_2e}{600 MTCO_2e} = 11%$ &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;UK sources of electricity, 2010 and 2011, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;65841&#x2F;7345-elec-gen-2008-2011-et-article.pdf&quot;&gt;https:&#x2F;&#x2F;www.gov.uk&#x2F;government&#x2F;uploads&#x2F;system&#x2F;uploads&#x2F;attachment_data&#x2F;file&#x2F;65841&#x2F;7345-elec-gen-2008-2011-et-article.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-4-2&quot;&gt;↩2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-5&quot;&gt;
&lt;p&gt;Calorific values of some fuels &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Heat_of_combustion#Heat_of_combustion_tables&quot;&gt;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Heat_of_combustion#Heat_of_combustion_tables&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-5-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-6&quot;&gt;
&lt;p&gt;See typical power plant losses and efficiency on p24 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.iea.org&#x2F;ciab&#x2F;papers&#x2F;power_generation_from_coal.pdf&quot;&gt;https:&#x2F;&#x2F;www.iea.org&#x2F;ciab&#x2F;papers&#x2F;power_generation_from_coal.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-6-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-7&quot;&gt;
&lt;p&gt;As 1kmol of $C_8 H_18$ weighs $8\times 12 + 18 \times 1 = 114kg$ and produces 8kmol of $CO_2$  weighing $8\times(12 + 2\times 16) = 352kg$ &lt;a href=&quot;#fr-7-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-8&quot;&gt;
&lt;p&gt;Specific CO2 Emission table, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.engineeringtoolbox.com&#x2F;co2-emission-fuels-d_1085.html&quot;&gt;http:&#x2F;&#x2F;www.engineeringtoolbox.com&#x2F;co2-emission-fuels-d_1085.html&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-8-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-9&quot;&gt;
&lt;p&gt;Limitations of transport CO2 emissions calculations &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.abtslogistics.co.uk&#x2F;green-logistics-resources&#x2F;d82cc048-4b92-4c2a-a014-af1eea7d76d0_CO2%20Emissions%20from%20Freight%20Transport%20-%20An%20Analysis%20of%20UK%20Data.pdf&quot;&gt;https:&#x2F;&#x2F;www.abtslogistics.co.uk&#x2F;green-logistics-resources&#x2F;d82cc048-4b92-4c2a-a014-af1eea7d76d0_CO2%20Emissions%20from%20Freight%20Transport%20-%20An%20Analysis%20of%20UK%20Data.pdf&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-9-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;section&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Switched to Ghost</title>
        <published>2015-04-27T00:00:00+00:00</published>
        <updated>2015-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/switched-to-ghost/"/>
        <id>https://willhart.io/post/switched-to-ghost/</id>
        
        <content type="html" xml:base="https://willhart.io/post/switched-to-ghost/">&lt;p&gt;I had a look at my website the other day and I realised that the last time I
posted anything was March 2014, over a year ago. Prompted by an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dailyjs.com&#x2F;2015&#x2F;04&#x2F;23&#x2F;migrating-dailyjs-to-ghost&#x2F;&quot;&gt;article on
dailyjs&lt;&#x2F;a&gt; I decided to
give &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;&quot;&gt;ghost&lt;&#x2F;a&gt; a go.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve had my eye on ghost for some time but never made the plunge as I couldn’t
work out a neat way to redirect my old static website URLs to a new ghost
instance. The dailyjs article is quite straightforward, it just uses a JSON file
to describe URL redirects and sets up listeners in an express app which contains
Ghost. My implementation is very slighlty different as it lets me use the ghost
config file to specify the base URL, which is useful for testing. The entire
code is trivial at about 20 lines.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghost &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ghost&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;express &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;express&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirects &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;redirects.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ghost&lt;&#x2F;span&gt;&lt;span&gt;({config: __dirname + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;ghost-config.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghostServer&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghostServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rootApp&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirects&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Redirecting %s to %s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newUrl&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ghostServer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My &lt;code&gt;redirects.json&lt;&#x2F;code&gt; file looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;charlieplexing-leds-with-arduino.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.williamhart.info&#x2F;charlieplexing-leds-with-arduino&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;....&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m not setting myself a target or anything like that but going back to a CMS
should make it easier to post new articles when something comes to mind (for
instance updating my old Ember tutorial which is past overdue!)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I’ve since noticed that disqus comments haven’t properly migrated
over. I’ve mapped them in the disqus interface using a CSV file but they don’t
appear on the post. I’ll keep investigating.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Python static site generator</title>
        <published>2015-04-26T00:00:00+00:00</published>
        <updated>2015-04-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/python-static-site-generator/"/>
        <id>https://willhart.io/post/python-static-site-generator/</id>
        
        <content type="html" xml:base="https://willhart.io/post/python-static-site-generator/">&lt;h2 id=&quot;about&quot;&gt;About&lt;&#x2F;h2&gt;
&lt;p&gt;The following code is described in &lt;a href=&quot;&#x2F;post&#x2F;a-simple-static-site-generator-in-python&quot;&gt;this blog
post&lt;&#x2F;a&gt;. It is available under the MIT
license. You can also see the code &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;9609188&quot;&gt;as a
gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Free to use under the MIT license
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Builds a static site from a list of Markdown source files. The source
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;files should have the same directory structure as the desired output.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Files are rendered using Markdown2 and can declare metadata variables:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    ---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    template: index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    title: My Title
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    ---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    # your makdown doc from here on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;Site templates are stored in the `templates` folder and should be Jinja2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;templates. Apart from the `template` meta variable in markdown documents, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;any variables supplied in the Markdown meta will be available in the 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;template under the same name. The variable `title` given above can therefore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;be accessed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;The static site will be exported to the `build` directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;jinja2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Environment, FileSystemLoader, TemplateNotFound
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;markdown2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# include additional markdown 2 extras here (e.g. tables, footnotes etc)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MARKDOWN_EXTRAS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# folders that should be copied from your `src` directory to the `build` directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STATIC_DIRS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;files_with_extension&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ext&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Gets all files in the given directory with the given extension
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;listdir&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span&gt;(ext)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;copy_directory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Copies all the contents from the source directory to the output directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Copying &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copytree&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;OSError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; There was an error copying the files from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_templates&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Compiles all the templates in the template directory and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    returns a dictionary of Jinja2 `Template` objects with the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    file names as the keys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loader&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FileSystemLoader&lt;&#x2F;span&gt;&lt;span&gt;(path))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build_directory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_path&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Takes all the *.md files in the given directory, builds them into
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    HTML and renders them using the Jinja templates. The rendered markdown
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    is available in the Jinja templates as the `content` variable.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    ::warning:: There can only be one `src` folder in the path, as the script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    directly replaces `src` with `build` once to find the output path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Looking for Markdown files in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(input_path)
&lt;&#x2F;span&gt;&lt;span&gt;    files = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;files_with_extension&lt;&#x2F;span&gt;&lt;span&gt;(input_path, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    op_dir = input_path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span&gt;(op_dir):
&lt;&#x2F;span&gt;&lt;span&gt;        os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;        os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt;(op_dir, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0o777&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;files:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Converting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ip_path = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(input_path, f)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(ip_path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;ip:
&lt;&#x2F;span&gt;&lt;span&gt;            raw_html = markdown2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;markdown&lt;&#x2F;span&gt;&lt;span&gt;(ip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extras&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MARKDOWN_EXTRAS&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            template = raw_html.metadata[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;KeyError:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WARNING: No template specified for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, using index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span&gt;            template = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            tpl = templates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_template&lt;&#x2F;span&gt;&lt;span&gt;(template)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;TemplateNotFound:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to locate the template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; for file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;. Aborting&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(template, f))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        context = raw_html.metadata
&lt;&#x2F;span&gt;&lt;span&gt;        context[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = raw_html
&lt;&#x2F;span&gt;&lt;span&gt;        result = tpl.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(context)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        op_path = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(op_dir, f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.md&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writing to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(op_path)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(op_path, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w+&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;op:
&lt;&#x2F;span&gt;&lt;span&gt;            op.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; Rendered files at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(ip_path, op_path)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Folder complete&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build_site&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template_dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ip_dir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Gets all the markdown files in the `src` directory, renders them using the template
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    given in metadata (or `index.html`) if no template given, and then throws them in the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    same directory structure in the `build` folder.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    Additionally everything in the `templates&#x2F;static` folder is copied to `build&#x2F;static`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# delete the old build
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;clean:
&lt;&#x2F;span&gt;&lt;span&gt;        op_dir = ip_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cleaning out old files from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rmtree&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; ERROR - Unable to clean the old build directory&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;            os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt;(op_dir, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0o777&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Created output directory&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; ERROR - Unable to create a directory at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(op_dir)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# copy the `templates&#x2F;static` folder to `build&#x2F;static`
&lt;&#x2F;span&gt;&lt;span&gt;    src = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(template_dir, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    dst = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copy_directory&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# copy all the static files
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;sd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STATIC_DIRS&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        src = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir, sd)
&lt;&#x2F;span&gt;&lt;span&gt;        dst = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), sd)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copy_directory&lt;&#x2F;span&gt;&lt;span&gt;(src, dst)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# load the templates
&lt;&#x2F;span&gt;&lt;span&gt;    templates = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_templates&lt;&#x2F;span&gt;&lt;span&gt;(template_dir)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Do the root directory
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_directory&lt;&#x2F;span&gt;&lt;span&gt;(templates, ip_dir)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# get all the source directories
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;path, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;walk&lt;&#x2F;span&gt;&lt;span&gt;(ip_dir):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_directory&lt;&#x2F;span&gt;&lt;span&gt;(templates, os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(path, d))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Site build complete&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# get the input and template dir paths
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir &lt;&#x2F;span&gt;&lt;span&gt;= os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getcwd&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    template_dir = os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span&gt;= os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build the site
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build_site&lt;&#x2F;span&gt;&lt;span&gt;(template_dir, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>C# 5.0 In A Nutshell - Review</title>
        <published>2013-08-28T00:00:00+00:00</published>
        <updated>2013-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/c-50-in-a-nutshell/"/>
        <id>https://willhart.io/post/c-50-in-a-nutshell/</id>
        
        <content type="html" xml:base="https://willhart.io/post/c-50-in-a-nutshell/">&lt;blockquote&gt;
&lt;p&gt;DISCLAIMER: I received this book for free as part of the O’Reilly blogger
review program. I promise this hasn’t changed my opinion :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve been coding a lot more in C# recently as a result of doing it at work and
mocking up some tests for Blitz Logger. Whilst I’m comfortable with the basics
of C#, I came to it from a combination of VB and C and never really had a formal
education in the language.&lt;&#x2F;p&gt;
&lt;p&gt;I therefore decided to have a look at C# 5.0 In a Nutshell as a “desktop”
reference - In effect a digital copy on my phone or PC I can flick through when
I want to know about a specific language feature.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I did when I got the book was have a flick through the contents.
The book seemed fairly comprehensive with most of the language features I knew
about and a couple I didn’t. You’d probably expect this as the book weighs in at
about 1000 pages!&lt;&#x2F;p&gt;
&lt;p&gt;I browsed through the chapter on &lt;code&gt;LINQ to SQL&lt;&#x2F;code&gt; and the one on &lt;code&gt;Reflection&lt;&#x2F;code&gt; and
&lt;code&gt;Metadata&lt;&#x2F;code&gt;. They seemed pretty well written in clear language with lots of short
examples. In the PDF the table of contents is all hyperlinked so you can click
on an item and go directly to the section.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Great,” I thought, “this will be handy!”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then I put the book down and forgot about it for a few months.&lt;&#x2F;p&gt;
&lt;p&gt;You see I had stumbled upon one of the fundamental problems with reference books
in the internet age - what presumably keeps publishing executives up at night -
a book is much harder to use than the internet! When I have a problem its
normally a very specific one. For instance, something along the lines of:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I use &lt;code&gt;BeginInvoke&lt;&#x2F;code&gt; again?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sure I know vaguely what I’m meant to do and how it works but for some reason
the exact syntax never stays in my head. In the time it takes to find the PDF of
the book, open it and somehow search the for &lt;code&gt;BeginInvoke&lt;&#x2F;code&gt; (which I can’t do on my
phone by the way) I could have found three or four possible solutions on
StackOverflow. Books are just so inefficient!&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps things would be different if I had splashed out for a paper copy, but
then again I can’t really see myself putting down the keyboard and mouse and
thumbing through such a weighty tome. If i have a specific question, I want the
answer NOW! (Plus, 1000 pages!! Think of the trees!)&lt;&#x2F;p&gt;
&lt;p&gt;Maybe 10 years ago, this book would have been the bees knees. Its comprehensive,
well written and has a solid index and table of contents which makes searching
relatively easy. I just couldn’t work out how to fit it into my workflow.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Svalbard Photography</title>
        <published>2012-01-28T00:00:00+00:00</published>
        <updated>2012-01-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/svalbard-photography/"/>
        <id>https://willhart.io/post/svalbard-photography/</id>
        
        <content type="html" xml:base="https://willhart.io/post/svalbard-photography/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;svalbard-photography&#x2F;svalbard_header.jpg&quot; alt=&quot;The Polar Pioneer, Svalbard 2011&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In August 2011 my wife and I were lucky enough to travel on an Aurora
Expeditions ship - the &lt;em&gt;Polar Pioneer&lt;&#x2F;em&gt; - on a circumnavigation of Spitsbergen.
This was an absolutely unforgettable experience, and we were lucky to travel
parts of the Arctic whilst there is still one to see. We took several thousand
photographs on our trip and have included some of them in this short slide show,
linked below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;gMbyqPFETMk&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;svalbard-photography&#x2F;svalbard_youtube_splash.png&quot; alt=&quot;Svalbard Photograph Slideshow link&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The most incredible thing about being somewhere like the Arctic was the sense of isolation. We only had our little ship for company, and were only connected to the world by a satellite phone which was seldom used by passengers. The result was that we were truly immersed in the wonderful environment, and many of our concerns and stresses from “the world” were completely forgotten. We were left to appreciate the immensity of the Arctic - glaciers that towered over you, arctic deserts stretching to the horizons, and many incredible creatures. Of course our favourite was the polar bears, but we were also lucky enough to see beluga whales, fin whales, walrus and tonnes of birds.&lt;&#x2F;p&gt;
&lt;p&gt;I would highly recommend this kind of small ship cruise to anybody with an interest in the Arctic, or nature, or the spirit of adventure. Aurora also operate some voyages in the Antarctic, and when funds once again allow it we will definitely be considering an Antarctic voyage.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
