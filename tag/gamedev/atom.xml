<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>William Hart | willhart.io - gamedev</title>
    <subtitle>My little internet home page, full of uninteresting musings and thinking out louds.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://willhart.io/tag/gamedev/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://willhart.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2022-06-19T00:00:00+00:00</updated>
    <id>https://willhart.io/tag/gamedev/atom.xml</id>
    <entry xml:lang="en">
        <title>Headless bevy in a tauri app</title>
        <published>2022-06-19T00:00:00+00:00</published>
        <updated>2022-06-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/headless-bevy-in-a-tauri-app/"/>
        <id>https://willhart.io/post/headless-bevy-in-a-tauri-app/</id>
        
        <content type="html" xml:base="https://willhart.io/post/headless-bevy-in-a-tauri-app/">&lt;p&gt;I want to say right from that start that I’m pretty sure what I’m about to do is
a terrible idea. But given &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.studio&quot;&gt;tauri&lt;&#x2F;a&gt; just reached 1.0 and
it’s been a while since I’ve done anything in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;&quot;&gt;bevy&lt;&#x2F;a&gt;,
the idea occurred to me that there just &lt;em&gt;must&lt;&#x2F;em&gt; be some way to combine these two
lovely rust thingies.&lt;&#x2F;p&gt;
&lt;p&gt;So here it is, my misguided, inappropriate and entirely pointless attempt at
using bevy as a backend for a tauri app, despite the fact that bevy already
works perfectly well in web assembly or using its own cross-platform windowing
solution. Sue me.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don’t already know, tauri is a very lightweight and rusty alternative
to electron, and bevy is a data-driven ECS rust game engine that I’m very much
a fan of. I’ll skip the intros - if you want to know more follow the links
above.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;creating-a-tauri-app&quot;&gt;Creating a tauri app&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The code for this article is available &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-plus-bevy&quot;&gt;on
github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve already blogged about building a simple tauri app,  &lt;a href=&quot;&#x2F;post&#x2F;20210826_tauri_create_react_app_tutorial_part1&quot;&gt;part 1 can be found
here&lt;&#x2F;a&gt;, but since then
things have improved even further and we can get up and running with basically
one command. After making sure my environment is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.app&#x2F;v1&#x2F;guides&#x2F;getting-started&#x2F;prerequisites&quot;&gt;setup for
tauri&lt;&#x2F;a&gt;, we can run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; create tauri-app
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After following the prompts, and selecting the following options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;create-vite&lt;&#x2F;code&gt; app,&lt;&#x2F;li&gt;
&lt;li&gt;Select &lt;code&gt;Y&lt;&#x2F;code&gt; to adding &lt;code&gt;@tauri-apps&#x2F;api&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Selecting &lt;code&gt;react-ts&lt;&#x2F;code&gt; as the library&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;we need to wait a bit for all the dependencies to install. Now if we run &lt;code&gt;yarn tauri dev&lt;&#x2F;code&gt; and wait a bit (it takes a while the first time while the tauri&#x2F;rust
code compiles), we can see a basic tauri app up and running. Easy!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;headless-bevy-in-a-tauri-app&#x2F;initial_setup.png&quot; alt=&quot;The initial app after running yarn create tauri-app. (size: 802x632px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-bevy&quot;&gt;Setting up bevy&lt;&#x2F;h2&gt;
&lt;p&gt;In this case we’re going to use the &lt;code&gt;react&lt;&#x2F;code&gt; front end to render the bevy app, so
we want to run bevy in &lt;code&gt;headless&lt;&#x2F;code&gt; mode. Bevy has great examples, and we’re going
to borrow heavily from the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;latest&#x2F;examples&#x2F;app&#x2F;headless.rs&quot;&gt;headless
example&lt;&#x2F;a&gt;
in the bevy repo.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly we add the bevy dependency to the tauri project, skipping default
features to remove windowing and rendering. In &lt;code&gt;src-tauri&#x2F;cargo.toml&lt;&#x2F;code&gt; add a few
dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;bevy = { version = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, default-features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;crossbeam-channel = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in &lt;code&gt;src-tarui&#x2F;main.rs&lt;&#x2F;code&gt; we want to initialise the bevy app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; required imports:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;bevy::{app::ScheduleRunnerSettings, prelude::*, utils::Duration};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; at the start of fn main():
&lt;&#x2F;span&gt;&lt;span&gt;App::new()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(ScheduleRunnerSettings::run_loop(Duration::from_secs_f64(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    )))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span&gt;(MinimalPlugins)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I find that the &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; line has an error about missing
&lt;code&gt;distDir&lt;&#x2F;code&gt; which goes away if I build the front end app using &lt;code&gt;yarn build&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You’ll note that we’ve made a few changes from the example - we’ve set it to run
at 15fps, and removed the “counter” system from the example (we’ll get back to
it though).&lt;&#x2F;p&gt;
&lt;p&gt;Now if we run &lt;code&gt;yarn tauri dev&lt;&#x2F;code&gt; there is a problem - nothing happens! This is
because the bevy &lt;code&gt;run()&lt;&#x2F;code&gt; function is “blocking”, and never exits, but as we dont
have a windowing or rendering library nothing is changed. Remove the &lt;code&gt;run()&lt;&#x2F;code&gt;
call at the end of the bevy App::new() line, tauri automatically recompiles the
app and the window appears which confirms this is the case. Ok, so we need a bit
more thinking here, we need to run the bevy app in the background in a
non-blocking way - enter threads!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-separate-threads-for-bevy-and-tauri&quot;&gt;Using separate threads for bevy and tauri&lt;&#x2F;h2&gt;
&lt;p&gt;Looks like we need to spawn the bevy app on a separate thread. There is a pretty
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;discussions&#x2F;1150&quot;&gt;good example of that here&lt;&#x2F;a&gt;
and in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;latest&#x2F;examples&#x2F;async_tasks&#x2F;external_source_external_thread.rs&quot;&gt;this official
examples&lt;&#x2F;a&gt;,
so lets adapt those.&lt;&#x2F;p&gt;
&lt;p&gt;We start by using &lt;code&gt;std::thread&lt;&#x2F;code&gt; and &lt;code&gt;spawning&lt;&#x2F;code&gt; a new thread for the bevy app. We
can also add the &lt;code&gt;run()&lt;&#x2F;code&gt; call back in. The bevy part of the code at the start of
&lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add: use std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;    App::new()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(ScheduleRunnerSettings::run_loop(Duration::from_secs_f64(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60.0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_plugins&lt;&#x2F;span&gt;&lt;span&gt;(MinimalPlugins)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Things load, but now its not particularly useful - the app is running in a
separate thread but we don’t have any way to communicate between the bevy and
tauri apps. Rust has a whole lot of channels that can help with this. Here we
want to be able to send from lots of producers on the bevy side, but only one
receiver - the tauri app, so a “multi producer single consumer” or &lt;code&gt;mpsc&lt;&#x2F;code&gt; queue
seems like the right idea.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; we first create the channel, setting the type just as a
number for now. We use crossbeam because as the &lt;code&gt;Receiver&lt;&#x2F;code&gt; is &lt;code&gt;Sync&lt;&#x2F;code&gt; we can more
easily pass it to tauri:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add: use crossbeam_channel::{bounded, Receiver, Sender};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) = bounded::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; the use of bounded here sets a fixed size to the number of messages
that can be queued up in the channel. This means if we don’t receive the
messages in the tauri app then eventually the channel will fill up. This
causes any senders to block until there is space on the channel to send their
message - this could potentially lock up the bevy app.&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, we could use an &lt;code&gt;unbounded&lt;&#x2F;code&gt; channel, which has no capacity.
Whilst we arne’t likely to allocate enough &lt;code&gt;u32&lt;&#x2F;code&gt;s to fill up my memory in a
hurry, I’ll leave this is a bounded channel.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This line gives us a sender &#x2F; transmitter (&lt;code&gt;tx&lt;&#x2F;code&gt;) and a receiver (&lt;code&gt;rx&lt;&#x2F;code&gt;). We can
clone the sender as often as we want and its thread-safe, but we can only have
one receiver, which we will pass to the tauri app. Start by creating a new
struct to hold the &lt;code&gt;Sender&lt;&#x2F;code&gt; in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TauriBridge(Sender&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BevyBridge(Receiver&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the app build section in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;, before &lt;code&gt;run()&lt;&#x2F;code&gt; to add the
&lt;code&gt;TauriBridge&lt;&#x2F;code&gt; into the bevy app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;App::new()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(TauriBridge(tx))
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lets create a basic bevy system that increments a &lt;code&gt;u32&lt;&#x2F;code&gt; counter every frame and
sends a message via the channel with the new counter value. First we’ll create a
resource to hold the current value in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;CounterValue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We derive &lt;code&gt;Default&lt;&#x2F;code&gt; so its easier to use this as &lt;code&gt;Local&lt;&#x2F;code&gt; state for the system
that increments the counter. The system is quite straightforward and can be
mostly derived from the “headless” bevy example. We are using a global resource
rather than the &lt;code&gt;Local&lt;&#x2F;code&gt; resource in the example so we can access it from other
systems.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;increment_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;CounterValue&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= (state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1_000_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should also create a system that sends the counter to the mpsc channel on
each frame.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri_bridge&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;TauriBridge&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;: Res&amp;lt;CounterValue&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    tauri_bridge
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to send on channel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then need to add the &lt;code&gt;CounterValue&lt;&#x2F;code&gt; resource to the bevy app, plus the two
systems. That looks like this in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(CounterValue::default())
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span&gt;(increment_counter)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span&gt;(send_counter)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;pulling-data-from-bevy-via-the-front-end&quot;&gt;Pulling data from bevy via the front-end&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; I end up undoing most of the code in this section. I’ve kept it &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-plus-bevy&#x2F;tree&#x2F;feature&#x2F;frontend-pull-updates&quot;&gt;on a
branch of the
repo&lt;&#x2F;a&gt;
if you are interested.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We then want to pass the receiver to the tauri app. We can do this using
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.app&#x2F;v1&#x2F;guides&#x2F;features&#x2F;command#accessing-managed-state&quot;&gt;managed
state&lt;&#x2F;a&gt; and
the &lt;code&gt;BevyBridge&lt;&#x2F;code&gt; struct we declared above. Modify &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; where we
declare the tauri app:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(BevyBridge(rx))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; if we used &lt;code&gt;std::sync::mpsc&lt;&#x2F;code&gt; here instead of
&lt;code&gt;crossbeam_channel::bounded&lt;&#x2F;code&gt;, we’d have an error here. Tauri needs its managed
state to be &lt;code&gt;Send + Sync&lt;&#x2F;code&gt; and the &lt;code&gt;Receiver&lt;&#x2F;code&gt; in &lt;code&gt;std&lt;&#x2F;code&gt; is &lt;code&gt;!Sync&lt;&#x2F;code&gt;. Using a
&lt;code&gt;Mutex&lt;&#x2F;code&gt; might help here but it seems easier to use a package where this is
handled by default.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now seems like a good time to check that bevy is properly sending messages
through to tauri. We’re left with a bit of a question - should bevy and tauri
&lt;em&gt;push&lt;&#x2F;em&gt; the updates to the front end, or should the front-end pull them by
querying for the current application state? For now lets try pulling updates
when the application is ready.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;App.tsx&lt;&#x2F;code&gt; we’ll modify the app so that we &lt;code&gt;invoke&lt;&#x2F;code&gt; a tauri command (that
we haven’t yet implemented) to get updated state (i.e. the current counter
value). After we’re done, the app should look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setCount&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; import { useInterval } from &amp;#39;usehooks-ts&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useInterval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCount&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;  }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div className&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header className&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App-header&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;p&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello Tauri &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Bevy&lt;&#x2F;span&gt;&lt;span&gt;!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;p&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;The count is&lt;&#x2F;span&gt;&lt;span&gt;: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;}&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve added the &lt;code&gt;usehooks-ts&lt;&#x2F;code&gt; package just to make things easier (&lt;code&gt;yarn add usehooks-ts&lt;&#x2F;code&gt;). Other than that, we’ve replaced the default button that
&lt;code&gt;create-vite&lt;&#x2F;code&gt; adds and added a call to &lt;code&gt;invoke&lt;&#x2F;code&gt; the &lt;code&gt;get_state&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;We need to implement this command in the tauri code. In &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt; we
need to add a &lt;code&gt;get_state&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: tauri::State&amp;lt;BevyBridge&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This just reads the messages on the &lt;code&gt;bounded&lt;&#x2F;code&gt; queue and returns the last one. We
also need to add the command to the tauri app,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![get_state])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we now run the app we should see everything working as expected - the counter
updates based on the bevy state!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;headless-bevy-in-a-tauri-app&#x2F;counter_working.png&quot; alt=&quot;The app pulling counter updates from the bevy backend. (size: 802x632px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pushing-updates-from-bevy-to-tauri-to-react&quot;&gt;Pushing updates from bevy to tauri to react&lt;&#x2F;h2&gt;
&lt;p&gt;What about we try to push updates? To do this we can use use tauri’s
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tauri.app&#x2F;v1&#x2F;guides&#x2F;features&#x2F;events&quot;&gt;events&lt;&#x2F;a&gt; to trigger an update on
the client-side. To spawn events periodically, we can use a thread that checks
the mpsc queue periodically and raises an event with the latest value.&lt;&#x2F;p&gt;
&lt;p&gt;We can do this in the &lt;code&gt;setup&lt;&#x2F;code&gt; function in the tauri app builder in
&lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tauri::Builder::default()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; window = app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_window&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      tauri::async_runtime::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                  Some(payload) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                      window
&lt;&#x2F;span&gt;&lt;span&gt;                          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, payload)
&lt;&#x2F;span&gt;&lt;span&gt;                          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Event should be sent&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                  }
&lt;&#x2F;span&gt;&lt;span&gt;                  _ =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;              }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do once a second
&lt;&#x2F;span&gt;&lt;span&gt;              thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite a bit of code, but its similar to the command we had before - we
spawn a thread that checks the last item on the queue, and if there is something
it emits a &lt;code&gt;send_state&lt;&#x2F;code&gt; event on the main window. We can also remove the command
definition and the &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; part of the tauri app builder.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;App.tsx&lt;&#x2F;code&gt; we need to update the function so that we no longer &lt;code&gt;invoke&lt;&#x2F;code&gt;
the command, but instead should subscribe to the &lt;code&gt;send_state&lt;&#x2F;code&gt; event sent by the
thread we just spawned. Again this is a bit of code but otherwise
straightforward - most of the code is to safely unsubcribe from events event
after the app is unmounted:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;useEffect&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlisten&lt;&#x2F;span&gt;&lt;span&gt;: UnlistenFn | undefined = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;send_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setCount&lt;&#x2F;span&gt;&lt;span&gt;(event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payload &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;number);
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlisten &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unlisten&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;unlisten&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  }, []);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the app now should perform the same as before, the counter … counts!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sending-commands-back-to-bevy&quot;&gt;Sending commands back to bevy&lt;&#x2F;h2&gt;
&lt;p&gt;This is all well and good, but if we want to make something interactive then
ideally we’d be able to send input back to the app. To see how this might work
we can create a “reset” command which zeroes out the counter. Unfortunately our
current channel is setup for sending the counter from bevy to tauri, so here
we’re going to need to send data the other way.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s take the opportunity to refactor our channels and the &lt;code&gt;TauriBridge&lt;&#x2F;code&gt;
struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the struct adds a Receiver&amp;lt;()&amp;gt; field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TauriBridge(Sender&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Receiver&amp;lt;()&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now we instantiate two channels, and name them appropriately.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we can also set the `u32` typed channel as unbounded and the other
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; channel as bounded with size 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx_to_tauri, rx_from_bevy) = unbounded::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx_to_bevy, rx_from_tauri) = bounded::&amp;lt;()&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in our bevy app building code we need to update the struct declaration too
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert_resource&lt;&#x2F;span&gt;&lt;span&gt;(TauriBridge(tx_to_tauri, rx_from_tauri))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we need to add the &lt;code&gt;tx_to_bevy&lt;&#x2F;code&gt; end of the channel as part of &lt;code&gt;State&lt;&#x2F;code&gt; in
the tauri app. We already did this when we tried pulling updates in the client
side, so there isn’t anything new here. We create a struct and call &lt;code&gt;manage&lt;&#x2F;code&gt; on
the tauri app builder.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct declaration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BevyBridge(Sender&amp;lt;()&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; add as state in the tauri app builder
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;manage&lt;&#x2F;span&gt;&lt;span&gt;(BevyBridge(tx_to_bevy))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can create a command that sends an empty message to bevy to reset the
counter. We will use &lt;code&gt;send&lt;&#x2F;code&gt; rather than &lt;code&gt;try_send&lt;&#x2F;code&gt; because I don’t really care
about blocking if the queue is full:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reset_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: tauri::State&amp;lt;BevyBridge&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    state
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to send reset message to bevy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should also add this command in an &lt;code&gt;invoke_handler&lt;&#x2F;code&gt; on the tauri app builder
as we did previously.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invoke_handler&lt;&#x2F;span&gt;&lt;span&gt;(tauri::generate_handler![reset_counter])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have two more tasks - we need to add a bevy system to listen for the
messages, and add some UI in the front end to call the command.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll start with the front end. In &lt;code&gt;src&#x2F;App.tsx&lt;&#x2F;code&gt;, below the counter add a button
and the handler calls &lt;code&gt;invoke&lt;&#x2F;code&gt; to run the command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;onClick&lt;&#x2F;span&gt;&lt;span&gt;={() =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reset_counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  }}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Reset
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Clicking this button once works, but maybe avoid clicking it a second time for
now because it freezes the entire app. This is a results of us using a bounded
queue with size 1, and &lt;code&gt;send&lt;&#x2F;code&gt; instead of &lt;code&gt;try_send&lt;&#x2F;code&gt; (&lt;em&gt;shrugs in
blog-post-that-is-getting-too-long-already&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Ok, before we freeze up the app again, lets add the bevy system that handles
these requests. Actually, I’m getting super lazy, lets just add it to the
&lt;code&gt;send_counter&lt;&#x2F;code&gt; system, please don’t hate me. To do this we need to change the
function signature in &lt;code&gt;src-tauri&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_counter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tauri_bridge&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;TauriBridge&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;: ResMut&amp;lt;CounterValue&amp;gt;) 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then just need to check the receiver queue for any reset messages. At the
bottom of the &lt;code&gt;send_counter&lt;&#x2F;code&gt; function, add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; tauri_bridge.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_recv&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(_) =&amp;gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    _ =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now hitting the “reset” button in the app causes the counter to go back to 0. I
guess in reality somebody could tap at like 500 clicks per second and fill up
the queue, resulting in some slightly weird jerkiness in the counter. We can
mitigate most of this by just adding a few extra items to the queue capacity:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; used  to be 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx_to_bevy, rx_from_tauri) = bounded::&amp;lt;()&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I’m not sure why I did this, really. It seemed like an intersting idea and it
kind of “worked” but wow this involves a lot of code. I’m sure there would be a
better way to do this if I stopped and thought, who knows, maybe then I’d also
be able to think of some reasons why this would be a good idea!&lt;&#x2F;p&gt;
&lt;p&gt;The code for this is available &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;tauri-plus-bevy&quot;&gt;on github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Connecting Players with Firebase and Unity [Part 2]</title>
        <published>2017-02-23T00:00:00+00:00</published>
        <updated>2017-02-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/firebase-and-unity-part-2/"/>
        <id>https://willhart.io/post/firebase-and-unity-part-2/</id>
        
        <content type="html" xml:base="https://willhart.io/post/firebase-and-unity-part-2/">&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;firebase-and-unity-part-1&quot;&gt;previous part&lt;&#x2F;a&gt; we looked at getting a
firebase database set up and importing the package into Unity. In this part we
are actually going to build out the “game”. If you don’t recall, in this example
we are going to have a button and a click counter stored on the server. It isn’t
going to be a particularly exciting game, but should be enough to get us started
on the real-time database path.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A reminder again as well that Firebase only has official support for
Android&#x2F;iOS build targets. I’ve managed to be a bit hacky and get it working
in standalone, but please help me badger firebase directly for official
standalone support!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;creating-a-ui&quot;&gt;Creating a UI&lt;&#x2F;h2&gt;
&lt;p&gt;Our first step is to build up a simple UGUI interface. As I said in the first
part, I’m going to assume you know how to do this and gloss over it fairly
quickly.&lt;&#x2F;p&gt;
&lt;p&gt;I did these steps to get the UI setup:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;In the Lighting panel, remove the skybox&lt;&#x2F;li&gt;
&lt;li&gt;On the camera inspector, set the Clear Flags to Solid Colour and choose a
background colour&lt;&#x2F;li&gt;
&lt;li&gt;Create a UI &lt;code&gt;Canvas&lt;&#x2F;code&gt; in the scene&lt;&#x2F;li&gt;
&lt;li&gt;Add a &lt;code&gt;Button&lt;&#x2F;code&gt; and &lt;code&gt;Text&lt;&#x2F;code&gt; to the canvas and mess about with layout anchors
and text settings a bit so it looks like this:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;clickme.png&quot; alt=&quot;The resulting Unity Scene&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-firebase-script&quot;&gt;Creating a Firebase script&lt;&#x2F;h2&gt;
&lt;p&gt;The next step is to create a C# script for handling the firebase interaction. I
named it &lt;code&gt;FirebaseClickHandler&lt;&#x2F;code&gt;, and started off with the following empty class
definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;FirebaseTest
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Dependencies
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;Firebase;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;Firebase.Database;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;Firebase.Unity.Editor;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;UnityEngine;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span&gt;UnityEngine.UI;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endregion
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FirebaseClickHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerializeField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterText&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterText&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;N0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of this is just standard C# setup for a MonoBehaviour, apart from the two
&lt;code&gt;using&lt;&#x2F;code&gt; statements for &lt;code&gt;Firebase&lt;&#x2F;code&gt; and &lt;code&gt;Firebase.Unity.Editor&lt;&#x2F;code&gt;. We are storing a
reference to the &lt;code&gt;Text&lt;&#x2F;code&gt; UI element we created earlier, and in the &lt;code&gt;Update&lt;&#x2F;code&gt;
method we just set the value of the Text to our counter.&lt;&#x2F;p&gt;
&lt;p&gt;If we add the script to our &lt;code&gt;Canvas&lt;&#x2F;code&gt;, hook up the references to the text object
and hit play at this point, our counter should just read &lt;code&gt;0&lt;&#x2F;code&gt; as in our
screenshot above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-count-from-the-database&quot;&gt;Getting the count from the database&lt;&#x2F;h2&gt;
&lt;p&gt;The next thing we want to do is connect to the database and get the current
count. We can connect in the editor by writing the following in Awake:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Awake&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetEditorDatabaseUrl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So here we are setting an Editor URL for testing, which is just our firebase URL
that we can see in the firebase console.&lt;&#x2F;p&gt;
&lt;p&gt;To read and write data, firebase has the concept of &lt;code&gt;references&lt;&#x2F;code&gt;. These are
essentially URLs which point to specific paths or data in the database and can
be used as a notification when the linked data changes, or as a way to read or
write data on that path. Add a private field at the top of our class (below
&lt;code&gt;_count&lt;&#x2F;code&gt;) to store the database reference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;DatabaseReference &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the same time, why not change the default value of &lt;code&gt;_count&lt;&#x2F;code&gt; to -1, so that
we can see when our data is loaded from the database more easily. We can then
replace the &lt;code&gt;Awake&lt;&#x2F;code&gt; method with this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Awake&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetEditorDatabaseUrl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseDatabase&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetReference&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueChanged &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnCountUpdated&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OnCountUpdated&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sender&lt;&#x2F;span&gt;&lt;span&gt;, ValueChangedEventArgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new System.NotImplementedException();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we run the code now, we should get a &lt;code&gt;NotImplementedException&lt;&#x2F;code&gt; thrown, so our
&lt;code&gt;OnCountUpdated&lt;&#x2F;code&gt; method is being called when we “connect” our reference to the
database!&lt;&#x2F;p&gt;
&lt;p&gt;Let’s implement the method now, so that we can display our value in the text. In
the body of the &lt;code&gt;OnCountUpdated&lt;&#x2F;code&gt; method, put the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DatabaseError &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LogError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DatabaseError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Snapshot &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Snapshot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Snapshot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We check for an error, then set the value of our &lt;code&gt;_count&lt;&#x2F;code&gt; according to what the
database value returns. The return value is in the &lt;code&gt;Snapshot&lt;&#x2F;code&gt; variable. Note
that we check for &lt;code&gt;e.Snapshot == null&lt;&#x2F;code&gt; - this is important because if there
isn’t any data at the path, &lt;code&gt;e.Snapshot&lt;&#x2F;code&gt; will be null - this lets us set a
default.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; “Empty” database URLs will return null&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you hit play in the editor, you should see the a bit of a pause, then the
text value should be set to 0 as there isn’t currently anything at the
&lt;code&gt;&#x2F;counter&lt;&#x2F;code&gt; path:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;browsefirebase.png&quot; alt=&quot;The counter path is currently empty&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While you are here, play around a bit - you can edit values in the database
through your browser. With the application running, change the count value to
some random numbers - the text field in the Unity game should update
automatically!&lt;&#x2F;p&gt;
&lt;p&gt;OK, I think we are now ready to move on to writing the counter value to the
database.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-a-value-to-the-database&quot;&gt;Writing a value to the database&lt;&#x2F;h2&gt;
&lt;p&gt;To write a value to the database, we use a similar approach to reading - i.e.
call a method on the &lt;code&gt;DatabaseReference&lt;&#x2F;code&gt; we created before. Add the following
public method to our &lt;code&gt;FirebaseClickHandler&lt;&#x2F;code&gt; class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IncrementClickCounter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetValueAsync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Link this to our &lt;code&gt;Button&lt;&#x2F;code&gt; via the click handler.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;inspector.png&quot; alt=&quot;Hook up the method in the click handler&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This bit is fun :) Tweak your windows so you can see the Unity game and the
firebase console side by side. Run the game and click the button. Now as we are
subscribing an event in &lt;code&gt;Awake&lt;&#x2F;code&gt;, we probably need to make sure that it gets
unsubscribed &lt;code&gt;OnDestroy&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;OnDestroy&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueChanged &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OnCountUpdated&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this stage, we have a workable system, albeit with two, fairly major issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If you build and run the game, you get a DLL Not Found exception&lt;&#x2F;li&gt;
&lt;li&gt;As our &lt;code&gt;IncrementClickCounter&lt;&#x2F;code&gt; uses our local value of count and adds 1, then if 100 people update the database at exactly the same time, then we may lose some of the increments (more below)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We’ll start by addressing point #2, by using &lt;code&gt;Transactions&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transactions&quot;&gt;Transactions&lt;&#x2F;h2&gt;
&lt;p&gt;To clarify the issue - we are using our local value of &lt;code&gt;_count&lt;&#x2F;code&gt;, for example
&lt;code&gt;_count = 6&lt;&#x2F;code&gt; to send a &lt;code&gt;SetValueAsync&lt;&#x2F;code&gt; request with the value &lt;code&gt;_count + 1&lt;&#x2F;code&gt;. If
tonnes of people do this request at the same time (say 100 people try to set it
to 7) then our database will say &lt;code&gt;counter = 7&lt;&#x2F;code&gt; when what we actually want it to
say is counter = 106 (it was originally 6 and 100 people want to increment it.
We can manage this kind of situation by using a transaction.&lt;&#x2F;p&gt;
&lt;p&gt;A transaction in firebase runs from a &lt;code&gt;Reference&lt;&#x2F;code&gt; and receives the current data
value as &lt;code&gt;MutableData&lt;&#x2F;code&gt;. It “returns” the new data that should be set in the
database. Lets replace our &lt;code&gt;IncrementClickCounter&lt;&#x2F;code&gt; method with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IncrementClickCounter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_counterRef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RunTransaction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span&gt;= \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_count &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TransactionResult&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ContinueWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ToString&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Its a tiny bit more code, but now our counter should be protected against race
conditions!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-for-desktop&quot;&gt;Building for Desktop&lt;&#x2F;h2&gt;
&lt;p&gt;Now a few paragraphs ago, I glossed over a &lt;code&gt;DLLNotFound&lt;&#x2F;code&gt; exception above when we
ran the built version of our game. This is due to no official support for Unity
Standalone. If you create a development build and look at the debug logs, this
is because and &lt;code&gt;App.dll&lt;&#x2F;code&gt; is missing. Checking this is in my plugins directory,
but only for Android, iOS and x86_64 builds. By changing the standalone
architecture to &lt;code&gt;x86_64&lt;&#x2F;code&gt; I was able to get this file included as part of the
build, and compile and run our example game.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-2&#x2F;buildsettings.png&quot; alt=&quot;Using x86_64 architecture&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also had to modify the connection script in &lt;code&gt;Awake&lt;&#x2F;code&gt;, to set the database path
explicitly. There may be a better way to load in config, but this worked for me
as a quick hack:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;UNITY_EDITOR
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetEditorDatabaseUrl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FirebaseApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DefaultInstance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Options&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DatabaseUrl &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    new System.Uri(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;wh-unity-test.firebaseio.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I haven’t experimented much, but I suspect that a lot of the extra features of
firebase such as authentication may be unsupported in Standalone mode. This does
leave our firebase data open to abuse. We can mitigate this a little bit by
doing some additional validation in our database rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.validate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;newData.isNumber() &amp;amp;&amp;amp; newData.val() == data.val() + 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that the update will fail unless we are incrementing by one, which
should prevent people clearing or otherwise playing with the counter too much,
but at the end of the day without authentication we are a little open to
exploitation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h2&gt;
&lt;p&gt;I really like firebase. I’ve used it in some web apps and have been very
pleasantly surprised, and I’d be stoked to be able to base some features on it
in a Standalone build of a Unity game. If you feel the same way, please get in
touch with firebase and tell them!&lt;&#x2F;p&gt;
&lt;p&gt;Otherwise, I hope this has given you some insight into how firebase can be used
and setup!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Connecting Players with Firebase and Unity [Part 1]</title>
        <published>2017-02-19T00:00:00+00:00</published>
        <updated>2017-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/firebase-and-unity-part-1/"/>
        <id>https://willhart.io/post/firebase-and-unity-part-1/</id>
        
        <content type="html" xml:base="https://willhart.io/post/firebase-and-unity-part-1/">&lt;h2 id=&quot;all-your-firebases-are-belong-to-us&quot;&gt;All your firebases are belong to us?&lt;&#x2F;h2&gt;
&lt;p&gt;Playing around with a React web app recently I was working through ideas for the
app backend, and after weighing up a bunch of different options I decided to
give &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;&quot;&gt;Firebase&lt;&#x2F;a&gt; a go so I could concentrate on the
frontend. I’d played with firebase a while back (before it was acquired by
google) but it had never really clicked with me. That was before I used React
for web&#x2F;mobile apps, and I quickly found that firebase is &lt;em&gt;made&lt;&#x2F;em&gt; for the
React&#x2F;Redux architecture; the first time I changed something on my PC browser
and it immediately popped up on my mobile browser (without any special code from
me) I was hooked.&lt;&#x2F;p&gt;
&lt;p&gt;In case you aren’t aware, firebase is a bunch of different things, but the
interesting features for me are it provides a user logins, a real-time[1]
JSON-like database backend with fine grained read&#x2F;write permissions, and
integrated file storage. The interface is really easy, all data is just accessed
by URLs, like (&lt;code&gt;&#x2F;myfirebaseurl&#x2F;users&#x2F;1234&#x2F;username&lt;&#x2F;code&gt;). It has APIs for
JavaScript, and … wait, did they just say &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;unity&#x2F;setup&quot;&gt;Unity
support&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; Before I get any further: currently firebase only supports Android
and iOS builds by default. If you stick around until the end, I’ve managed to
get it working in standalone builds but it is a little hacky. The best thing I
can suggest is to try to badger firebase through twitter or (shudder) google
groups to add support for Standalone builds!&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;d&#x2F;topic&#x2F;firebase-talk&#x2F;XLaACoVjysc&#x2F;discussion&quot;&gt;asked for an
update&lt;&#x2F;a&gt;
on the google groups page, but at the time of writing this I haven’t heard
anything back.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Suddenly, gears started grinding in my head, shaking off the piles of rust that
had accumulated. Visions of real-time backend features, like the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;arrowheadgamestudios.com&#x2F;games&#x2F;helldivers&#x2F;helldivers-war-statistics&#x2F;&quot;&gt;global
statistics&lt;&#x2F;a&gt;
from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;arrowheadgamestudios.com&#x2F;games&#x2F;helldivers&#x2F;&quot;&gt;Helldivers&lt;&#x2F;a&gt; swam before
my eyes. Or, what about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.warcubegame.com&#x2F;&quot;&gt;Warcube’s&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Chman&#x2F;Moments&quot;&gt;gif recording
feature&lt;&#x2F;a&gt;, with automatic uploads so that they
can be featured on a game’s website in real-time. When you start to go down this
path, there are lots of ways to make players feel connected while playing your
game.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, it isn’t all roses. During development of the web app I was prompted
to tweet this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;tweet.png&quot; alt=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;wlhart&#x2F;status&#x2F;824828033970212865&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is a bit of learning curve using firebase, but its not insurmountable, and
I was pretty impressed to see one of the firebase staff find the tweet and ask
me for further feedback… thumbs up for good community engagement!&lt;&#x2F;p&gt;
&lt;p&gt;So, that aside, I present to you - a basic introduction in creating real-time
“social” features in your Unity games using Google’s Firebase backend (in two
parts)! We’re going to create a very simple stats feature, which counts the
number of mouse clicks and saves it globally so all users can see it in
real-time. I’m going to assume you are comfortable with Unity so will gloss over
the Unity basics for the sake of brevity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;setting-up-firebase&quot;&gt;Setting up Firebase&lt;&#x2F;h3&gt;
&lt;p&gt;Firebase at the moment has a pretty decent free tier, which gives you a bunch of
storage and bandwidth. Go ahead and sign up now if you are following along. Once
you are signed in, create a new application following their prompts. I’m going
to call mine &lt;code&gt;wilsk_unity_test&lt;&#x2F;code&gt;, but you can call yours whatever you want (see
note 2)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;create_new_project_firebase.png&quot; alt=&quot;Create a new firebase application&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once you have created the database, click the “Database” link on the left hand
menu, here you can see your database contents. It might look something like
this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;firebase_setup.png&quot; alt=&quot;The initial database contents (size: 1098x293px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can see the firebase URL - &lt;code&gt;http:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;&lt;&#x2F;code&gt; and the root
of the database, &lt;code&gt;wh-unity-test&lt;&#x2F;code&gt; with a value of &lt;code&gt;null&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next we need to set up some database permissions. These control who can read or
write what data, and also validation rules for the data. Click on the &lt;code&gt;RULES&lt;&#x2F;code&gt; tab
above the database URL. You should see a text box containing the default rules
in JSON format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.read&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auth != null&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.write&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auth != null&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These rules just specify that anybody who is logged in can read or write
anything. For now we don’t want any real restrictions, but we also don’t want a
massive free for all. Lets say we want to be able to increment a counter, and
everything else should be rejected. Paste the following into the text box,
replacing the current rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.validate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;newData.isNumber()&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.read&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.write&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks a little intimidating, but what it does is quite straightforward.
Basically for the &lt;code&gt;counter&lt;&#x2F;code&gt; path on the database, i.e. if we access
&lt;code&gt;http:&#x2F;&#x2F;wh-unity-test.firebaseio.com&#x2F;counter&lt;&#x2F;code&gt;, it allows read and write by
default. When we write to the path, any value is accepted as long as it is a
number, this is the &lt;code&gt;newData.isNumber()&lt;&#x2F;code&gt; part. Anything not specified in the
rules is rejected by default.&lt;&#x2F;p&gt;
&lt;p&gt;You will probably notice a “Simulator” button on the top right of the text box.
This lets us try out our rules before saving them. Have a play and verify that
the rules prevent access outside of &lt;code&gt;counter&lt;&#x2F;code&gt; and reject attempts to write text or
other data to the &lt;code&gt;&#x2F;counter&lt;&#x2F;code&gt; path.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;rule_simulator-1.png&quot; alt=&quot;The Firebase rules simulator in action (size: 1186x631px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you are happy, hit &lt;code&gt;PUBLISH&lt;&#x2F;code&gt; and our database setup is done. We’ll come
back to the database in a little while.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setting-up-unity&quot;&gt;Setting up Unity&lt;&#x2F;h3&gt;
&lt;p&gt;The next thing is to get Unity setup. Download the Unity SDK from
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;unity&#x2F;setup&quot;&gt;https:&#x2F;&#x2F;firebase.google.com&#x2F;docs&#x2F;unity&#x2F;setup&lt;&#x2F;a&gt;, the package comes with a bunch of
&lt;code&gt;.unitypackage&lt;&#x2F;code&gt; files which contain the code for different feature sets.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;firebase_unity_package_contents.png&quot; alt=&quot;The Contents of the Firebase Unity Package&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lets start a new Unity project and import the &lt;code&gt;FirebaseDatabase.unitypackage&lt;&#x2F;code&gt;
package. We’re going to skip authentication for now as it makes life a bit more
complicated (see note 3). You should see something like this screen when you
drop the package in:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;firebase_package_import.png&quot; alt=&quot;Importing the Firebase Database package&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You might get a warning about having the wrong SDK version. Just follow the
instructions on screen to configure the project correctly for firebase.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;firebase-and-unity-part-1&#x2F;sdk_prompt.png&quot; alt=&quot;The SDK version may need to be updated&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ready-to-rock&quot;&gt;Ready to rock&lt;&#x2F;h3&gt;
&lt;p&gt;OK, with that I think we are ready to start building up our application. Stay
tuned for &lt;a href=&quot;&#x2F;post&#x2F;firebase-and-unity-part-2&quot;&gt;part 2&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Real-time as in you can subscribe to a particular database field, and when
anybody updates the value all subscribers get notified. Think a chat site,
where new messages are automatically pushed to other users as soon as they
are posted.&lt;&#x2F;li&gt;
&lt;li&gt;If the name you pick is already taken then you will end up with a short
series of random characters after the name you pick.&lt;&#x2F;li&gt;
&lt;li&gt;Also, I’m not even sure that authentication &#x2F; authorisation is possible in
standalone builds with the current library.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Making game assets using OpenSCAD</title>
        <published>2017-02-12T00:00:00+00:00</published>
        <updated>2017-02-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/game-assets-using-openscad/"/>
        <id>https://willhart.io/post/game-assets-using-openscad/</id>
        
        <content type="html" xml:base="https://willhart.io/post/game-assets-using-openscad/">&lt;p&gt;In my day job, I have a task to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.osapublishing.org&#x2F;abstract.cfm?uri=BGPPM-2018-JTh4A.2&quot;&gt;design some 3D printed parts in a variety of
repeating
patterns&lt;&#x2F;a&gt;,
but with each part being just slightly different. I didn’t really want to mess
about in SolidWorks making them in all sorts of different sizes and then
maintaining them every time the design specs changed. I decided what I really
wanted was a procedural CAD program so I could code the outputs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;header.png&quot; alt=&quot;A preview of what we are going to make in this tutorial (size: 1918x768px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After some messing about I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.openscad.org&#x2F;&quot;&gt;OpenSCAD&lt;&#x2F;a&gt; which is
billed as “the Programmer’s Solid 3D CAD modeller”. Basically you can script 3D
models using basic boolean operations like &lt;code&gt;union&lt;&#x2F;code&gt;, &lt;code&gt;difference&lt;&#x2F;code&gt; and &lt;code&gt;intersect&lt;&#x2F;code&gt;
as well as primitive shapes like &lt;code&gt;cube&lt;&#x2F;code&gt;, &lt;code&gt;cylinder&lt;&#x2F;code&gt; and &lt;code&gt;sphere&lt;&#x2F;code&gt;. The language
allows basic scripting including variables, &lt;code&gt;for&lt;&#x2F;code&gt; and &lt;code&gt;if&lt;&#x2F;code&gt; control statements. A
minimal example is a cube, which you make like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;a_basic_openscad_cube.png&quot; alt=&quot;A basic OpenSCAD box (size: 785x510px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wondered if I could use this as a really simple way to make game assets,
particularly building up a lot of basic shapes very quickly. I think the
technique is naturally suited to making things like castle walls which are
basically a &lt;code&gt;union&lt;&#x2F;code&gt; of lots of primitive shapes. So, lets begin!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blocking-out-the-basic-structure&quot;&gt;Blocking out the basic structure&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, we can block out the structure of our wall. I’ll just specify some
proportions, then use a scale value to &lt;code&gt;scale&lt;&#x2F;code&gt; it up to our preferred size:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are specifying a base wall is 1 unit long, 0.3 units thick and 0.8 units
tall. We also want to scale the whole wall up by 10 units (A “unit” in OpenSCAD
is one millimetre, but that doesn’t really matter here). We can scale and draw
our cube the same was as before, except now we use the variable values instead
of hard coding:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;making-crenelations&quot;&gt;Making crenelations&lt;&#x2F;h2&gt;
&lt;p&gt;The next thing a castle wall needs is crenelation, something for our archers to
hide behind. We need a few variables here…&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;* cren_period;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A diagram may help:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;crennelation_dimensions.png&quot; alt=&quot;The attributes of crenellations&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;period&lt;&#x2F;em&gt; is the length of one “on and off” crenelation, the height is the
height of a crenelation and the duty cycle is the percentage of on vs off of
the crenellations, so &lt;code&gt;0.5&lt;&#x2F;code&gt; here indicates for each period 50% is crenelation
and 50% is air. For simplicity we are going to assume that crenelations are
cubes, so we can define the thickness as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can use a &lt;code&gt;for&lt;&#x2F;code&gt;, &lt;code&gt;translate&lt;&#x2F;code&gt; and &lt;code&gt;cube&lt;&#x2F;code&gt; to draw our crenelations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;(cren_thickness);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first line is just the notation for a &lt;code&gt;for&lt;&#x2F;code&gt; loop in OpenSCAD. It loops from
&lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;wall_length - cren_period&lt;&#x2F;code&gt;, taking steps of &lt;code&gt;cren_period&lt;&#x2F;code&gt;. By default, the
cube will be drawn at &lt;code&gt;(0,0,0)&lt;&#x2F;code&gt;, but actually we want them to be placed on top of
the wall. To achieve this we use a &lt;code&gt;translate&lt;&#x2F;code&gt; statement to wrap our &lt;code&gt;cube&lt;&#x2F;code&gt;
primitive drawing statement. We provide the x, y and z coordinates where we want
our cube to be drawn.&lt;&#x2F;p&gt;
&lt;p&gt;To join the crenelations to our base wall, we can wrap the whole lot in a &lt;code&gt;union&lt;&#x2F;code&gt;
statement. Our model code now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelations
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which produces:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;model_with_crennelation.png&quot; alt=&quot;The first attempt at a castle wall (size: 477x440px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reusing-our-wall&quot;&gt;Reusing our wall&lt;&#x2F;h2&gt;
&lt;p&gt;Now we have a fairly basic castle wall, but it would be really great if we could
draw a bunch of wall really easily. Luckily OpenSCAD provides &lt;code&gt;modules&lt;&#x2F;code&gt;, which are
essentially functions for this purpose. We can wrap our wall drawing code in a
module like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; our wall drawing code from above in here,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; except for the &amp;quot;scale&amp;quot; command
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll also move the &lt;code&gt;scale&lt;&#x2F;code&gt; out of the module, as we want to wrap our entire castle
in this later on, not just wall pieces one at a time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; You can provide function arguments to modules, but for simplicity I’m
just letting modules access the global variables declared at the top of the file&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We can then draw multiple wall segments using a for loop like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;num_walls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;multiple_walls_in_loop.png&quot; alt=&quot;Repeating wall sections using a module (size: 504x314px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We might also want to draw walls at different angles, so lets wrap that code in
a module with a couple of arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only new part here is the &lt;code&gt;rotate&lt;&#x2F;code&gt; command, which rotates everything by the
given x, y and z euler angles. Now we have this command, we can easily draw an
entire enclosed wall inside another module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length,
&lt;&#x2F;span&gt;&lt;span&gt;            num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is draw four different &lt;code&gt;longWalls&lt;&#x2F;code&gt;, with the correct offsets and
rotations. We can then draw a wall enclosure by writing&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;enclosed_wall.png&quot; alt=&quot;Repeating wall sections to draw a closed wall (size: 641x453px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Phew, that was actually “relatively” easy! Of course that’s only the basics, and
we still would need to export to STL, then do UV unwrapping, texturing and so on
in our modelling program. The main advantage of this kind of approach is that it
is really easy to generate a whole range of different geometry very fast.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2F;strong&gt; For my day job, I built a command line tool that can generate tonnes
of different geometry and export to STL at once. In the game dev world, this
kind of approach could be used to generate castles of all different sizes in a
batch process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Of course, our castle above lacks a whole lot of things like a gate, a keep and
towers… and it is debatable how useful this technique will be once things get
a lot more complicated, but its an interesting experiment!&lt;&#x2F;p&gt;
&lt;p&gt;Here is something I put together with maybe twenty minutes more effort (you can
see the code for it below):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;game-assets-using-openscad&#x2F;castle.png&quot; alt=&quot;An example castle built using OpenSCAD (size: 521x404px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; castle.scad
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    walls_to_draw = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DarkGray&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(walls_to_draw);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(y = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;                    x * walls_to_draw * wall_length - x * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness,
&lt;&#x2F;span&gt;&lt;span&gt;                    y * walls_to_draw * wall_length - y * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MediumSeaGreen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* walls_to_draw * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DarkGoldenrod&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cylinder&lt;&#x2F;span&gt;&lt;span&gt;(h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.5 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height, r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, $fn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Crimson&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;difference&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEntrance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* num_walls * wall_length);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawTower&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dim_scale&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tower_height&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    dim = dim_scale * wall_thickness;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;difference&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([dim, dim, tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([dim, dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(dim_scale * wall_thickness, tower_height);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.45 &lt;&#x2F;span&gt;&lt;span&gt;* dim, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.01 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.45 &lt;&#x2F;span&gt;&lt;span&gt;* dim, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.01 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* dim, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* tower_height]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEntrance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_offset&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x = x_offset - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length;
&lt;&#x2F;span&gt;&lt;span&gt;    y = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness;
&lt;&#x2F;span&gt;&lt;span&gt;    z = -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, y, z]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x_offset, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.1 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;* wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cylinder&lt;&#x2F;span&gt;&lt;span&gt;(h = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2 &lt;&#x2F;span&gt;&lt;span&gt;* wall_thickness, r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4 &lt;&#x2F;span&gt;&lt;span&gt;* wall_length, $fn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, centre = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(wall_length, wall_height);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawCrennelations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cren_length&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cren_z_offset&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : cren_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, cren_z_offset]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; castle_wall.scad
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; scale the wall up
&lt;&#x2F;span&gt;&lt;span&gt;wall_scale = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set wall proportions
&lt;&#x2F;span&gt;&lt;span&gt;wall_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_thickness = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;wall_height = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelation properties
&lt;&#x2F;span&gt;&lt;span&gt;cren_duty_cycle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_period = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cren_height = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;cren_thickness = cren_duty_cycle * cren_period;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;(wall_scale) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawEnclosedWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([num_walls * wall_length, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, num_walls * wall_length, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;270&lt;&#x2F;span&gt;&lt;span&gt;, num_walls);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawLongWall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_walls&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, rotation]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: wall_length : (num_walls - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * wall_length]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;drawWall&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; wall base
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([wall_length, wall_thickness, wall_height]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; crenelations
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(x = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: cren_period : wall_length - cren_period]) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;translate&lt;&#x2F;span&gt;&lt;span&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, wall_height]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cube&lt;&#x2F;span&gt;&lt;span&gt;([cren_duty_cycle * cren_period, cren_thickness, cren_height]);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Perils of Unity&#x27;s execution order</title>
        <published>2017-02-05T00:00:00+00:00</published>
        <updated>2017-02-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/the-perils-of-unitys-execution-order/"/>
        <id>https://willhart.io/post/the-perils-of-unitys-execution-order/</id>
        
        <content type="html" xml:base="https://willhart.io/post/the-perils-of-unitys-execution-order/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;the-perils-of-unitys-execution-order&#x2F;execution_order.png&quot; alt=&quot;Testing Unity’s script execution order&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I came across an interesting problem when I was posting about our &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-1&quot;&gt;Zenobit
ECS&lt;&#x2F;a&gt; a while back. In our ECS I
had noticed that as when we retrieve a list of Components from our ECS engine
(say a list of “attack” components), they are always in the same order. This
meant there was the potential for some sort of bias to occur when resolving
attacks. For instance, entities that attacked earlier in each Update loop were
at an advantage if it meant that others were killed before they could fight
back.&lt;&#x2F;p&gt;
&lt;p&gt;As I was thinking about how this would work in Unity’s preferred architecture, I
realised I didn’t really know much about how Unity resolves its “order of
execution” of scripts by default. You can set the order that Mono Behaviours are
executed in the “Script Execution Order” (or SEO) settings panel, but I wasn’t
really clear what happened if you scripts weren’t in the SEO panel. Was this a
potential source of “hidden” bias or errors in Unity code? (There is only one
way to find out!)&lt;&#x2F;p&gt;
&lt;p&gt;Unity’s documentation on Script Execution Order is… well not great. It
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.unity3d.com&#x2F;Manual&#x2F;class-ScriptExecution.html&quot;&gt;contains the following
line&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, the Awake, OnEnable and Update functions of different scripts are
called in the order the &lt;strong&gt;scripts&lt;&#x2F;strong&gt; are loaded (which is arbitrary). However,
it is possible to modify this order using the Script Execution Order settings&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The emphasis is mine - the word “scripts” is highly ambiguous, and is not a C#
term. By script they could either mean the &lt;code&gt;Type&lt;&#x2F;code&gt;, i.e. &lt;code&gt;typeof(MyClass)&lt;&#x2F;code&gt; or an
instance, &lt;code&gt;var instance = gameObject.AddComponent(MyClass)&lt;&#x2F;code&gt;. Even after writing
this post, I still don’t really know what they mean.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-could-possibly-go-wrong&quot;&gt;What could possibly go wrong?&lt;&#x2F;h2&gt;
&lt;p&gt;Why does the distinction matter? Well picture a scenario, similar to the ranged
combat example provided in &lt;a href=&quot;&#x2F;zenobits-unity-ecs-part-3&quot;&gt;part 3 of my ECS
series&lt;&#x2F;a&gt;. You have two &lt;code&gt;GameObject&lt;&#x2F;code&gt;s, each can attack
the other game object, and it can also die if it is attacked. A simple
implementation, where we have a reference to the other game object &lt;code&gt;enemy&lt;&#x2F;code&gt; looks
like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Attack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem here is fairly clear - whoever attacks first, wins. If the attack
code on one game object is always executed first, then it will &lt;em&gt;always&lt;&#x2F;em&gt; win the
combat. (In our ECS, this would mean older entities would always win combat as
they are at the top of the list).&lt;&#x2F;p&gt;
&lt;p&gt;To fix this, we could add a second MonoBehaviour, a &lt;code&gt;Death&lt;&#x2F;code&gt; component which
separately removes dead enemies. Our implementation now looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Attack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetComponent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;Death&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsDead &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Death &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsDead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IsDead&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gameObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, under this approach, the outcome still depends on the order the scripts
are called in. Consider what happens if the execution order is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;span&gt;Object B &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;span&gt;Object B &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should result in both of the objects dying as they attack, then check for
death. But what happens if the following occurs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;span&gt;Object A &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;span&gt;*Object B &amp;gt;&amp;gt; Death
&lt;&#x2F;span&gt;&lt;span&gt;*Object B &amp;gt;&amp;gt; Attack
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the order the Components are Updated on Object B is now switched. Now
Object B dies before it can attack! Object A always wins and Object B always
dies, and once again there is a benefit in being higher in the game object
execution priority.&lt;&#x2F;p&gt;
&lt;p&gt;But can this ever happen? What does Unity actually do where we don’t specify a
script execution order? What order are components called in, and how does Unity
work out which GameObject to Update first?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mapping-unity-s-execution-order&quot;&gt;Mapping Unity’s Execution Order&lt;&#x2F;h2&gt;
&lt;p&gt;Lets do a little digging. If I open up Unity and Visual Studio, I can make a
simple script to find out what Unity does under the hood:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TestA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InstanceCount &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Awake&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;InstanceCount&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FRAME &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frameCount &lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; INSTANCE &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script just increments a counter each time we add a new instance of the
class, then logs the frame number, instance number and class name in the
&lt;code&gt;Update&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;p&gt;I made a duplicate of this script, called &lt;code&gt;TestB&lt;&#x2F;code&gt;. In an empty scene, I created
a prefab from an empty game object with the &lt;code&gt;TestA&lt;&#x2F;code&gt; and &lt;code&gt;TestB&lt;&#x2F;code&gt; scripts attached
(&lt;code&gt;TestA&lt;&#x2F;code&gt; was above &lt;code&gt;TestB&lt;&#x2F;code&gt; in the hierarchy), and left one instance in the
scene. When I hit play, I got the following logs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 2 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 2 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is fairly straightforward. The execution order is the same every frame.&lt;&#x2F;p&gt;
&lt;p&gt;What if we duplicate the game object, so we now have two objects, each with the
two scripts attached?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 1 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 1 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 2 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 2 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 3 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 1 INSTANCE 3 TestA
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Ruh roh&lt;&#x2F;em&gt;… the order of execution on the second game object is switched - B,A
versus A,B on the first object! Maybe Unity just wanted me to spell out ABBA? In
fact, adding more game objects seems to repeat this pattern (ABBA ABBA ABBA),
although once I got (BAAB BAAB BAAB). So… um - what are the rules here? To be
honest, I have no idea, so I guess we just move on?&lt;&#x2F;p&gt;
&lt;p&gt;Lets set the difficulty level to &lt;em&gt;Ultra Nightmare&lt;&#x2F;em&gt; by Instantiating a new prefab
every frame. I had to hit play and pause again really quickly to prevent too
much console spam… but now the log looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 8 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 1 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 1 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 2 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 2 TestB
&lt;&#x2F;span&gt;&lt;span&gt;... many more lines
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 7 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 8 INSTANCE 7 TestB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And a few frames later&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FRAME 20 INSTANCE 0 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 0 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 1 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 1 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 2 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 2 TestB
&lt;&#x2F;span&gt;&lt;span&gt;... many more lines
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 18 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 18 TestB
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 19 TestA
&lt;&#x2F;span&gt;&lt;span&gt;FRAME 20 INSTANCE 19 TestB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Something really strange has happened - the instantiated objects always follow
the same pattern, A then B, while the editor placed game object executes B then
A.&lt;&#x2F;p&gt;
&lt;p&gt;Double ruh roh. I’m really confused now. I’m assuming something like this is
happening:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The execution order of MonoBehaviours attached to each game object is
different depending on whether the GameObject was placed in the scene or
Instantiated at run time&lt;&#x2F;li&gt;
&lt;li&gt;The behaviour of execution order for editor placed objects is different from
instantiated objects&lt;&#x2F;li&gt;
&lt;li&gt;The game objects appear to be updated in the order in which they were
instantiated&lt;&#x2F;li&gt;
&lt;li&gt;The hierarchy has no impact on execution order (verify this by pausing the
game and rearranging the hierarchy)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I’m not even sure what to make of this - I think its best to just consider that
by default Unity executes Update methods completely arbitrarily, but usually
grouped by GameObject.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-does-this-matter-and-can-it-be-fixed&quot;&gt;Why does this matter, and can it be fixed?&lt;&#x2F;h2&gt;
&lt;p&gt;If we execute all of the &lt;code&gt;Attack.Update()&lt;&#x2F;code&gt; calls, then all of the
&lt;code&gt;Death.Update()&lt;&#x2F;code&gt; calls, then both game objects will die every time they fight -
they both attack the other object in their &lt;code&gt;Attack&lt;&#x2F;code&gt; instance, then they both die
in the &lt;code&gt;Death&lt;&#x2F;code&gt; instance.&lt;&#x2F;p&gt;
&lt;p&gt;It definitely isn’t a terminal problem - we can achieve explicitly set Script
Execution Order or perhaps do death removal check in &lt;code&gt;LateUpdate&lt;&#x2F;code&gt;. These
solutions both work, and are relatively straightforward to implement, but the
danger lies in the fact that the default Unity implementation relies on
&lt;em&gt;implicit&lt;&#x2F;em&gt; and seemingly arbitrary execution order.&lt;&#x2F;p&gt;
&lt;p&gt;There is the potential for a whole raft of insidious, unexpected and difficult
to debug logic errors to crop up, way beyond the complexity of our contrived
attack&#x2F;die example here. This potential is made worse by the fact that the
default Unity behaviour appears to vary based on factors such as instantiation
order and instantiation method. To be absolutely certain of our execution order
we may need to &lt;strong&gt;set script execution order on every single MonoBehaviour in our
game&lt;&#x2F;strong&gt;, which seems to me to be a particular kind of hell.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I hope this post has in some way helped you avoid some insidious, hard
to debug issues in your Unity Adventure!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zenobit&#x27;s Unity ECS (part 3)</title>
        <published>2017-01-24T00:00:00+00:00</published>
        <updated>2017-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/zenobits-unity-ecs-part-3/"/>
        <id>https://willhart.io/post/zenobits-unity-ecs-part-3/</id>
        
        <content type="html" xml:base="https://willhart.io/post/zenobits-unity-ecs-part-3/">&lt;p&gt;This is the third and final part of my three part series on the Entity Component
System we are using at @ZenobitStudios.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-3&#x2F;ecs-background-2.png&quot; alt=&quot;Zenobit ECS header (size: 1176x663px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-1&quot;&gt;first part&lt;&#x2F;a&gt;, I discussed what an ECS is, and
why we chose this architecture for our games. In the &lt;a href=&quot;&#x2F;zenobits-unity-ecs-part-2&quot;&gt;second
part&lt;&#x2F;a&gt;, I talked through several areas in which an
ECS offers some potential advantages over the “standard” Unity architecture. In
this third and final part, I’m going to describe a concrete example of how we
implemented a particular feature in our ECS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;show-don-t-tell&quot;&gt;Show don’t tell?&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous post I presented some concrete examples using an example where
we have Entities (or game objects) with a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and a
&lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;. We’re going to take this a step further here and describe (in
a relatively hand wavy way) how we implemented ranged combat in our current game
project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unity-version&quot;&gt;Unity Version&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll start by describing how I would normally implement a ranged combat system
in “Unity default” game architecture. I’m going to throw up a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sequence_diagram&quot;&gt;sequence
diagram&lt;&#x2F;a&gt; to describe the system,
and then step through it bit by bit.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-3&#x2F;unity_example-3.png&quot; alt=&quot;Sequence Diagram for Unity Ranged Combat (size: 612x734px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can see there are three participants in this approach - a “Ranged Attacker”,
a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and a &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;, which are MonoBehaviour derived
classes attached to the same GameObject. First, let’s assume that we have some
sort of ranged attacker (hand wavy assumption #1) which raycasts &#x2F; sphere
overlaps or whatever to find which enemies to hurt, and a weapon class (hand
wavy assumption #2) which stores weapon data.&lt;&#x2F;p&gt;
&lt;p&gt;Typically our attacker would then have a bunch of colliders to test against, and
there would be some logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in our ranged attacker MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetComponent&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gameObject&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Physics&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RaycastAll&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weapon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hits&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetComponent&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TakeDamage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weapon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Damage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the first loop in our sequence diagram, which is called on every
attacker’s &lt;code&gt;Update&lt;&#x2F;code&gt; method. If the attacker has health &amp;gt; 0 (the &lt;code&gt;opt&lt;&#x2F;code&gt; bit in the
sequence diagram) then it calls the public &lt;code&gt;TakeDamage&lt;&#x2F;code&gt; method of any collided
&lt;code&gt;HealthComponents&lt;&#x2F;code&gt;. This then triggers the Health Component to find out if there
is an attached Shield Component. If there is, then it runs the shield’s logic
and reduce health by any remaining damage. It might look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TakeDamage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damage&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageTaken &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span&gt;        ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damage
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetRemainingDamage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damage&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageTaken&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That’s pretty straightforward, and I’ll leave the implementation of
&lt;code&gt;ShieldComponent::GetRemainingDamage()&lt;&#x2F;code&gt; up to your imagination. We now need a
way to remove dead GameObjects. We could do this in the &lt;code&gt;TakeDamage&lt;&#x2F;code&gt; method on
&lt;code&gt;HealthComponent&lt;&#x2F;code&gt;, and just check if health is less than or equal to 0 and
&lt;code&gt;Destroy()&lt;&#x2F;code&gt; the game object. This could cause difficulties though, as now there
is a possibility that objects are destroyed before they have the ability to
attack back. In theory, whichever objects are higher in the &lt;code&gt;Update&lt;&#x2F;code&gt; order now
have an advantage.&lt;&#x2F;p&gt;
&lt;p&gt;To fix this, we need to move our “death” code out of the &lt;code&gt;TakeDamage&lt;&#x2F;code&gt; loop and
into an &lt;code&gt;Update&lt;&#x2F;code&gt; method. However, if you ran the code now, there would still be
a problem. By default, GameObjects are considered in the order that they were
instantiated in, then each MonoBehaviour on the GameObject has its &lt;code&gt;Update&lt;&#x2F;code&gt;
method called, in a slightly strange order.[1] We still can’t guarantee that
ordering in the hierarchy won’t have an impact on the outcome of ranged combat.
To fix this we need to set an order of script execution using the Script
Execution Order editor window. This way we can ensure all of the ranged attack
occurs before any &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; destroys an entity. It works, but its a bit
confusing and arguably not very scalable.&lt;&#x2F;p&gt;
&lt;p&gt;There you go - the Unity system in a nutshell. Now let’s take a look at how our
ECS tackled this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ecs-version&quot;&gt;ECS Version&lt;&#x2F;h2&gt;
&lt;p&gt;Once again, I’ll throw out the sequence diagram for starters, then work through
it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-3&#x2F;ecs_example-6.png&quot; alt=&quot;Sequence Diagram for ECS Ranged Combat (size: 969x513px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Immediately you can see there are a few more moving pieces. Now we have three
systems alongside our two components. The components have the same data attached
but the &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; now has a &lt;code&gt;DamageReceived&lt;&#x2F;code&gt; property (see note 2), but
all logic has been removed from them.&lt;&#x2F;p&gt;
&lt;p&gt;Our systems run one at a time, in the order in which they are added to the ECS
when we bootstrap it. Each runs an Update loop, which for the &lt;code&gt;RangedSystem&lt;&#x2F;code&gt; may
look like the following (see note 3):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; \&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_enemyMatcher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetMatches&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;weapon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Damage&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It doesn’t get too much simpler than that. Obviously there are some
implementation details around how we get the list of enemies to attack, (see
note 4) but the system itself couldn’t be easier to understand.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;DamageSystem&lt;&#x2F;code&gt; then runs, calculating how much damage goes to health and how
much to shields. It might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetAll&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ShieldComponent&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Mathf&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Min&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ShieldComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ShieldComponent&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;-= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shieldTaken&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enemy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks like a “lot” of code, but it combines the
&lt;code&gt;HealthComponent::TakeDamage()&lt;&#x2F;code&gt; and &lt;code&gt;ShieldComponent::GetRemainingDamage()&lt;&#x2F;code&gt;
methods from our Unity implementation into one place. Basically we allocate the
damage between shields and health and update them accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Finally we have our &lt;code&gt;DeathSystem&lt;&#x2F;code&gt; which removes entities when they die. It
probably looks something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetAll&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComponent&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Destroy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Entity&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, we can tell at a glance &lt;em&gt;exactly&lt;&#x2F;em&gt; what the code does, and we can
guarantee without any configuration or magic that it won’t be executed until
after all damage has been dealt out.&lt;&#x2F;p&gt;
&lt;p&gt;As the systems operate on a “batch” of Components in order, and components are
complete standalone, then it makes race conditions unlikely. While Unity does
provide a workable solution to this issue in the Script Execution Order
settings, the ECS approach is &lt;em&gt;failsafe&lt;&#x2F;em&gt; in that it protects against race
conditions by default.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparing-the-two&quot;&gt;Comparing the two&lt;&#x2F;h2&gt;
&lt;p&gt;So I’m sure you could look at the Unity or ECS code and suggest ways they could
be improved. However, they are after all just examples for illustration, and a
bit hand wavy as I promised.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back at the two, the ECS architecture has a few more moving pieces, and
it probably results in a bit more code being written. However in my mind at
least, it provides a much simpler, more loosely coupled structure than the Unity
approach. Importantly:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;None of the Systems depend on any of the other systems&lt;&#x2F;li&gt;
&lt;li&gt;Each of the Systems contains all the necessary logic to perform their
function (recall that this also makes refactoring our code significantly
easier)&lt;&#x2F;li&gt;
&lt;li&gt;The Systems do one thing, and only one thing&lt;&#x2F;li&gt;
&lt;li&gt;The Components just hold data, they don’t do anything else&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In my mind this makes for a more flexible, more extensible architecture.
Hopefully I’ve given you some insight into why we picked our particular approach
for game architecture, and how we get it to work. I’m sure you have your own
opinions and that’s totally fine by me!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;I ran a few tests in Unity with some simple scripts to work out what was
going on here. Strangely, it seemed that the execution order of
MonoBehaviours differed on game objects depending on whether they were in the
editor hierarchy or instantiated while the game was running. This has
implications for game logic, and can create some pretty weird bugs if you
aren’t careful - actually this might be a good topic for another blog post!&lt;&#x2F;li&gt;
&lt;li&gt;In practice we store a list of structs in the DamageReceived property, which
lets the system handle multiple different damage types and effects, but I’m
trying to keep things manageable here :)&lt;&#x2F;li&gt;
&lt;li&gt;See part 2 of this series for details of the Matcher class&lt;&#x2F;li&gt;
&lt;li&gt;In practice we use Unity’s colliders and a bridging MonoBehaviour to inject
collision data into the ECS. The bridging class is very simple and can be
reused for any entity which receives collisions.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zenobit&#x27;s Unity ECS (part 2)</title>
        <published>2017-01-20T00:00:00+00:00</published>
        <updated>2017-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/zenobits-unity-ecs-part-2/"/>
        <id>https://willhart.io/post/zenobits-unity-ecs-part-2/</id>
        
        <content type="html" xml:base="https://willhart.io/post/zenobits-unity-ecs-part-2/">&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-1&quot;&gt;first part&lt;&#x2F;a&gt;, we introduced the ECS
architecture and explained a bit about why we chose to avoid Unity’s standard
architectural approach. We also set up an example, using entities with both a
&lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and an optional &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;ecs-background-2.png&quot; alt=&quot;Zenobit ECS header (size: 1176x663px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this part I’ll go into some more detail, using this example, of some specific
areas where we thought a pure ECS offered some benefits. Zentropy has provided
some value suggestions for this article, and again I’d like to point out that
this is purely our opinion, and we’d welcome discussion!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;separation-of-logic-and-data&quot;&gt;Separation of Logic and Data&lt;&#x2F;h2&gt;
&lt;p&gt;As I touched on in the first part, a major difference between a pure ECS and
Unity’s approach to ECS is that Unity encourages merging components and systems
into the same class, that is: data and logic are in the same place. This
approach works quite well for small or simple projects, however as the project
grows in complexity, I’d argue that it can quickly lead to a code base that is
tangled up and confusing.&lt;&#x2F;p&gt;
&lt;p&gt;Already we can see a potential confusion in our Health &#x2F; Shield example. We have
placed our logic in the &lt;code&gt;HealthComponent&lt;&#x2F;code&gt;, but in order to determine how much
damage to take, the &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; has to access the &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;.
However, the &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt; may also need its own logic to determine how much
damage it saves.&lt;&#x2F;p&gt;
&lt;p&gt;All of a sudden, our components are no longer standalone, and there is a
dependency between them which looks like the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;unity_dependencies-1.png&quot; alt=&quot;Interdependencies in Unity’s Approach to ECS&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is usually resolved by making everything public on MonoBehaviours, or
exposing public methods, which isn’t too different to the ECS approach.&lt;&#x2F;p&gt;
&lt;p&gt;However, two issues remain. Either:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Our damage logic is spread over two (or more) files, or&lt;&#x2F;li&gt;
&lt;li&gt;Components are responsible for setting values on other components, which
violates the single responsibility principle.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the pure ECS approach, this problem is resolved by moving logic “up” a level.
The logic is placed in a &lt;code&gt;HealthSystem&lt;&#x2F;code&gt;, which reads in the component data, and
allocates the appropriate amount of damage to shield energy and current health.
The dependencies now look a little like this (assuming current shield and health
levels are accessed publicly)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;ecs_dependencies-1.png&quot; alt=&quot;Interdependencies in a pure ECS Approach&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now arguably there isn’t a huge difference between ECS and Unity here in this
simplistic example, but in my mind the ECS approach is considerably cleaner -
the logic is all in one place, and the Components don’t do &lt;em&gt;anything&lt;&#x2F;em&gt; except
hold data.&lt;&#x2F;p&gt;
&lt;p&gt;When all our logic is in standalone systems, our game itself (i.e. not just the
entities) becomes composable. For instance we can build up our game from
systems:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageSystem&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HealthRegenerationSystem&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Ecs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MovementSystem&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Functionality can then be turned on or off in one place in the code base, by
adding or removing a single line where we “bootstrap” our ECS. This is much
harder to do when the logic is scattered throughout MonoBehaviours and prefabs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;managing-links-between-components&quot;&gt;Managing Links Between Components&lt;&#x2F;h2&gt;
&lt;p&gt;Writing our own ECS let us have complete control over the lifecycle of the
classes that it contains via their constructors. We can use this to provide
efficient methods for accessing either specific components on an entity, all
instances of a component type, or a subset of components.&lt;&#x2F;p&gt;
&lt;p&gt;If we wanted all Components of a given type currently in the game with Unity, we
would need to do something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;healthComps &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FindObjectsOfType&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    typeof(HealthComponent)) as HealthComponent[];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach loops through every game object and component in the scene, which
quickly becomes performance prohibitive.&lt;&#x2F;p&gt;
&lt;p&gt;In our ECS, we can do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;healthComps &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ecsEngine&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;HealthComp&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Internally, our ECS approach uses a Dictionary lookup, which in the normal, best
case is &lt;code&gt;O(1)&lt;&#x2F;code&gt; - i.e. it takes the same amount of time no matter how many
Components we have.&lt;&#x2F;p&gt;
&lt;p&gt;As we have complete control over the construction of Components and Entities, we
can also trigger &lt;code&gt;Events&lt;&#x2F;code&gt; when Components are added or removed from the ECS
system.&lt;&#x2F;p&gt;
&lt;p&gt;This lets us do neat things; we can create lazily evaluated &lt;code&gt;Matcher&lt;&#x2F;code&gt; classes
that retrieve components based on a specific criteria, and only update when the
underlying ECS data changes. In our example, we can use this to track all
Entities with a &lt;code&gt;HealthComp&lt;&#x2F;code&gt; but not a &lt;code&gt;ShieldComp&lt;&#x2F;code&gt;, and be guaranteed that this
is up to date:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; field declaration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;Matcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_noShieldEntities &lt;&#x2F;span&gt;&lt;span&gt;= new Matcher()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AllOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ComponentTypes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HealthComponent&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NoneOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ComponentTypes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ShieldComponent&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These can then be accessed by calling &lt;code&gt;_noShields.GetMatches()&lt;&#x2F;code&gt;, which returns
&lt;code&gt;IEnumerable&amp;lt;EcsEntity&amp;gt;&lt;&#x2F;code&gt; and is evaluated lazily, and only if the underlying
data structure is “dirty”.&lt;&#x2F;p&gt;
&lt;p&gt;This gives us improved performance and flexibility relative to Unity’s standard
approach, but perhaps more importantly the logic for this is hidden inside the
ECS implementation, and doesn’t clutter up our Components themselves.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serialisation&quot;&gt;Serialisation&lt;&#x2F;h2&gt;
&lt;p&gt;Taking our &lt;code&gt;Health&lt;&#x2F;code&gt; and &lt;code&gt;Shield&lt;&#x2F;code&gt; entities again, lets assume there are 10 different
types of enemies. Half of them have shields, but all of them have different
shield energy and maximum health values. How do we handle this in Unity?&lt;&#x2F;p&gt;
&lt;p&gt;We could manage this with prefabs, however as we can’t use inheritance here,
this approach scales very poorly. Unity’s built in serialisation is a bit hit
and miss, but luckily there are several decent external libraries. We could load
data from file (XML, YAML or JSON), and then somehow overwrite, or manually
populate MonoBehaviours. Again this scales poorly for any sort of moderately
complex data structure and needs a fair bit of hand written logic if we want to
dynamically add or remove components.&lt;&#x2F;p&gt;
&lt;p&gt;By contrast, the ECS approach has the following structure&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-2&#x2F;ecs_serialisation_approach.png&quot; alt=&quot;Serialising Entity Data - the ECS Way&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The key here is that we are just serialising &#x2F; deserialising data structures. As
we have complete control over the process we can determine when and how Unity’s
game objects are created, pooled or destroyed. Unity has become a &lt;em&gt;GUI&lt;&#x2F;em&gt; for our
game. It is trivial to serialise an entire Entity, or a group of Entities, load
them in and attach “display” game objects to them.&lt;&#x2F;p&gt;
&lt;p&gt;As our entire ECS is serializable and housed in a single location, saving games
suddenly becomes a lot simpler - we just serialize our ECS system to file (see
note 1).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;portability&quot;&gt;Portability&lt;&#x2F;h2&gt;
&lt;p&gt;The way our ECS is designed, we essentially use Unity as a GUI, which overlays
our game architecture. Unity does a couple of things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Handles user input,&lt;&#x2F;li&gt;
&lt;li&gt;Provide a physics engine (i.e. notifying the ECS when a collision occurs,
handling projectile ballistics, etc),&lt;&#x2F;li&gt;
&lt;li&gt;Displays the current state of the game to the player&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In specific instances, such as collision handling, or UI we use “bridging”
MonoBehaviours, which inject data from Unity methods such as &lt;code&gt;OnCollisionEnter&lt;&#x2F;code&gt;
into our ECS. These are the only Unity specific aspects of the game architecture
and are usually very simple 1-2 line methods.&lt;&#x2F;p&gt;
&lt;p&gt;In theory, this means we are less bound to the Unity ecosystem. If we decided to
move to Godot once C# support landed, we would only have to replace the
“bridging” classes and the rest of our game logic could remain almost the same
(see note 2).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;This may be a bit of stretch, but by Unity’s &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blogs.unity3d.com&#x2F;2015&#x2F;12&#x2F;23&#x2F;1k-update-calls&#x2F;&quot;&gt;own
analysis&lt;&#x2F;a&gt; (and admittedly
on iPhone builds), using Unity’s Update magic method was $5-20\times$ slower
than just calling a bare update method. This may not add more than a few
milliseconds per frame (2-18ms added with &lt;em&gt;10,000&lt;&#x2F;em&gt; &lt;code&gt;MonoBehaviour&lt;&#x2F;code&gt; instances) so
the impact is not huge, but if the MonoBehaviour’s can be avoided than that’s an
easy performance pickup. At the end of the day, why carry around the whole
MonoBehaviour or ScriptableObject baggage when in these instances the
functionality isn’t being used?&lt;&#x2F;p&gt;
&lt;p&gt;(Of course, it possible that this performance gap will decrease over time as
Unity optimises further).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;refactoring-and-adding-features&quot;&gt;Refactoring and Adding Features&lt;&#x2F;h2&gt;
&lt;p&gt;A side effect of following the single responsibility principle, is that when its
time to refactor code it becomes a lot simpler. If we want to change the way
that damage logic works, we just go to the DamageSystem and edit that file, with
no need to hunt through any other classes. This is true of both Unity and pure
ECS approaches, but as we’ve seen the Unity approach sometimes leads to logic
being spread out amongst different classes.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, adding new features becomes relatively easy. Say we want to introduce
a system which can take energy from shields and add it to health. All we need to
do is create a system that looks a little bit like our health system, runs after
it, and transfers shield energy to health.&lt;&#x2F;p&gt;
&lt;p&gt;We could of course add these same lines to our &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; in a Unity
approach, (although as noted this creates interdependencies in our components),
but under the ECS approach, we don’t have to touch any of our other code to make
these changes, which reduces the chance of introducing unwanted bugs.&lt;&#x2F;p&gt;
&lt;p&gt;One potential pitfall here is that if we add a lot of systems like this you can
see that we might end up looping through the lists of shield or health
components a lot. For very large games, perhaps this might cause unwanted
performance issues. My usual mantra here is to implement it first, then if the
profiler suggests we are spending too much time looping through components, we
can start to consolidate and otherwise optimise our systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;having-a-single-source-of-truth&quot;&gt;Having a single source of truth&lt;&#x2F;h2&gt;
&lt;p&gt;Actually, it turns out that having a single source of truth - i.e. a container
which holds all relevant information is extremely useful for certain features.
In particular I’m thinking of AI. Our in-house AI system is based on GOAP (see
note 3), and to make sensible decisions it needs to be able to efficiently query
the game state and ask a wide variety of questions. Our AI would be several
orders of magnitude more difficult to implement if we weren’t able to use our
ECS to find &#x2F; match and interrogate game state through the ECS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;its-not-all-bad-right&quot;&gt;Its not all bad, right?&lt;&#x2F;h2&gt;
&lt;p&gt;I wouldn’t say the Unity design approach doesn’t work, in fact I’ve happily used
this type of architecture on lots of other projects.&lt;&#x2F;p&gt;
&lt;p&gt;There are some definite weaknesses of our ECS approach:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A lot of our performance gains in terms of querying for Components and
Entities comes at the expense of increased memory usage&lt;&#x2F;li&gt;
&lt;li&gt;Using Unity’s physics and colliders etc requires a level of indirection to
work&lt;&#x2F;li&gt;
&lt;li&gt;The ECS approach probably requires more overall code to be written, even if
the individual methods and classes are small(er).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In our case, and despite these compromises, we felt that our custom ECS offered
a cleaner, more reusable architecture that we could apply to multiple different
game styles. Hopefully I’ve given you a bit of an insight into our reasoning.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-3&quot;&gt;third and final instalment&lt;&#x2F;a&gt; of this series,
I’m going to give an example of how we implemented a particular feature in our
ECS for our current game project so you can see how this would work “irl”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;In theory :) In practice we aren’t at this stage yet…&lt;&#x2F;li&gt;
&lt;li&gt;Again… in theory :) In practice, this is probably unlikely, but its nice to
be less dependent on one particular ecosystem.&lt;&#x2F;li&gt;
&lt;li&gt;GOAP stands for Goal Oriented Action Planning. Read more about it
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;alumni.media.mit.edu&#x2F;~jorkin&#x2F;goap.html&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zenobit&#x27;s Unity ECS (part 1)</title>
        <published>2017-01-16T00:00:00+00:00</published>
        <updated>2017-01-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/zenobits-unity-ecs-part-1/"/>
        <id>https://willhart.io/post/zenobits-unity-ecs-part-1/</id>
        
        <content type="html" xml:base="https://willhart.io/post/zenobits-unity-ecs-part-1/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;zenobits-unity-ecs-part-1&#x2F;ecs-background-2.png&quot; alt=&quot;Zenobit ECS header (size: 1176x663px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve recently started a collaboration with Zentropy under the name Zenobit
Studios - for now you can find us at @ZenobitStudios on Twitter if you want to
know more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Our first project was the November 2016 GitHub Game Jam, where we spent a month
creating a very basic RTS. The game wasn’t that great (and our artist went AWOL
which didn’t help), but we had a working RTS with a multilevel enemy AI by the
end of it.&lt;&#x2F;p&gt;
&lt;p&gt;For the game jam, our RTS was built on the back of an “ECS Architecture”, and I
want to describe here why we both thought that this was a good approach for game
architectural design that can be applied to many different game genres.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I should probably point out at this point that I don’t believe there is any
such thing as “the best” architecture in software. In fact, the following is
100% subjective and opinion based. Your opinion may differ, which is fine. If
you do want to chat about it, hit us up on Twitter or the comments below.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As this post turned out to be quite long, I think I’ll break it up into three
parts. In this first part I’m going to give some background on ECS
architectures, and some of the decisions which lead us to write our own. In the
second part I’m going to go into why we thought a pure (non-Unity) ECS was
worthwhile, and I’ll finish off in the third part with a practical example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-an-ecs&quot;&gt;What is an ECS?&lt;&#x2F;h2&gt;
&lt;p&gt;ECS stands for Entity Component System, which refers to an architectural
pattern. I’ll just put this here from
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity%E2%80%93component%E2%80%93system&quot;&gt;Wikipedia&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Entity-component system (ECS) is an architectural pattern … [that uses]
composition over inheritance… Every Entity consists of one or more
components which add additional behavior or functionality. Therefore, the
behavior of an entity can be changed at runtime by adding or removing
components.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words, a generic ECS system is just an approach to structuring the code
of a game which uses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Components&lt;&#x2F;strong&gt; to hold data and compose the way an Entity acts,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Entities&lt;&#x2F;strong&gt; to bundle together components, and&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Systems&lt;&#x2F;strong&gt; to apply game logic to the data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, an &lt;code&gt;Entity&lt;&#x2F;code&gt; can be composed by adding &lt;code&gt;Components&lt;&#x2F;code&gt; together. An
enemy could be made up from &lt;code&gt;Health&lt;&#x2F;code&gt;, &lt;code&gt;Movement&lt;&#x2F;code&gt;, and &lt;code&gt;Shield&lt;&#x2F;code&gt; components.&lt;&#x2F;p&gt;
&lt;p&gt;Various systems perform mutations on that data, (although some purists may
prefer Components to be immutable) for instance a &lt;code&gt;MovementSystem&lt;&#x2F;code&gt; might find
all the &lt;code&gt;Movement&lt;&#x2F;code&gt; Components and update them to move the entity around the game
world.&lt;&#x2F;p&gt;
&lt;p&gt;While there are many different ways to build an ECS, generally a key criteria is
that components are very loosely coupled. This means there are few links between
them, and each in theory is only responsible for its own particular area of
interest, such as tracking Health, or Shield status.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-just-use-unity-s-standard-approach&quot;&gt;Why not just use Unity’s standard approach?&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I picture you yelling at your screen. What I described above was
very similar to Unity’s standard approach of &lt;code&gt;GameObjects&lt;&#x2F;code&gt; (entities) and
&lt;code&gt;MonoBehaviours&lt;&#x2F;code&gt; (components and systems). Unity’s approach could certainly be
viewed as a brand of ECS, and in fact most of the things you can do with a
“pure” ECS you can do within Unity’s structure. However, as I hope I’ll show in
this series, doing it in plain C# is just a bit less… well, a bit less &lt;em&gt;ugly&lt;&#x2F;em&gt;
and a lot more flexible.&lt;&#x2F;p&gt;
&lt;p&gt;I’m going to take a simple example, and consider it from a number of angles
below. Say you have an enemy Entity with &lt;code&gt;Health&lt;&#x2F;code&gt; and &lt;code&gt;Shield&lt;&#x2F;code&gt; Components (or
MonoBehaviours). &lt;code&gt;Shield&lt;&#x2F;code&gt;s have &lt;code&gt;Energy&lt;&#x2F;code&gt; which reduces damage, but not every
enemy has a shield.&lt;&#x2F;p&gt;
&lt;p&gt;In the traditional Unity approach you would put the &lt;code&gt;Health&lt;&#x2F;code&gt; and &lt;code&gt;Shield&lt;&#x2F;code&gt;
components on the same &lt;code&gt;GameObject&lt;&#x2F;code&gt;, then either link them in the Inspector or
cache references to the other &lt;code&gt;MonoBehaviours&lt;&#x2F;code&gt; in the &lt;code&gt;Awake&lt;&#x2F;code&gt; or &lt;code&gt;Start&lt;&#x2F;code&gt;
methods.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caching MonoBehaviours is pretty much standard practice in Unity because
people say that GetComponent is a little slow, although its not clear that this
is still true. FindXXX on the other hand should be used with caution as it
iterates over every GameObject and Component in the scene!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the “pure” ECS approach you may have a &lt;code&gt;HealthSystem&lt;&#x2F;code&gt; and the enemies would
be represented by Entities, some of which just have a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt;, while
others have a &lt;code&gt;HealthComponent&lt;&#x2F;code&gt; and a &lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;. This is the composition
part both Unity and pure ECS systems offer - if the Entity has a
&lt;code&gt;ShieldComponent&lt;&#x2F;code&gt;, then it adds the “shield behaviour”.&lt;&#x2F;p&gt;
&lt;p&gt;The Unity version might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HealthComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MaxHealth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerializeField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;ShieldComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;TakeDamage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GetDamage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; regeneration logic }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ShieldComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MonoBehaviour
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;GetDamage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;damageCaused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; logic }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; regeneration logic }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s relatively easy to follow, however there is a dependency between the Health
and Shield logic, and the logic is spread out over two classes.&lt;&#x2F;p&gt;
&lt;p&gt;The “pure” ECS implementation on the other hand may look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The System
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;HealthSystem : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AbstractEcsSystem
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Update&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;   {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; find damage, shield energy and current health
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reduce shield energy and health as required
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; set DamageReceived to 0 once handled
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The Components
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serializable&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;HealthComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AbstractEcsComponent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Health &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MaxHealth &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DamageReceived &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serializable&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;ShieldComponent : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AbstractEcsComponent
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Energy &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Interestingly, we are no longer exposing public methods - all the logic is done
in Update. This reduces the “surface area” of our API, making it much easier to
debug - if something goes wrong, we generally only need to look at one method.&lt;&#x2F;p&gt;
&lt;p&gt;To replace public methods, such as weapons calling
&lt;code&gt;healthComponent.TakeDamage(4f)&lt;&#x2F;code&gt;, we now modify component data, for instance by
executing &lt;code&gt;healthComponent.DamageReceived += 4f&lt;&#x2F;code&gt;. When the system runs, it uses
these values to allocate damage.&lt;&#x2F;p&gt;
&lt;p&gt;If logic and data are separated, and each System is responsible for only doing
one thing, then its very hard to have 1,000 line mega classes. Our longest
system is 167 lines long including comments, file headers and so on, but the
majority are a lot less than 50-100 lines all up. These systems are standalone,
responsible for only one thing, located in the same place in our namespace
hierarchy, and are generally trivial to understand.&lt;&#x2F;p&gt;
&lt;p&gt;@@ Aren’t there already ECS systems?&lt;&#x2F;p&gt;
&lt;p&gt;Both @Zentropy and I (the two parts of Zenobit) were familiar with Unity, but
uncomfortable with a lot of the design decisions in the underlying framework, or
at least with the way that Unity encourages you to design your code.&lt;&#x2F;p&gt;
&lt;p&gt;We had both briefly considered other mature ECS solutions such as
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sschmid&#x2F;Entitas-CSharp&quot;&gt;Entitas&lt;&#x2F;a&gt;, however there were aspects
of most systems that we weren’t happy with and they seemed quite heavyweight for
what we were after.&lt;&#x2F;p&gt;
&lt;p&gt;We had both independently started developing our own very lightweight ECS
frameworks in plain C# before we started making games. Mine grew from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;will-hart&#x2F;4dce1335d05d34dfbc32d61d32e56b5b&quot;&gt;this
snippet&lt;&#x2F;a&gt;.
When we began to collaborate, we brought the best of our systems together, and
what we’ve ended up with what we think is a fairly robust, lightweight
architecture for developing games. Of course, we are only developing our second
game using the system so it’s possible we will totally change our mind in a few
months!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, I think that’s enough setup for now! In &lt;a href=&quot;&#x2F;post&#x2F;zenobits-unity-ecs-part-2&quot;&gt;Part 2&lt;&#x2F;a&gt;
of this series, I’m going to step through some different scenarios where we
think a “pure” ECS approach provides some benefits.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A year in review (2016 game dev edition)</title>
        <published>2017-01-15T00:00:00+00:00</published>
        <updated>2017-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/a-year-in-review-2016-edition/"/>
        <id>https://willhart.io/post/a-year-in-review-2016-edition/</id>
        
        <content type="html" xml:base="https://willhart.io/post/a-year-in-review-2016-edition/">&lt;p&gt;Looking back, 2016 was a fairly big year for me. I travelled a bit, finished up
some major work projects, moved house (to a different hemisphere) and started a
PhD! I thought it might be nice to look back at the year in review for my
favourite hobby - game dev.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;game-jams&quot;&gt;Game Jams&lt;&#x2F;h2&gt;
&lt;p&gt;I try to do game jams when I can, as its a great way to test out ideas.
Obviously juggling family life and game jams can be a bit of a challenge, but I
still managed to release five games for Game Jams in 2016!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;twirlygig&quot;&gt;Twirlygig&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;twirlygig.jpg&quot; alt=&quot;A terrible game jam game (size: 551x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210127063404&#x2F;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-35&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Ludum Dare 35 Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This game was an example of what happens when you try to balance family life
with a weekend game jam! To follow on from the Button Simulator, I decided to
make another game using ReactJS. The theme of the jam was “shape shifting” and I
wanted to see if I could use React to simulate physics. Basically the idea is
there are a whole lot of shapes which swirl down towards the centre, and you
have to press keys to match the shapes before they hit the centre. Its
not (quite) the worst game I ever made.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clockwork-dragon&quot;&gt;Clockwork Dragon&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;clockwork-dragon.jpg&quot; alt=&quot;Clockwork Dragon - a game I was actually proud of (size: 731x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wilsk.itch.io&#x2F;clockwork-dragon&quot;&gt;Ludum Dare 36 Link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I’m actually fairly proud of this game - I think its probably one of the best
games I’ve released to date. In this voxel adventure, you are a steam powered
dragon that flies around scaring villagers to steal their gold. Use the gold to
upgrade yourself, and follow along with the story.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;missile-commander&quot;&gt;Missile Commander&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;missile-commander.png&quot; alt=&quot;Missile Commander - a game made in about three hours (size: 596x402px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wilsk.itch.io&#x2F;missile-commander&quot;&gt;Game Dev League Artificial Intelligence Jam, itch.io link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wasn’t going to take part in this game jam, but changed my mind at the last
minute. Hence this game was made in about 2-3 hours, and it shows! Its kind of a
cross between &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;interplanetary.weebly.com&#x2F;&quot;&gt;Interplanetary&lt;&#x2F;a&gt; and just about
any artillery type game ever made. Fire off missiles from the surface of the
earth and hope to get the enemy before they get you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-eridanus-monument&quot;&gt;The Eridanus Monument&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;eridanus-monument.png&quot; alt=&quot;Eridanus Monument - my attempt at a more narrative game (size: 473x312px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wilsk.itch.io&#x2F;eridanus&quot;&gt;Game Dev League Area 51 Jam, itch.io link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This was probably the most experimental “game” I’ve made to date. Its a
hand-drawn story driven narrative game. There isn’t a whole lot of game play, so
I guess its almost semi-interactive fiction. I’m pretty proud of it, even if the
“critical reception” wasn’t great.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-game-jam-november&quot;&gt;GitHub Game Jam (November)&lt;&#x2F;h3&gt;
&lt;p&gt;I also participated in the GitHub November Game Jam, and along with Zentropy
built up a functioning RTS, and a solid entity component system framework which
I hope I’ll have more to say about later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;art&quot;&gt;“Art”&lt;&#x2F;h2&gt;
&lt;p&gt;I tinkered around quite a lot with Blender and MagicaVoxel in 2016, mostly in
the low poly style because thats about all I can manage. Here are a few things I
worked on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-random-low-poly-landscape&quot;&gt;A random low poly landscape&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;Random-Landscape-2.png&quot; alt=&quot;Low poly scene (size: 1337x746px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;some-random-medieval-game-assets&quot;&gt;Some random medieval game assets&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;medieval_assets.png&quot; alt=&quot;Some medieval game assets (size: 1536x864px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;four-seasons&quot;&gt;Four seasons&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;Seasons-Composite.png&quot; alt=&quot;Four seasons (size: 1536x618px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;camping-under-the-stars&quot;&gt;Camping under the stars&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-year-in-review-2016-edition&#x2F;Scene-4.2-J.png&quot; alt=&quot;Camping under the stars (size: 1152x618px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2017&quot;&gt;2017?&lt;&#x2F;h2&gt;
&lt;p&gt;Well I’m pretty excited for 2017 both professionally and for game dev. I’m
working with Zentropy from the GitHub game jam on some new ideas and our ECS is
maturing rapidly. I’m hoping I’ll have a lot more to talk about this year, and
this time in 2018 :)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A very switchy button, LD34 Post-Mortem</title>
        <published>2015-12-20T00:00:00+00:00</published>
        <updated>2015-12-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/a-very-switchy-button-ld34-post-mortem/"/>
        <id>https://willhart.io/post/a-very-switchy-button-ld34-post-mortem/</id>
        
        <content type="html" xml:base="https://willhart.io/post/a-very-switchy-button-ld34-post-mortem/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;a-very-switchy-button-ld34-post-mortem&#x2F;switchy-button-ld34.png&quot; alt=&quot;Screenshot of the game in action (size: 798x602px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-34&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Play the game here&lt;&#x2F;a&gt; | &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;ludum_react_boilerplate&#x2F;tree&#x2F;ld34&quot;&gt;View the source code here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;&#x2F;h2&gt;
&lt;p&gt;I had the idea for Button Simulator, my LD34 entry, while watching a crappy
science fiction movie. The characters sat at their space ship consoles, flicking
switches and pressing buttons. There was something strangely entertaining about
the experience - the link between human and machine - a sense of power, and a
satisfaction in being able to control the world around you with just a flick of
your fingers.&lt;&#x2F;p&gt;
&lt;p&gt;I suppose its also the same little itch that DCS A-10 and its hard-core
simulator siblings scratch, or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=j6zseFi070E&quot;&gt;this mission control
desk&lt;&#x2F;a&gt;. But how to translate a
switch flicking simulation into something that was fun to play and could be
completed in a weekend?&lt;&#x2F;p&gt;
&lt;p&gt;I suppose I completed the process back to front - instead of using the theme to
generate a game idea, I used the theme to flavour the game idea I already had!
In the final days leading up to the theme announcement I took the 20 final
themes and wrote a short paragraph - a “hook” - for as many themes as I could
that set out how my game idea would fit into each theme. My hook for the
“growing” theme was:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Last year’s crop wasn’t that great,
and unfortunately we had to let Freddy go…
…from altitude.
Don’t let the crop die”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This turned out to be pretty close to the final intro text. Even if my approach
was back to front it meant that although I wasn’t ecstatic about the themes that
were announced, at least I had something ready to go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-the-game&quot;&gt;Making the game&lt;&#x2F;h2&gt;
&lt;p&gt;My last Ludum Dare entry was probably the worst thing I have ever publicly
released. I wasn’t happy with it at all, and I think it was because I didn’t
have a solid concept in mind before I started, and as such was a bit all over
the place. This time I decided to do a lot more planning and so I spent the
morning of the first day jotting down some thoughts and scribbling out the UI.
My idea was that there was a relatively old fashioned computer terminal that
controlled the growth of a crop. You had to flick switches and turn dials to
manage light, food and water, and keep the crop growing.&lt;&#x2F;p&gt;
&lt;p&gt;I had decided ahead of time to make the game using React.js and Redux. I’ve
played around with web interfaces using these technologies, but I was curious to
apply the Redux&#x2F;Flux methodology to a game. (If you aren’t aware of React&#x2F;Flux
then its worth reading up on, if nothing else as another way to approach
application design) As it turned out React was very well suited to the type of
game I made and I felt it helped me develop very rapidly and relatively bug
free. Hot reloading (i.e. when you save the source the changes get immediately
injected into the browser) is a massive productivity increase, particularly when
playing around with styles and layout.&lt;&#x2F;p&gt;
&lt;p&gt;I could probably have made more use of ES6 and javascript features, in
particular a lot of my game logic could have been simplified using a few calls
to Array.reduce(), and I should probably have used selectors for some of my UI
code, however overall I’m happy with the way the code base turned out. Would I
use React again for another LD entry? Depending on the type of game, yes I
probably would.&lt;&#x2F;p&gt;
&lt;p&gt;I used Inkscape for the graphics and Audacity to make the sounds. The sounds
effects were all bundled in a single file and I used Howler.js to treat them as
a sound sprite. I think the buttons have a really nice tactile feel to them, and
at least some of you agree.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-was-received&quot;&gt;How it was received&lt;&#x2F;h2&gt;
&lt;p&gt;Most comments have been positive, although time will tell what people have
actually rated the game!&lt;&#x2F;p&gt;
&lt;p&gt;I did wonder a bit about the difficulty level. As I made it and am aware of the
logic, I can win quite easily. However for other players (although its not meant
to be an easy game) a lot of the comments have been that its a bit confusing and
challenging. I did put in some help tucked away in one corner which explains a
lot of the mechanics (and one of the game screenshots shows the help screen),
but many players didn’t seem to find the option.&lt;&#x2F;p&gt;
&lt;p&gt;I’m a bit torn about this feedback - the “plot” of the game is that you have no
idea what you are doing, so providing any sort of help is kind of breaking that
premise. At the same time the game is meant to be fun. I think in future I’ll
make the help button a bit more prominent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;&#x2F;h2&gt;
&lt;p&gt;I’m thinking of making the game into a sort of multiplayer party game that I can
play with my mates. This could probably be done in React using RethinkDB and
websockets, however in this case I think I’ll do it in Unity as I want to try
out Forge Networking. I do want to bring a lot of the React&#x2F;Flux mentality to
the C# version though, where appropriate, particularly the idea of a single
global state - although I think I’ll discard some of the immutability Flux
favours for its state.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-34&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Play the game here&lt;&#x2F;a&gt; | &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;will-hart&#x2F;ludum_react_boilerplate&#x2F;tree&#x2F;ld34&quot;&gt;View the source code here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ludum Dare 32 Postmortem - Colour Rocket</title>
        <published>2015-04-27T00:00:00+00:00</published>
        <updated>2015-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              William Hart
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willhart.io/post/ludum-dare-32-postmortem-colour-rocket/"/>
        <id>https://willhart.io/post/ludum-dare-32-postmortem-colour-rocket/</id>
        
        <content type="html" xml:base="https://willhart.io/post/ludum-dare-32-postmortem-colour-rocket/">&lt;p&gt;A couple of weekends ago I participated in my first &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ludumdare.com&#x2F;&quot;&gt;Ludum
Dare&lt;&#x2F;a&gt; - LD32. The theme for the event was “&lt;em&gt;an
unconventional weapon&lt;&#x2F;em&gt;”. If you aren’t familiar, Ludum Dare is basically a
weekend long game jam where you make a game from scratch in 48 hours. In the
“compo” version you need to make all assets - art, code, music and gameplay -
within the 48 hours… oh yeah and you have to do it on your own.&lt;&#x2F;p&gt;
&lt;p&gt;My game was called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ludumdare.com&#x2F;compo&#x2F;ludum-dare-32&#x2F;?action=preview&amp;amp;uid=50407&quot;&gt;Colour
Rocket&lt;&#x2F;a&gt; and
the concept was an “infinite runner” inspired asteroid dodger, where you aim was
to guide a rocket to an enemy planet through flying asteroids, and use it to
return colour to a darkened universe.&lt;&#x2F;p&gt;
&lt;p&gt;At about 5pm on the final day of Ludum Dare, I decided I’d had enough. I put
down my keyboard and picked up my baby daughter for a cuddle. She has since
forgiven me for ignoring her for the best part of a day. This left me with a
fully functional, complete but very minimal game with only three levels. I’m
pretty happy that I was able to get that far.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;toolset&quot;&gt;Toolset&lt;&#x2F;h2&gt;
&lt;p&gt;I picked a fairly standard free toolset early on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unity to make the game,&lt;&#x2F;li&gt;
&lt;li&gt;Blender for artwork, and&lt;&#x2F;li&gt;
&lt;li&gt;Sunvox for music&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-worked&quot;&gt;What worked&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;music&quot;&gt;Music&lt;&#x2F;h3&gt;
&lt;p&gt;With the exception of one or two minor volume issues, I’m pretty happy with the
music I made. There is a different song for each menu screen or level, and
although they aren’t going to win any prizes, given its the first time I’ve
tried to make music I don’t think the songs are too horrendous.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;artwork&quot;&gt;Artwork&lt;&#x2F;h3&gt;
&lt;p&gt;The artwork was very basic low poly stuff and I quite like the look of the black and white planets before colour is returned to the universe. Its very basic as a few comments have noted, but yeah “programmer art”.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;ludum-dare-32-postmortem-colour-rocket&#x2F;ld32-colour-rocket.png&quot; alt=&quot;Programmer art at its finest (size: 900x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;&#x2F;h3&gt;
&lt;p&gt;I tried something a bit different with the player controller. The player’s
rocket is always at &lt;code&gt;(0,0,0)&lt;&#x2F;code&gt;, and the asteroids move around the player. I can’t
really say I have a logical reason for doing it this way other than it meant I
didn’t have to think about the camera or moving cleanup&#x2F;spawn regions. In the
end I think this worked ok.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-didn-t-work&quot;&gt;What didn’t work&lt;&#x2F;h2&gt;
&lt;p&gt;There were a couple of areas where the game clearly fell short. Although its
promising to think that most of these would have been easily solved if I’d spent
more time on them! In no particular order…&lt;&#x2F;p&gt;
&lt;h3 id=&quot;obstacles&quot;&gt;Obstacles&lt;&#x2F;h3&gt;
&lt;p&gt;My method for slinging asteroids towards the player was to spawn a whole lot at the back of the screen. However this lead to disconcerting “pop in” in the background as asteroids were recycled. As the asteroids were rigid bodies with collisions, it also meant that the target planet effectively carved a tunnel in to the asteroid field that would sometimes let the player travel through the whole level without touching the controls… oops!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willhart.io&#x2F;post&#x2F;ludum-dare-32-postmortem-colour-rocket&#x2F;ld32-colour-rocket-2.png&quot; alt=&quot;Going through an asteroid tunnel (size: 900x500px)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I fixed the pop in issue by running a coroutine to gradually scale asteroids up
from 0 to 1 as they were spawned in, but the difficulty and asteroid placement
proved to be a bit more difficult. I tried adding some pre-existing asteroids
which improved things a bit, but I think if I’d had more time I should have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;created some more larger static obstacles,&lt;&#x2F;li&gt;
&lt;li&gt;created more asteroid spawn points to the sides, shooting asteroids across the
player’s path&lt;&#x2F;li&gt;
&lt;li&gt;had the target planets move around instead of sitting still&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;user-feedback-and&quot;&gt;User Feedback and&lt;&#x2F;h3&gt;
&lt;p&gt;UI Many of the comments so far have been along the lines of “the controls
stopped working”. At first I thought this was a weird bug I hadn’t seen, then I
realised that it was probably related to one of the game mechanics I’d
implemented.&lt;&#x2F;p&gt;
&lt;p&gt;So that players can’t just mash the controls non-stop, the rocket has a limited
amount of fuel. The idea was to make the player chose between getting hit by an
asteroid and running out of fuel by moving too much. (Move around too much and
you lose the ability to manoeuvre).&lt;&#x2F;p&gt;
&lt;p&gt;On realising that players were thinking of a game mechanic as a big, my first
reaction was in truth a bit defensive…&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;well, it mentions fuel on the first screen and there is a fuel bar on the GUI,
so it should be obvious, right? RIGHT?!?!?!!?!“.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then I realised that the comments were actually letting me know that the game
mechanic was a bit too obscure. To be “intuitive”, every important player action
in the game needs to have visual or audio feedback.&lt;&#x2F;p&gt;
&lt;p&gt;It wasn’t enough to hope the player read three paragraphs of text, or noticed a
small fuel bar in one corner of the screen - I needed flashing text, colour or
sounds to notify the user they were about to run afoul of a crucial game
mechanic.&lt;&#x2F;p&gt;
&lt;p&gt;This is even more important in something like Ludum Dare where players may only
spend a minute or two with your game.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;&#x2F;h2&gt;
&lt;p&gt;To summarise, there were two main lessons for me from this Ludum Dare entry:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t get defensive about feedback - listen to what the players are saying,
and try to work out why they are saying it.&lt;&#x2F;li&gt;
&lt;li&gt;Audio and visual cues are critical for communicating game mechanics.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I enjoyed the weekend a lot, and I’ve been playing and enjoying some of the
other entries. Bring on the next Ludum Dare!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
